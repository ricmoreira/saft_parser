//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		localhost:8100/saft-t-1_04.xsd
package go_SaftT104

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasElem_SoftwareCertificateNumber struct {
	SoftwareCertificateNumber int32 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SoftwareCertificateNumber" bson:"SoftwareCertificateNumber" json:"SoftwareCertificateNumber"` // xsdt.NonNegativeInteger
}

//	If the WalkHandlers.XsdGoPkgHasElem_SoftwareCertificateNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SoftwareCertificateNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SoftwareCertificateNumber instance.
func (me *XsdGoPkgHasElem_SoftwareCertificateNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SoftwareCertificateNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Concatenacao da Conservatoria do Registo Comercial com o numero do registo comercial separados pelo caracter espaco. Nos casos em que nao existe o registo comercial, deve ser indicado o NIF.
type TxsdCompanyID xsdt.String

//	Since TxsdCompanyID is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdCompanyID) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdCompanyID is just a simple String type, this merely returns the current string value.
func (me TxsdCompanyID) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdCompanyID's alias type xsdt.String.
func (me TxsdCompanyID) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_CompanyID struct {
	//	Concatenacao da Conservatoria do Registo Comercial com o numero do registo comercial separados pelo caracter espaco. Nos casos em que nao existe o registo comercial, deve ser indicado o NIF.
	CompanyID string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CompanyID" bson:"CompanyID" json:"CompanyID"`// TxsdCompanyID
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompanyID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompanyID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CompanyID instance.
func (me *XsdGoPkgHasElem_CompanyID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompanyID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	C para Contabilidade, E para Faturacao emitida por terceiros, F para Faturacao, I para Contabilidade integrada com a faturacao, P para Faturacao parcial, R para Recibos (a), S para Autofaturacao, T para Documentos de transporte (a). (a) Deve ser indicado este tipo, se o programa apenas este emitir este tipo de documento. Caso contrario, devera ser utilizado o tipo C, F ou I
type TxsdTaxAccountingBasis xsdt.String

//	Returns true if the value of this enumerated TxsdTaxAccountingBasis is "P".
func (me TxsdTaxAccountingBasis) IsP() bool { return me.String() == "P" }

//	Returns true if the value of this enumerated TxsdTaxAccountingBasis is "R".
func (me TxsdTaxAccountingBasis) IsR() bool { return me.String() == "R" }

//	Returns true if the value of this enumerated TxsdTaxAccountingBasis is "S".
func (me TxsdTaxAccountingBasis) IsS() bool { return me.String() == "S" }

//	Since TxsdTaxAccountingBasis is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTaxAccountingBasis) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TxsdTaxAccountingBasis's alias type xsdt.String.
func (me TxsdTaxAccountingBasis) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdTaxAccountingBasis is "C".
func (me TxsdTaxAccountingBasis) IsC() bool { return me.String() == "C" }

//	Returns true if the value of this enumerated TxsdTaxAccountingBasis is "F".
func (me TxsdTaxAccountingBasis) IsF() bool { return me.String() == "F" }

//	Since TxsdTaxAccountingBasis is just a simple String type, this merely returns the current string value.
func (me TxsdTaxAccountingBasis) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdTaxAccountingBasis is "E".
func (me TxsdTaxAccountingBasis) IsE() bool { return me.String() == "E" }

//	Returns true if the value of this enumerated TxsdTaxAccountingBasis is "I".
func (me TxsdTaxAccountingBasis) IsI() bool { return me.String() == "I" }

//	Returns true if the value of this enumerated TxsdTaxAccountingBasis is "T".
func (me TxsdTaxAccountingBasis) IsT() bool { return me.String() == "T" }

type XsdGoPkgHasElem_TaxAccountingBasis struct {
	//	C para Contabilidade, E para Faturacao emitida por terceiros, F para Faturacao, I para Contabilidade integrada com a faturacao, P para Faturacao parcial, R para Recibos (a), S para Autofaturacao, T para Documentos de transporte (a). (a) Deve ser indicado este tipo, se o programa apenas este emitir este tipo de documento. Caso contrario, devera ser utilizado o tipo C, F ou I
	TaxAccountingBasis string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxAccountingBasis" bson:"TaxAccountingBasis" json:"TaxAccountingBasis"` // TxsdTaxAccountingBasis
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxAccountingBasis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxAccountingBasis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxAccountingBasis instance.
func (me *XsdGoPkgHasElem_TaxAccountingBasis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxAccountingBasis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax100Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax100Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax100Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax100Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax100Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax100Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax100Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_CompanyName struct {
	CompanyName string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CompanyName" bson:"CompanyName" json:"CompanyName"` // TSAFPTtextTypeMandatoryMax100Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompanyName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompanyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CompanyName instance.
func (me *XsdGoPkgHasElem_CompanyName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompanyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFiscalYear xsdt.Integer

//	Since TxsdFiscalYear is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TxsdFiscalYear) Set(s string) { (*xsdt.Integer)(me).Set(s) }

//	Returns a string representation of this TxsdFiscalYear's current non-string scalar value.
func (me TxsdFiscalYear) String() string { return xsdt.Integer(me).String() }

//	This convenience method just performs a simple type conversion to TxsdFiscalYear's alias type xsdt.Integer.
func (me TxsdFiscalYear) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

type XsdGoPkgHasElem_FiscalYear struct {
	FiscalYear int32 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 FiscalYear" bson:"FiscalYear" json:"FiscalYear"` // TxsdFiscalYear
}

//	If the WalkHandlers.XsdGoPkgHasElem_FiscalYear function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FiscalYear instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FiscalYear instance.
func (me *XsdGoPkgHasElem_FiscalYear) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FiscalYear; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTDateSpan xsdt.Date

//	Since TSAFPTDateSpan is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTDateSpan) Set(s string) { (*xsdt.Date)(me).Set(s) }

//	Since TSAFPTDateSpan is just a simple String type, this merely returns the current string value.
func (me TSAFPTDateSpan) String() string { return xsdt.Date(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTDateSpan's alias type xsdt.Date.
func (me TSAFPTDateSpan) ToXsdtDate() xsdt.Date { return xsdt.Date(me) }

type XsdGoPkgHasElem_StartDate struct {
	StartDate string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 StartDate" bson:"StartDate" json:"StartDate"` // TSAFPTDateSpan
}

//	If the WalkHandlers.XsdGoPkgHasElem_StartDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StartDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StartDate instance.
func (me *XsdGoPkgHasElem_StartDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StartDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EndDate struct {
	EndDate string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 EndDate" json:"EndDate" bson:"EndDate"` // TSAFPTDateSpan
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EndDate instance.
func (me *XsdGoPkgHasElem_EndDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax20Car xsdt.String

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax20Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax20Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TSAFPTtextTypeMandatoryMax20Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax20Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax20Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax20Car) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_ProductCompanyTaxID struct {
	ProductCompanyTaxID string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductCompanyTaxID" bson:"ProductCompanyTaxID" json:"ProductCompanyTaxID"` // TSAFPTtextTypeMandatoryMax20Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductCompanyTaxID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductCompanyTaxID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductCompanyTaxID instance.
func (me *XsdGoPkgHasElem_ProductCompanyTaxID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductCompanyTaxID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax30Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax30Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax30Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax30Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax30Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax30Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax30Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_ProductVersion struct {
	ProductVersion string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductVersion" bson:"ProductVersion" json:"ProductVersion"` // TSAFPTtextTypeMandatoryMax30Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductVersion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductVersion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductVersion instance.
func (me *XsdGoPkgHasElem_ProductVersion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductVersion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuditFileVersion struct {
	AuditFileVersion string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AuditFileVersion" bson:"AuditFileVersion" json:"AuditFileVersion"` // TSAFPTtextTypeMandatoryMax30Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuditFileVersion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuditFileVersion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AuditFileVersion instance.
func (me *XsdGoPkgHasElem_AuditFileVersion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuditFileVersion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxEntity struct {
	TaxEntity string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxEntity" bson:"TaxEntity" json:"TaxEntity"` // TSAFPTtextTypeMandatoryMax20Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxEntity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxEntity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxEntity instance.
func (me *XsdGoPkgHasElem_TaxEntity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxEntity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax255Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax255Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax255Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax255Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax255Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax255Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax255Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_HeaderComment struct {
	HeaderComment string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 HeaderComment" bson:"HeaderComment" json:"HeaderComment"` // TSAFPTtextTypeMandatoryMax255Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_HeaderComment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HeaderComment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HeaderComment instance.
func (me *XsdGoPkgHasElem_HeaderComment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HeaderComment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax60Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax60Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax60Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax60Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax60Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax60Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax60Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_Website struct {
	Website string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Website" bson:"Website" json:"Website"` // TSAFPTtextTypeMandatoryMax60Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_Website function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Website instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Website instance.
func (me *XsdGoPkgHasElem_Website) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Website; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax254Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax254Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax254Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax254Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax254Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax254Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax254Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_Email struct {
	Email string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Email" bson:"Email" json:"Email"` // TSAFPTtextTypeMandatoryMax254Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Email instance.
func (me *XsdGoPkgHasElem_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Fax struct {
	Fax string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Fax" bson:"Fax" json:"Fax"` //TSAFPTtextTypeMandatoryMax20Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Fax instance.
func (me *XsdGoPkgHasElem_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTPortugueseVatNumber xsdt.Integer

//	Since TSAFPTPortugueseVatNumber is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TSAFPTPortugueseVatNumber) Set(s string) { (*xsdt.Integer)(me).Set(s) }

//	Returns a string representation of this TSAFPTPortugueseVatNumber's current non-string scalar value.
func (me TSAFPTPortugueseVatNumber) String() string { return xsdt.Integer(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTPortugueseVatNumber's alias type xsdt.Integer.
func (me TSAFPTPortugueseVatNumber) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

type XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_ struct {
	TaxRegistrationNumber int32 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxRegistrationNumber" bson:"TaxRegistrationNumber" json:"TaxRegistrationNumber"` // TSAFPTPortugueseVatNumber
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_ instance.
func (me *XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BusinessName struct {
	BusinessName string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 BusinessName" bson:"BusinessName" json:"BusinessName"` // TSAFPTtextTypeMandatoryMax60Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_BusinessName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BusinessName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BusinessName instance.
func (me *XsdGoPkgHasElem_BusinessName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BusinessName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax10Car xsdt.String

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax10Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax10Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TSAFPTtextTypeMandatoryMax10Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax10Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax10Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax10Car) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_BuildingNumber struct {
	BuildingNumber string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 BuildingNumber" bson:"BuildingNumber" json:"BuildingNumber"` //TSAFPTtextTypeMandatoryMax10Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_BuildingNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BuildingNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BuildingNumber instance.
func (me *XsdGoPkgHasElem_BuildingNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BuildingNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax200Car xsdt.String

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax200Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax200Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TSAFPTtextTypeMandatoryMax200Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax200Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax200Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax200Car) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_StreetName struct {
	StreetName string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 StreetName" bson:"StreetName" json:"StreetName"` // XsdGoPkgHasElem_StreetName
}

//	If the WalkHandlers.XsdGoPkgHasElem_StreetName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StreetName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StreetName instance.
func (me *XsdGoPkgHasElem_StreetName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StreetName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax210Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax210Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax210Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax210Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax210Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax210Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax210Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_AddressDetail struct {
	AddressDetail string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AddressDetail" bson:"AddressDetail" json:"AddressDetail"` // TSAFPTtextTypeMandatoryMax210Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_AddressDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AddressDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AddressDetail instance.
func (me *XsdGoPkgHasElem_AddressDetail) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AddressDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax50Car xsdt.String

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax50Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax50Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TSAFPTtextTypeMandatoryMax50Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax50Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax50Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax50Car) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_City struct {
	City string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 City" bson:"City" json:"City"` // TSAFPTtextTypeMandatoryMax50Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_City instance.
func (me *XsdGoPkgHasElem_City) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_City; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPostalCodePT xsdt.String

//	Since TPostalCodePT is just a simple String type, this merely sets the current value from the specified string.
func (me *TPostalCodePT) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPostalCodePT is just a simple String type, this merely returns the current string value.
func (me TPostalCodePT) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPostalCodePT's alias type xsdt.String.
func (me TPostalCodePT) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_ struct {
	PostalCode string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PostalCode" bson:"PostalCode" json:"PostalCode"` // TPostalCodePT
}

//	If the WalkHandlers.XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_ instance.
func (me *XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Region struct {
	Region string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Region" bson:"Region" json:"Region"` // TSAFPTtextTypeMandatoryMax50Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_Region function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Region instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Region instance.
func (me *XsdGoPkgHasElem_Region) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Region; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt struct {
	Country string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Country" bson:"Country" json:"Country"` // <!-- Codigo do pais (ISO 3166 1-alpha-2) -->
}

//	Returns the fixed value for Country -- "PT"
func (me XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt) CountryFixed() xsdt.String {
	return xsdt.String("PT")
}

//	If the WalkHandlers.XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt instance.
func (me *XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAddressStructurePT struct {
	XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt `bson:"inline"`
	XsdGoPkgHasElem_BuildingNumber `bson:"inline"`
	XsdGoPkgHasElem_StreetName `bson:"inline"`
	XsdGoPkgHasElem_AddressDetail `bson:"inline"`
	XsdGoPkgHasElem_City `bson:"inline"`
	XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_ `bson:"inline"`
	XsdGoPkgHasElem_Region `bson:"inline"`
}

//	If the WalkHandlers.TAddressStructurePT function is not nil (ie. was set by outside code), calls it with this TAddressStructurePT instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TAddressStructurePT instance.
func (me *TAddressStructurePT) Walk() (err error) {
	if fn := WalkHandlers.TAddressStructurePT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_BuildingNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StreetName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AddressDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_City.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Region.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompanyAddress struct {
	CompanyAddress *TAddressStructurePT `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CompanyAddress" bson:"CompanyAddress" json:"CompanyAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompanyAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompanyAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompanyAddress instance.
func (me *XsdGoPkgHasElem_CompanyAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompanyAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompanyAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur struct {
	CurrencyCode string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CurrencyCode" bson:"CurrencyCode" json:"CurrencyCode"`
}

//	Returns the fixed value for CurrencyCode -- "EUR"
func (me XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur) CurrencyCodeFixed() xsdt.String {
	return xsdt.String("EUR")
}

//	If the WalkHandlers.XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur instance.
func (me *XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DateCreated struct {
	DateCreated string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DateCreated" bson:"DateCreated" json:"DateCreated"` // TSAFPTDateSpan
}

//	If the WalkHandlers.XsdGoPkgHasElem_DateCreated function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DateCreated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DateCreated instance.
func (me *XsdGoPkgHasElem_DateCreated) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DateCreated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTProductID xsdt.String

//	Since TSAFPTProductID is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTProductID) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTProductID is just a simple String type, this merely returns the current string value.
func (me TSAFPTProductID) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTProductID's alias type xsdt.String.
func (me TSAFPTProductID) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_ProductID struct {
	ProductID string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductID" bson:"ProductID" json:"ProductID"` // TSAFPTProductID
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductID instance.
func (me *XsdGoPkgHasElem_ProductID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Telephone struct {
	Telephone string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Telephone" bson:"Telephone" json:"Telephone"` // TSAFPTtextTypeMandatoryMax20Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_Telephone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Telephone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Telephone instance.
func (me *XsdGoPkgHasElem_Telephone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Telephone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHeader struct {
	XsdGoPkgHasElem_AuditFileVersion `bson:"inline"`
	XsdGoPkgHasElem_TaxEntity `bson:"inline"`
	XsdGoPkgHasElem_HeaderComment `bson:"inline"`
	XsdGoPkgHasElem_Website `bson:"inline"`
	XsdGoPkgHasElem_Email `bson:"inline"`
	XsdGoPkgHasElem_ProductID `bson:"inline"`
	XsdGoPkgHasElem_Telephone `bson:"inline"`
	XsdGoPkgHasElem_Fax `bson:"inline"`
	XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_ `bson:"inline"`
	XsdGoPkgHasElem_BusinessName `bson:"inline"`
	XsdGoPkgHasElem_CompanyAddress `bson:"inline"`
	XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur `bson:"inline"`
	XsdGoPkgHasElem_DateCreated `bson:"inline"`
	XsdGoPkgHasElem_EndDate `bson:"inline"`
	XsdGoPkgHasElem_ProductCompanyTaxID `bson:"inline"`
	XsdGoPkgHasElem_SoftwareCertificateNumber `bson:"inline"`
	XsdGoPkgHasElem_CompanyID `bson:"inline"`
	XsdGoPkgHasElem_TaxAccountingBasis `bson:"inline"`
	XsdGoPkgHasElem_CompanyName `bson:"inline"`
	XsdGoPkgHasElem_FiscalYear `bson:"inline"`
	XsdGoPkgHasElem_StartDate `bson:"inline"`
	XsdGoPkgHasElem_ProductVersion `bson:"inline"`
}

//	If the WalkHandlers.TxsdHeader function is not nil (ie. was set by outside code), calls it with this TxsdHeader instance as the single argument. Then calls the Walk() method on 22/22 embed(s) and 0/0 field(s) belonging to this TxsdHeader instance.
func (me *TxsdHeader) Walk() (err error) {
	if fn := WalkHandlers.TxsdHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FiscalYear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductCompanyTaxID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SoftwareCertificateNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompanyID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxAccountingBasis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompanyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductVersion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Website.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AuditFileVersion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxEntity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HeaderComment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateCreated.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Telephone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BusinessName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompanyAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Header struct {
	Header *TxsdHeader `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Header" bson:"Header" json:"Header"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Header function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Header instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Header instance.
func (me *XsdGoPkgHasElem_Header) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Header; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Header.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	S para SNC base (Taxonomia S), M para SNC microentidades (Taxonomia M), N para Normas Internacionais de Contabilidade (Taxonomia S), O para outros referenciais contabilisticos cuja taxonomia nao se encontra codificada
type TxsdTaxonomyReference xsdt.String

//	Returns true if the value of this enumerated TxsdTaxonomyReference is "M".
func (me TxsdTaxonomyReference) IsM() bool { return me.String() == "M" }

//	Returns true if the value of this enumerated TxsdTaxonomyReference is "N".
func (me TxsdTaxonomyReference) IsN() bool { return me.String() == "N" }

//	Returns true if the value of this enumerated TxsdTaxonomyReference is "O".
func (me TxsdTaxonomyReference) IsO() bool { return me.String() == "O" }

//	Since TxsdTaxonomyReference is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTaxonomyReference) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdTaxonomyReference is just a simple String type, this merely returns the current string value.
func (me TxsdTaxonomyReference) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTaxonomyReference's alias type xsdt.String.
func (me TxsdTaxonomyReference) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdTaxonomyReference is "S".
func (me TxsdTaxonomyReference) IsS() bool { return me.String() == "S" }

type XsdGoPkgHasElem_TaxonomyReference struct {
	//	S para SNC base (Taxonomia S), M para SNC microentidades (Taxonomia M), N para Normas Internacionais de Contabilidade (Taxonomia S), O para outros referenciais contabilisticos cuja taxonomia nao se encontra codificada
	TaxonomyReference TxsdTaxonomyReference `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxonomyReference" json:"TaxonomyReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxonomyReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxonomyReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxonomyReference instance.
func (me *XsdGoPkgHasElem_TaxonomyReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxonomyReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTGLAccountID xsdt.String

//	Since TSAFPTGLAccountID is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTGLAccountID) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTGLAccountID is just a simple String type, this merely returns the current string value.
func (me TSAFPTGLAccountID) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTGLAccountID's alias type xsdt.String.
func (me TSAFPTGLAccountID) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ struct {
	AccountID TSAFPTGLAccountID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AccountID" json:"AccountID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ instance.
func (me *XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AccountDescription struct {
	AccountDescription TSAFPTtextTypeMandatoryMax100Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AccountDescription" bson:"AccountDescription" json:"AccountDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccountDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccountDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AccountDescription instance.
func (me *XsdGoPkgHasElem_AccountDescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccountDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFmonetaryType xsdt.Decimal

//	Since TSAFmonetaryType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFmonetaryType) Set(s string) { (*xsdt.Decimal)(me).Set(s) }

//	Since TSAFmonetaryType is just a simple String type, this merely returns the current string value.
func (me TSAFmonetaryType) String() string { return xsdt.Decimal(me).String() }

//	This convenience method just performs a simple type conversion to TSAFmonetaryType's alias type xsdt.Decimal.
func (me TSAFmonetaryType) ToXsdtDecimal() xsdt.Decimal { return xsdt.Decimal(me) }

type XsdGoPkgHasElem_ClosingDebitBalance struct {
	ClosingDebitBalance TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ClosingDebitBalance" bson:"ClosingDebitBalance" json:"ClosingDebitBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ClosingDebitBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ClosingDebitBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ClosingDebitBalance instance.
func (me *XsdGoPkgHasElem_ClosingDebitBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ClosingDebitBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ClosingCreditBalance struct {
	ClosingCreditBalance TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ClosingCreditBalance" bson:"ClosingCreditBalance" json:"ClosingCreditBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ClosingCreditBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ClosingCreditBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ClosingCreditBalance instance.
func (me *XsdGoPkgHasElem_ClosingCreditBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ClosingCreditBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFTaxonomyCode xsdt.Integer

//	Since TSAFTaxonomyCode is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TSAFTaxonomyCode) Set(s string) { (*xsdt.Integer)(me).Set(s) }

//	Returns a string representation of this TSAFTaxonomyCode's current non-string scalar value.
func (me TSAFTaxonomyCode) String() string { return xsdt.Integer(me).String() }

//	This convenience method just performs a simple type conversion to TSAFTaxonomyCode's alias type xsdt.Integer.
func (me TSAFTaxonomyCode) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

type XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_ struct {
	TaxonomyCode TSAFTaxonomyCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxonomyCode" bson:"TaxonomyCode" json:"TaxonomyCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_ instance.
func (me *XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OpeningDebitBalance struct {
	OpeningDebitBalance TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OpeningDebitBalance" bson:"OpeningDebitBalance" json:"OpeningDebitBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OpeningDebitBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OpeningDebitBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OpeningDebitBalance instance.
func (me *XsdGoPkgHasElem_OpeningDebitBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OpeningDebitBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OpeningCreditBalance struct {
	OpeningCreditBalance TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OpeningCreditBalance" bson:"OpeningCreditBalance" json:"OpeningCreditBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OpeningCreditBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OpeningCreditBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OpeningCreditBalance instance.
func (me *XsdGoPkgHasElem_OpeningCreditBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OpeningCreditBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	GR para conta de 1. grau da contabilidade geral, GA para conta agregadora ou integradora da contabilidade geral, GM para conta de movimento da contabilidade geral, AR para conta de 1. grau da contabilidade analitica, AA para conta agregadora ou integradora da contabilidade analitica, AM para conta de movimento da contabilidade analitica
type TxsdGroupingCategory xsdt.String

//	Returns true if the value of this enumerated TxsdGroupingCategory is "AA".
func (me TxsdGroupingCategory) IsAa() bool { return me.String() == "AA" }

//	Since TxsdGroupingCategory is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdGroupingCategory) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdGroupingCategory is "GA".
func (me TxsdGroupingCategory) IsGa() bool { return me.String() == "GA" }

//	Returns true if the value of this enumerated TxsdGroupingCategory is "AR".
func (me TxsdGroupingCategory) IsAr() bool { return me.String() == "AR" }

//	Returns true if the value of this enumerated TxsdGroupingCategory is "GM".
func (me TxsdGroupingCategory) IsGm() bool { return me.String() == "GM" }

//	Returns true if the value of this enumerated TxsdGroupingCategory is "AM".
func (me TxsdGroupingCategory) IsAm() bool { return me.String() == "AM" }

//	Since TxsdGroupingCategory is just a simple String type, this merely returns the current string value.
func (me TxsdGroupingCategory) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdGroupingCategory's alias type xsdt.String.
func (me TxsdGroupingCategory) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdGroupingCategory is "GR".
func (me TxsdGroupingCategory) IsGr() bool { return me.String() == "GR" }

type XsdGoPkgHasElem_GroupingCategory struct {
	//	GR para conta de 1. grau da contabilidade geral, GA para conta agregadora ou integradora da contabilidade geral, GM para conta de movimento da contabilidade geral, AR para conta de 1. grau da contabilidade analitica, AA para conta agregadora ou integradora da contabilidade analitica, AM para conta de movimento da contabilidade analitica
	GroupingCategory TxsdGroupingCategory `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GroupingCategory" bson:"GroupingCategory" json:"GroupingCategory"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GroupingCategory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GroupingCategory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GroupingCategory instance.
func (me *XsdGoPkgHasElem_GroupingCategory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GroupingCategory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_ struct {
	GroupingCode TSAFPTGLAccountID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GroupingCode" json:"GroupingCode" bson:"GroupingCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_ instance.
func (me *XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGeneralLedgerAccountsSequenceAccount struct {
	XsdGoPkgHasElem_OpeningCreditBalance `bson:"inline"`
	XsdGoPkgHasElem_GroupingCategory `bson:"inline"`
	XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_ `bson:"inline"`
	XsdGoPkgHasElem_OpeningDebitBalance `bson:"inline"`
	XsdGoPkgHasElem_AccountDescription `bson:"inline"`
	XsdGoPkgHasElem_ClosingDebitBalance `bson:"inline"`
	XsdGoPkgHasElem_ClosingCreditBalance `bson:"inline"`
	XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_ `bson:"inline"`
	XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdGeneralLedgerAccountsSequenceAccount function is not nil (ie. was set by outside code), calls it with this TxsdGeneralLedgerAccountsSequenceAccount instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TxsdGeneralLedgerAccountsSequenceAccount instance.
func (me *TxsdGeneralLedgerAccountsSequenceAccount) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeneralLedgerAccountsSequenceAccount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccountDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ClosingDebitBalance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ClosingCreditBalance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OpeningDebitBalance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OpeningCreditBalance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GroupingCategory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_ struct {
	Accounts []*TxsdGeneralLedgerAccountsSequenceAccount `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Account" bson:"Account" json:"Account"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_ instance.
func (me *XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Accounts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGeneralLedgerAccounts struct {
	XsdGoPkgHasElem_TaxonomyReference `bson:"inline"`
	XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdGeneralLedgerAccounts function is not nil (ie. was set by outside code), calls it with this TxsdGeneralLedgerAccounts instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGeneralLedgerAccounts instance.
func (me *TxsdGeneralLedgerAccounts) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeneralLedgerAccounts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxonomyReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GeneralLedgerAccounts struct {
	GeneralLedgerAccounts *TxsdGeneralLedgerAccounts `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GeneralLedgerAccounts" bson:"GeneralLedgerAccounts" json:"GeneralLedgerAccounts"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GeneralLedgerAccounts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GeneralLedgerAccounts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GeneralLedgerAccounts instance.
func (me *XsdGoPkgHasElem_GeneralLedgerAccounts) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GeneralLedgerAccounts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GeneralLedgerAccounts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CustomerTaxID struct {
	CustomerTaxID TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CustomerTaxID" json:"CustomerTaxID" bson:"CustomerTaxID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CustomerTaxID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CustomerTaxID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CustomerTaxID instance.
func (me *XsdGoPkgHasElem_CustomerTaxID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CustomerTaxID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PostalCode struct {
	PostalCode TSAFPTtextTypeMandatoryMax20Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PostalCode" json:"PostalCode" bson:"PostalCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PostalCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PostalCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PostalCode instance.
func (me *XsdGoPkgHasElem_PostalCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PostalCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Country struct {
	Country TSAFPTGLAccountID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Country" json:"Country" bson:"Country"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Country function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Country instance.
func (me *XsdGoPkgHasElem_Country) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Country; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAddressStructure struct {
	XsdGoPkgHasElem_City `bson:"inline"`
	XsdGoPkgHasElem_PostalCode `bson:"inline"`
	XsdGoPkgHasElem_Region `bson:"inline"`
	XsdGoPkgHasElem_Country `bson:"inline"`
	XsdGoPkgHasElem_BuildingNumber `bson:"inline"`
	XsdGoPkgHasElem_StreetName `bson:"inline"`
	XsdGoPkgHasElem_AddressDetail `bson:"inline"`
}

//	If the WalkHandlers.TAddressStructure function is not nil (ie. was set by outside code), calls it with this TAddressStructure instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TAddressStructure instance.
func (me *TAddressStructure) Walk() (err error) {
	if fn := WalkHandlers.TAddressStructure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Country.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BuildingNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StreetName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AddressDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_City.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostalCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Region.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BillingAddress struct {
	BillingAddress *TAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 BillingAddress" json:"BillingAddress" bson:"BillingAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BillingAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BillingAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BillingAddress instance.
func (me *XsdGoPkgHasElem_BillingAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BillingAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BillingAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SelfBillingIndicator struct {
	SelfBillingIndicator TSAFTaxonomyCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SelfBillingIndicator" json:"SelfBillingIndicator" bson:"SelfBillingIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SelfBillingIndicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SelfBillingIndicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SelfBillingIndicator instance.
func (me *XsdGoPkgHasElem_SelfBillingIndicator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SelfBillingIndicator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CustomerID struct {
	CustomerID TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CustomerID" json:"CustomerID" bson:"CustomerID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CustomerID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CustomerID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CustomerID instance.
func (me *XsdGoPkgHasElem_CustomerID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CustomerID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AccountID struct {
	AccountID TSAFPTGLAccountID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AccountID" json:"AccountID" bson:"AccountID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccountID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccountID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AccountID instance.
func (me *XsdGoPkgHasElem_AccountID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccountID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Contact struct {
	Contact TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Contact" json:"Contact" bson:"Contact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Contact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Contact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Contact instance.
func (me *XsdGoPkgHasElem_Contact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Contact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ShipToAddress struct {
	ShipToAddresses []*TAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipToAddress" json:"ShipToAddress" bson:"ShipToAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ShipToAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ShipToAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ShipToAddress instance.
func (me *XsdGoPkgHasElems_ShipToAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ShipToAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ShipToAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCustomer struct {
	XsdGoPkgHasElem_CustomerTaxID `bson:"inline"`
	XsdGoPkgHasElem_BillingAddress `bson:"inline"`
	XsdGoPkgHasElem_Telephone `bson:"inline"`
	XsdGoPkgHasElem_Fax `bson:"inline"`
	XsdGoPkgHasElem_Email `bson:"inline"`
	XsdGoPkgHasElem_CustomerID `bson:"inline"`
	XsdGoPkgHasElem_AccountID `bson:"inline"`
	XsdGoPkgHasElem_CompanyName `bson:"inline"`
	XsdGoPkgHasElem_Contact `bson:"inline"`
	XsdGoPkgHasElems_ShipToAddress `bson:"inline"`
	XsdGoPkgHasElem_Website `bson:"inline"`
	XsdGoPkgHasElem_SelfBillingIndicator `bson:"inline"`
}

//	If the WalkHandlers.TxsdCustomer function is not nil (ie. was set by outside code), calls it with this TxsdCustomer instance as the single argument. Then calls the Walk() method on 12/12 embed(s) and 0/0 field(s) belonging to this TxsdCustomer instance.
func (me *TxsdCustomer) Walk() (err error) {
	if fn := WalkHandlers.TxsdCustomer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CustomerID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccountID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompanyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ShipToAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Website.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SelfBillingIndicator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomerTaxID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BillingAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Telephone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Customer struct {
	Customers []*TxsdCustomer `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Customer" json:"Customer" bson:"Customer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Customer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Customer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Customer instance.
func (me *XsdGoPkgHasElems_Customer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Customer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Customers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SupplierID struct {
	SupplierID TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SupplierID" json:"SupplierID" bson:"SupplierID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupplierID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupplierID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SupplierID instance.
func (me *XsdGoPkgHasElem_SupplierID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupplierID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SupplierTaxID struct {
	SupplierTaxID TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SupplierTaxID" json:"SupplierTaxID" bson:"SupplierTaxID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupplierTaxID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupplierTaxID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SupplierTaxID instance.
func (me *XsdGoPkgHasElem_SupplierTaxID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupplierTaxID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSupplierCountry xsdt.String

//	Since TSupplierCountry is just a simple String type, this merely sets the current value from the specified string.
func (me *TSupplierCountry) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSupplierCountry is just a simple String type, this merely returns the current string value.
func (me TSupplierCountry) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSupplierCountry's alias type xsdt.String.
func (me TSupplierCountry) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_ struct {
	Country TSupplierCountry `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Country" json:"Country" bson:"Country"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_ instance.
func (me *XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSupplierAddressStructure struct {
	XsdGoPkgHasElem_PostalCode `bson:"inline"`
	XsdGoPkgHasElem_Region `bson:"inline"`
	XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_ `bson:"inline"`
	XsdGoPkgHasElem_BuildingNumber `bson:"inline"`
	XsdGoPkgHasElem_StreetName `bson:"inline"`
	XsdGoPkgHasElem_AddressDetail `bson:"inline"`
	XsdGoPkgHasElem_City `bson:"inline"`
}

//	If the WalkHandlers.TSupplierAddressStructure function is not nil (ie. was set by outside code), calls it with this TSupplierAddressStructure instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TSupplierAddressStructure instance.
func (me *TSupplierAddressStructure) Walk() (err error) {
	if fn := WalkHandlers.TSupplierAddressStructure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BuildingNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StreetName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AddressDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_City.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostalCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Region.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_ struct {
	ShipFromAddresses []*TSupplierAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipFromAddress" json:"ShipFromAddress" bson:"ShipFromAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_ instance.
func (me *XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ShipFromAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_ struct {
	BillingAddress *TSupplierAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 BillingAddress" json:"BillingAddress" bson:"BillingAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_ instance.
func (me *XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BillingAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSupplier struct {
	XsdGoPkgHasElem_AccountID `bson:"inline"`
	XsdGoPkgHasElem_Contact `bson:"inline"`
	XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_ `bson:"inline"`
	XsdGoPkgHasElem_Email `bson:"inline"`
	XsdGoPkgHasElem_Website `bson:"inline"`
	XsdGoPkgHasElem_SelfBillingIndicator `bson:"inline"`
	XsdGoPkgHasElem_SupplierID `bson:"inline"`
	XsdGoPkgHasElem_SupplierTaxID `bson:"inline"`
	XsdGoPkgHasElem_CompanyName `bson:"inline"`
	XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_ `bson:"inline"`
	XsdGoPkgHasElem_Telephone `bson:"inline"`
	XsdGoPkgHasElem_Fax `bson:"inline"`
}

//	If the WalkHandlers.TxsdSupplier function is not nil (ie. was set by outside code), calls it with this TxsdSupplier instance as the single argument. Then calls the Walk() method on 12/12 embed(s) and 0/0 field(s) belonging to this TxsdSupplier instance.
func (me *TxsdSupplier) Walk() (err error) {
	if fn := WalkHandlers.TxsdSupplier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AccountID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Website.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SupplierID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SupplierTaxID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompanyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Telephone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SelfBillingIndicator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Supplier struct {
	Suppliers []*TxsdSupplier `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Supplier" json:"Supplier" bson:"Supplier"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Supplier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Supplier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Supplier instance.
func (me *XsdGoPkgHasElems_Supplier) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Supplier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Suppliers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProductNumberCode struct {
	ProductNumberCode TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductNumberCode" json:"ProductNumberCode" bson:"ProductNumberCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductNumberCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductNumberCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductNumberCode instance.
func (me *XsdGoPkgHasElem_ProductNumberCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductNumberCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTCNCode xsdt.String

//	Since TSAFPTCNCode is just a simple String type, this merely returns the current string value.
func (me TSAFPTCNCode) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTCNCode's alias type xsdt.String.
func (me TSAFPTCNCode) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TSAFPTCNCode is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTCNCode) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElems_CNCode struct {
	CNCodes []TSAFPTCNCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CNCode" json:"CNCode" bson:"CNCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CNCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CNCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CNCode instance.
func (me *XsdGoPkgHasElems_CNCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CNCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTUNNumber xsdt.String

//	Since TSAFPTUNNumber is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTUNNumber) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTUNNumber is just a simple String type, this merely returns the current string value.
func (me TSAFPTUNNumber) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTUNNumber's alias type xsdt.String.
func (me TSAFPTUNNumber) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElems_UNNumber struct {
	UNNumbers []TSAFPTUNNumber `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 UNNumber" json:"UNNumber" bson:"UNNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UNNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UNNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UNNumber instance.
func (me *XsdGoPkgHasElems_UNNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UNNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCustomsDetails struct {
	XsdGoPkgHasElems_CNCode `bson:"inline"`
	XsdGoPkgHasElems_UNNumber `bson:"inline"`
}

//	If the WalkHandlers.TCustomsDetails function is not nil (ie. was set by outside code), calls it with this TCustomsDetails instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TCustomsDetails instance.
func (me *TCustomsDetails) Walk() (err error) {
	if fn := WalkHandlers.TCustomsDetails; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_CNCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_UNNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_ struct {
	CustomsDetails *TCustomsDetails `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CustomsDetails" json:"CustomsDetails" bson:"CustomsDetails"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_ instance.
func (me *XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CustomsDetails.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: P para Produtos, S para Servicos, O para Outros (Ex: portes debitados, adiantamentos recebidos ou alienacao de ativos), E para Impostos Especiais de Consumo (ex.:IABA, ISP, IT); I para impostos, taxas e encargos parafiscais exceto IVA e IS que deverao ser refletidos na tabela 2.5 Tabela de impostos (TaxTable)e Impostos Especiais de Consumo
type TxsdProductType xsdt.String

//	Since TxsdProductType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdProductType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdProductType is just a simple String type, this merely returns the current string value.
func (me TxsdProductType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdProductType's alias type xsdt.String.
func (me TxsdProductType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdProductType is "P".
func (me TxsdProductType) IsP() bool { return me.String() == "P" }

//	Returns true if the value of this enumerated TxsdProductType is "S".
func (me TxsdProductType) IsS() bool { return me.String() == "S" }

//	Returns true if the value of this enumerated TxsdProductType is "O".
func (me TxsdProductType) IsO() bool { return me.String() == "O" }

//	Returns true if the value of this enumerated TxsdProductType is "E".
func (me TxsdProductType) IsE() bool { return me.String() == "E" }

//	Returns true if the value of this enumerated TxsdProductType is "I".
func (me TxsdProductType) IsI() bool { return me.String() == "I" }

type XsdGoPkgHasElem_ProductType struct {
	//	Restricao: P para Produtos, S para Servicos, O para Outros (Ex: portes debitados, adiantamentos recebidos ou alienacao de ativos), E para Impostos Especiais de Consumo (ex.:IABA, ISP, IT); I para impostos, taxas e encargos parafiscais exceto IVA e IS que deverao ser refletidos na tabela 2.5 Tabela de impostos (TaxTable)e Impostos Especiais de Consumo
	ProductType TxsdProductType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductType" json:"ProductType" bson:"ProductType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductType instance.
func (me *XsdGoPkgHasElem_ProductType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProductCode struct {
	ProductCode string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductCode" json:"ProductCode" bson:"ProductCode"` // TSAFPTtextTypeMandatoryMax60Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductCode instance.
func (me *XsdGoPkgHasElem_ProductCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProductGroup struct {
	ProductGroup TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductGroup" json:"ProductGroup" bson:"ProductGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductGroup instance.
func (me *XsdGoPkgHasElem_ProductGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTProductDescription xsdt.String

//	Since TSAFPTProductDescription is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTProductDescription) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTProductDescription is just a simple String type, this merely returns the current string value.
func (me TSAFPTProductDescription) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTProductDescription's alias type xsdt.String.
func (me TSAFPTProductDescription) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_ProductDescription struct {
	ProductDescription TSAFPTProductDescription `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductDescription" json:"ProductDescription" bson:"ProductDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductDescription instance.
func (me *XsdGoPkgHasElem_ProductDescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProduct struct {
	XsdGoPkgHasElem_ProductType `bson:"inline"`
	XsdGoPkgHasElem_ProductCode `bson:"inline"`
	XsdGoPkgHasElem_ProductGroup `bson:"inline"`
	XsdGoPkgHasElem_ProductDescription `bson:"inline"`
	XsdGoPkgHasElem_ProductNumberCode `bson:"inline"`
	XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdProduct function is not nil (ie. was set by outside code), calls it with this TxsdProduct instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdProduct instance.
func (me *TxsdProduct) Walk() (err error) {
	if fn := WalkHandlers.TxsdProduct; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ProductNumberCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Product struct {
	Products []*TxsdProduct `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Product" json:"Product" bson:"Product"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Product function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Product instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Product instance.
func (me *XsdGoPkgHasElems_Product) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Product; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Products {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_ struct {
	Description TSAFPTtextTypeMandatoryMax255Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Description" json:"Description" bson:"Description"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_ instance.
func (me *XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFdateType xsdt.Date

//	Since TSAFdateType is just a simple String type, this merely returns the current string value.
func (me TSAFdateType) String() string { return xsdt.Date(me).String() }

//	This convenience method just performs a simple type conversion to TSAFdateType's alias type xsdt.Date.
func (me TSAFdateType) ToXsdtDate() xsdt.Date { return xsdt.Date(me) }

//	Since TSAFdateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFdateType) Set(s string) { (*xsdt.Date)(me).Set(s) }

type XsdGoPkgHasElem_TaxExpirationDate struct {
	TaxExpirationDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxExpirationDate" json:"TaxExpirationDate" bson:"TaxExpirationDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxExpirationDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxExpirationDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxExpirationDate instance.
func (me *XsdGoPkgHasElem_TaxExpirationDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxExpirationDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFdecimalType xsdt.Decimal

//	Since TSAFdecimalType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFdecimalType) Set(s string) { (*xsdt.Decimal)(me).Set(s) }

//	Since TSAFdecimalType is just a simple String type, this merely returns the current string value.
func (me TSAFdecimalType) String() string { return xsdt.Decimal(me).String() }

//	This convenience method just performs a simple type conversion to TSAFdecimalType's alias type xsdt.Decimal.
func (me TSAFdecimalType) ToXsdtDecimal() xsdt.Decimal { return xsdt.Decimal(me) }

type XsdGoPkgHasElem_TaxPercentage struct {
	TaxPercentage TSAFdecimalType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxPercentage" json:"TaxPercentage" bson:"TaxPercentage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxPercentage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxPercentage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxPercentage instance.
func (me *XsdGoPkgHasElem_TaxPercentage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxPercentage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxAmount struct {
	TaxAmount TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxAmount" json:"TaxAmount" bson:"TaxAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxAmount instance.
func (me *XsdGoPkgHasElem_TaxAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTaxType xsdt.String

//	Returns true if the value of this enumerated TxsdTaxType is "NS".
func (me TxsdTaxType) IsNs() bool { return me.String() == "NS" }

//	Since TxsdTaxType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTaxType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdTaxType is just a simple String type, this merely returns the current string value.
func (me TxsdTaxType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTaxType's alias type xsdt.String.
func (me TxsdTaxType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdTaxType is "IVA".
func (me TxsdTaxType) IsIva() bool { return me.String() == "IVA" }

//	Returns true if the value of this enumerated TxsdTaxType is "IS".
func (me TxsdTaxType) IsIs() bool { return me.String() == "IS" }

type XsdGoPkgHasElem_TaxType struct {
	TaxType TxsdTaxType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxType" json:"TaxType" bson:"TaxType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxType instance.
func (me *XsdGoPkgHasElem_TaxType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxCountryRegion struct {
	TaxCountryRegion TSAFPTProductDescription `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCountryRegion" json:"TaxCountryRegion" bson:"TaxCountryRegion"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxCountryRegion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxCountryRegion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxCountryRegion instance.
func (me *XsdGoPkgHasElem_TaxCountryRegion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxCountryRegion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TaxTableEntryTaxCode xsdt.String

//	Since TaxTableEntryTaxCode is just a simple String type, this merely sets the current value from the specified string.
func (me *TaxTableEntryTaxCode) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TaxTableEntryTaxCode is just a simple String type, this merely returns the current string value.
func (me TaxTableEntryTaxCode) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TaxTableEntryTaxCode's alias type xsdt.String.
func (me TaxTableEntryTaxCode) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_ struct {
	TaxCode TaxTableEntryTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCode" json:"TaxCode" bson:"TaxCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_ instance.
func (me *XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTaxTableEntry struct {
	XsdGoPkgHasElem_TaxExpirationDate `bson:"inline"`
	XsdGoPkgHasElem_TaxPercentage `bson:"inline"`
	XsdGoPkgHasElem_TaxAmount `bson:"inline"`
	XsdGoPkgHasElem_TaxType `bson:"inline"`
	XsdGoPkgHasElem_TaxCountryRegion `bson:"inline"`
	XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_ `bson:"inline"`
	XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdTaxTableEntry function is not nil (ie. was set by outside code), calls it with this TxsdTaxTableEntry instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdTaxTableEntry instance.
func (me *TxsdTaxTableEntry) Walk() (err error) {
	if fn := WalkHandlers.TxsdTaxTableEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxPercentage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxCountryRegion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxExpirationDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxTableEntry struct {
	TaxTableEntries []*TxsdTaxTableEntry `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxTableEntry" json:"TaxTableEntry" bson:"TaxTableEntry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxTableEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxTableEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxTableEntry instance.
func (me *XsdGoPkgHasElems_TaxTableEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxTableEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TaxTableEntries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTaxTable struct {
	XsdGoPkgHasElems_TaxTableEntry `bson:"inline"`
}

//	If the WalkHandlers.TxsdTaxTable function is not nil (ie. was set by outside code), calls it with this TxsdTaxTable instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdTaxTable instance.
func (me *TxsdTaxTable) Walk() (err error) {
	if fn := WalkHandlers.TxsdTaxTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_TaxTableEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxTable struct {
	TaxTable *TxsdTaxTable `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxTable" json:"TaxTable" bson:"TaxTable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxTable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxTable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaxTable instance.
func (me *XsdGoPkgHasElem_TaxTable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TaxTable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAuditFileSequenceMasterFiles struct {
	XsdGoPkgHasElems_Product `bson:"inline"`
	XsdGoPkgHasElem_TaxTable `bson:"inline"`
	XsdGoPkgHasElem_GeneralLedgerAccounts `bson:"inline"`
	XsdGoPkgHasElems_Customer `bson:"inline"`
	XsdGoPkgHasElems_Supplier `bson:"inline"`
}

//	If the WalkHandlers.TxsdAuditFileSequenceMasterFiles function is not nil (ie. was set by outside code), calls it with this TxsdAuditFileSequenceMasterFiles instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdAuditFileSequenceMasterFiles instance.
func (me *TxsdAuditFileSequenceMasterFiles) Walk() (err error) {
	if fn := WalkHandlers.TxsdAuditFileSequenceMasterFiles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxTable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GeneralLedgerAccounts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Customer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Supplier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Product.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_ struct {
	MasterFiles *TxsdAuditFileSequenceMasterFiles `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MasterFiles" json:"MasterFiles" bson:"MasterFiles"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_ instance.
func (me *XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MasterFiles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TotalDebit struct {
	TotalDebit TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TotalDebit" json:"TotalDebit" bson:"TotalDebit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalDebit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalDebit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalDebit instance.
func (me *XsdGoPkgHasElem_TotalDebit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalDebit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TotalCredit struct {
	TotalCredit TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TotalCredit" json:"TotalCredit" bson:"TotalCredit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalCredit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalCredit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalCredit instance.
func (me *XsdGoPkgHasElem_TotalCredit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalCredit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTJournalID xsdt.String

//	Since TSAFPTJournalID is just a simple String type, this merely returns the current string value.
func (me TSAFPTJournalID) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTJournalID's alias type xsdt.String.
func (me TSAFPTJournalID) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TSAFPTJournalID is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTJournalID) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElem_JournalID struct {
	JournalID TSAFPTJournalID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 JournalID" json:"JournalID" bson:"JournalID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JournalID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JournalID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_JournalID instance.
func (me *XsdGoPkgHasElem_JournalID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JournalID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Description struct {
	Description TSAFPTtextTypeMandatoryMax200Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Description" json:"Description" bson:"Description"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Description function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Description instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Description instance.
func (me *XsdGoPkgHasElem_Description) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Description; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTAccountingPeriod xsdt.Integer

//	Since TSAFPTAccountingPeriod is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TSAFPTAccountingPeriod) Set(s string) { (*xsdt.Integer)(me).Set(s) }

//	Returns a string representation of this TSAFPTAccountingPeriod's current non-string scalar value.
func (me TSAFPTAccountingPeriod) String() string { return xsdt.Integer(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTAccountingPeriod's alias type xsdt.Integer.
func (me TSAFPTAccountingPeriod) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

type XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_ struct {
	Period TSAFPTAccountingPeriod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Period" json:"Period" bson:"Period"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_ instance.
func (me *XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SourceID struct {
	SourceID TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceID" json:"SourceID" bson:"SourceID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourceID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourceID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SourceID instance.
func (me *XsdGoPkgHasElem_SourceID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SourceID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFTPTDocArchivalNumber xsdt.String

//	Since TSAFTPTDocArchivalNumber is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFTPTDocArchivalNumber) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFTPTDocArchivalNumber is just a simple String type, this merely returns the current string value.
func (me TSAFTPTDocArchivalNumber) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFTPTDocArchivalNumber's alias type xsdt.String.
func (me TSAFTPTDocArchivalNumber) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_DocArchivalNumber struct {
	DocArchivalNumber TSAFTPTDocArchivalNumber `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocArchivalNumber" json:"DocArchivalNumber" bson:"DocArchivalNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocArchivalNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocArchivalNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DocArchivalNumber instance.
func (me *XsdGoPkgHasElem_DocArchivalNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocArchivalNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecordID struct {
	RecordID TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 RecordID" json:"RecordID" bson:"RecordID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecordID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecordID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RecordID instance.
func (me *XsdGoPkgHasElem_RecordID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecordID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SourceDocumentID struct {
	SourceDocumentID TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceDocumentID" json:"SourceDocumentID" bson:"SourceDocumentID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourceDocumentID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourceDocumentID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SourceDocumentID instance.
func (me *XsdGoPkgHasElem_SourceDocumentID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SourceDocumentID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFdateTimeType xsdt.DateTime

//	Since TSAFdateTimeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFdateTimeType) Set(s string) { (*xsdt.DateTime)(me).Set(s) }

//	Since TSAFdateTimeType is just a simple String type, this merely returns the current string value.
func (me TSAFdateTimeType) String() string { return xsdt.DateTime(me).String() }

//	This convenience method just performs a simple type conversion to TSAFdateTimeType's alias type xsdt.DateTime.
func (me TSAFdateTimeType) ToXsdtDateTime() xsdt.DateTime { return xsdt.DateTime(me) }

type XsdGoPkgHasElem_SystemEntryDate struct {
	SystemEntryDate string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SystemEntryDate" json:"SystemEntryDate" bson:"SystemEntryDate"` // TSAFdateTimeType
}

//	If the WalkHandlers.XsdGoPkgHasElem_SystemEntryDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SystemEntryDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SystemEntryDate instance.
func (me *XsdGoPkgHasElem_SystemEntryDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SystemEntryDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_ struct {
	DebitAmount TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DebitAmount" json:"DebitAmount" bson:"DebitAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_ instance.
func (me *XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine struct {
	XsdGoPkgHasElem_RecordID `bson:"inline"`
	XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ `bson:"inline"`
	XsdGoPkgHasElem_SourceDocumentID `bson:"inline"`
	XsdGoPkgHasElem_SystemEntryDate `bson:"inline"`
	XsdGoPkgHasElem_Description `bson:"inline"`
	XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine function is not nil (ie. was set by outside code), calls it with this TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine instance.
func (me *TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RecordID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceDocumentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SystemEntryDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_ struct {
	DebitLine *TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DebitLine" json:"DebitLine" bson:"DebitLine"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_ instance.
func (me *XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DebitLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ struct {
	CreditAmount TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CreditAmount" json:"CreditAmount" bson:"CreditAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ instance.
func (me *XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine struct {
	XsdGoPkgHasElem_RecordID `bson:"inline"`
	XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ `bson:"inline"`
	XsdGoPkgHasElem_SourceDocumentID `bson:"inline"`
	XsdGoPkgHasElem_SystemEntryDate `bson:"inline"`
	XsdGoPkgHasElem_Description `bson:"inline"`
	XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine function is not nil (ie. was set by outside code), calls it with this TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine instance.
func (me *TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SourceDocumentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SystemEntryDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RecordID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_ struct {
	CreditLine *TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CreditLine" json:"CreditLine" bson:"CreditLine"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_ instance.
func (me *XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CreditLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines struct {
	XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_ `bson:"inline"`
	XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines function is not nil (ie. was set by outside code), calls it with this TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines instance.
func (me *TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_ struct {
	Lines *TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Lines" json:"Lines" bson:"Lines"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_ instance.
func (me *XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Lines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTTransactionID xsdt.String

//	Since TSAFPTTransactionID is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTTransactionID) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTTransactionID is just a simple String type, this merely returns the current string value.
func (me TSAFPTTransactionID) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTTransactionID's alias type xsdt.String.
func (me TSAFPTTransactionID) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_TransactionID struct {
	TransactionID TSAFPTTransactionID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TransactionID" json:"TransactionID" bson:"TransactionID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TransactionID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TransactionID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TransactionID instance.
func (me *XsdGoPkgHasElem_TransactionID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TransactionID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TransactionDate struct {
	TransactionDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TransactionDate" json:"TransactionDate" bson:"TransactionDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TransactionDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TransactionDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TransactionDate instance.
func (me *XsdGoPkgHasElem_TransactionDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TransactionDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: N para Normal, R para Regularizacoes do periodo de tributacao, A para Apuramento de resultados, J para Movimentos de ajustamento
type TxsdTransactionType xsdt.String

//	This convenience method just performs a simple type conversion to TxsdTransactionType's alias type xsdt.String.
func (me TxsdTransactionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdTransactionType is "N".
func (me TxsdTransactionType) IsN() bool { return me.String() == "N" }

//	Returns true if the value of this enumerated TxsdTransactionType is "R".
func (me TxsdTransactionType) IsR() bool { return me.String() == "R" }

//	Returns true if the value of this enumerated TxsdTransactionType is "A".
func (me TxsdTransactionType) IsA() bool { return me.String() == "A" }

//	Returns true if the value of this enumerated TxsdTransactionType is "J".
func (me TxsdTransactionType) IsJ() bool { return me.String() == "J" }

//	Since TxsdTransactionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTransactionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdTransactionType is just a simple String type, this merely returns the current string value.
func (me TxsdTransactionType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_TransactionType struct {
	//	Restricao: N para Normal, R para Regularizacoes do periodo de tributacao, A para Apuramento de resultados, J para Movimentos de ajustamento
	TransactionType TxsdTransactionType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TransactionType" json:"TransactionType" bson:"TransactionType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TransactionType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TransactionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TransactionType instance.
func (me *XsdGoPkgHasElem_TransactionType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TransactionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GLPostingDate struct {
	GLPostingDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GLPostingDate" json:"GLPostingDate" bson:"GLPostingDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GLPostingDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GLPostingDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GLPostingDate instance.
func (me *XsdGoPkgHasElem_GLPostingDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GLPostingDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction struct {
	XsdGoPkgHasElem_SupplierID `bson:"inline"`
	XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_ `bson:"inline"`
	XsdGoPkgHasElem_SourceID `bson:"inline"`
	XsdGoPkgHasElem_DocArchivalNumber `bson:"inline"`
	XsdGoPkgHasElem_CustomerID `bson:"inline"`
	XsdGoPkgHasElem_TransactionDate `bson:"inline"`
	XsdGoPkgHasElem_Description `bson:"inline"`
	XsdGoPkgHasElem_TransactionType `bson:"inline"`
	XsdGoPkgHasElem_GLPostingDate `bson:"inline"`
	XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_ `bson:"inline"`
	XsdGoPkgHasElem_TransactionID `bson:"inline"`
}

//	If the WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction function is not nil (ie. was set by outside code), calls it with this TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction instance as the single argument. Then calls the Walk() method on 11/11 embed(s) and 0/0 field(s) belonging to this TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction instance.
func (me *TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TransactionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GLPostingDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TransactionID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TransactionDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocArchivalNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomerID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SupplierID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_ struct {
	Transactions []*TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Transaction" json:"Transaction" bson:"Transaction"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_ instance.
func (me *XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transactions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGeneralLedgerEntriesSequenceJournal struct {
	XsdGoPkgHasElem_JournalID `bson:"inline"`
	XsdGoPkgHasElem_Description `bson:"inline"`
	XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournal function is not nil (ie. was set by outside code), calls it with this TxsdGeneralLedgerEntriesSequenceJournal instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGeneralLedgerEntriesSequenceJournal instance.
func (me *TxsdGeneralLedgerEntriesSequenceJournal) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeneralLedgerEntriesSequenceJournal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_JournalID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_ struct {
	Journals []*TxsdGeneralLedgerEntriesSequenceJournal `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Journal" json:"Journal" bson:"Journal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_ instance.
func (me *XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Journals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumberOfEntries struct {
	NumberOfEntries xsdt.NonNegativeInteger `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 NumberOfEntries" json:"NumberOfEntries" bson:"NumberOfEntries"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumberOfEntries function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumberOfEntries instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NumberOfEntries instance.
func (me *XsdGoPkgHasElem_NumberOfEntries) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumberOfEntries; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGeneralLedgerEntries struct {
	XsdGoPkgHasElem_NumberOfEntries `bson:"inline"`
	XsdGoPkgHasElem_TotalDebit `bson:"inline"`
	XsdGoPkgHasElem_TotalCredit `bson:"inline"`
	XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdGeneralLedgerEntries function is not nil (ie. was set by outside code), calls it with this TxsdGeneralLedgerEntries instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGeneralLedgerEntries instance.
func (me *TxsdGeneralLedgerEntries) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeneralLedgerEntries; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NumberOfEntries.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalDebit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalCredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GeneralLedgerEntries struct {
	GeneralLedgerEntries *TxsdGeneralLedgerEntries `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GeneralLedgerEntries" json:"GeneralLedgerEntries" bson:"GeneralLedgerEntries"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GeneralLedgerEntries function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GeneralLedgerEntries instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GeneralLedgerEntries instance.
func (me *XsdGoPkgHasElem_GeneralLedgerEntries) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GeneralLedgerEntries; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GeneralLedgerEntries.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InvoiceNo struct {
	InvoiceNo string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceNo" json:"InvoiceNo" bson:"InvoiceNo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InvoiceNo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InvoiceNo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InvoiceNo instance.
func (me *XsdGoPkgHasElem_InvoiceNo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InvoiceNo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Period struct {
	Period TSAFPTAccountingPeriod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Period" json:"Period" bson:"Period"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Period function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Period instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Period instance.
func (me *XsdGoPkgHasElem_Period) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Period; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WarehouseID struct {
	WarehouseIDs []TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WarehouseID" json:"WarehouseID" bson:"WarehouseID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WarehouseID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WarehouseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WarehouseID instance.
func (me *XsdGoPkgHasElems_WarehouseID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WarehouseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LocationID struct {
	LocationIDs []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 LocationID" json:"LocationID" bson:"LocationID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LocationID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LocationID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LocationID instance.
func (me *XsdGoPkgHasElems_LocationID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LocationID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DeliveryID struct {
	DeliveryIDs []TSAFPTtextTypeMandatoryMax255Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DeliveryID" json:"DeliveryID" bson:"DeliveryID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DeliveryID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DeliveryID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DeliveryID instance.
func (me *XsdGoPkgHasElems_DeliveryID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DeliveryID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DeliveryDate struct {
	DeliveryDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DeliveryDate" json:"DeliveryDate" bson:"DeliveryDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DeliveryDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DeliveryDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DeliveryDate instance.
func (me *XsdGoPkgHasElem_DeliveryDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DeliveryDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Address struct {
	Address *TAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Address" json:"Address" bson:"Address"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Address instance.
func (me *XsdGoPkgHasElem_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TShippingPointStructure struct {
	XsdGoPkgHasElems_DeliveryID `bson:"inline"`
	XsdGoPkgHasElem_DeliveryDate `bson:"inline"`
	XsdGoPkgHasElem_Address `bson:"inline"`
	XsdGoPkgHasElems_WarehouseID `bson:"inline"`
	XsdGoPkgHasElems_LocationID `bson:"inline"`
}

//	If the WalkHandlers.TShippingPointStructure function is not nil (ie. was set by outside code), calls it with this TShippingPointStructure instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TShippingPointStructure instance.
func (me *TShippingPointStructure) Walk() (err error) {
	if fn := WalkHandlers.TShippingPointStructure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LocationID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DeliveryID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DeliveryDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WarehouseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ShipTo struct {
	ShipTo *TShippingPointStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipTo" json:"ShipTo" bson:"ShipTo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ShipTo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ShipTo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ShipTo instance.
func (me *XsdGoPkgHasElem_ShipTo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ShipTo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShipTo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Atcud struct {
	Atcud TSAFPTtextTypeMandatoryMax100Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ATCUD" json:"ATCUD" bson:"ATCUD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Atcud function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Atcud instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Atcud instance.
func (me *XsdGoPkgHasElem_Atcud) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Atcud; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax172Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax172Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax172Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax172Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax172Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax172Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax172Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_Hash struct {
	Hash TSAFPTtextTypeMandatoryMax172Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Hash" json:"Hash" bson:"Hash"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Hash function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Hash instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Hash instance.
func (me *XsdGoPkgHasElem_Hash) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Hash; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTHashControl xsdt.String

//	Since TSAFPTHashControl is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTHashControl) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTHashControl is just a simple String type, this merely returns the current string value.
func (me TSAFPTHashControl) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTHashControl's alias type xsdt.String.
func (me TSAFPTHashControl) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_HashControl struct {
	HashControl TSAFPTHashControl `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 HashControl" json:"HashControl" bson:"HashControl"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HashControl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HashControl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HashControl instance.
func (me *XsdGoPkgHasElem_HashControl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HashControl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao:FT para Fatura, emitida nos termos do artigo 36. do Codigo do IVA, FS para Fatura simplificada, emitida nos termos do artigo 40. do Codigo do IVA, FR para Fatura-recibo, ND para Nota de debito, NC para Nota de credito, VD para Venda a dinheiro e factura/recibo (a), TV para Talao de venda (a), TD para Talao de devolucao (a), AA para Alienacao de ativos (a), DA para Devolucao de  ativos (a). Para o setor Segurador, ainda pode ser preenchido com: RP para Premio ou recibo de premio, RE para Estorno ou recibo de estorno, CS para Imputacao a co-seguradoras, LD para Imputacao a co-seguradora lider, RA para Resseguro aceite. (a) Para os dados ate 2012-12-31
type TxsdInvoiceType xsdt.String

//	Since TxsdInvoiceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdInvoiceType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdInvoiceType is "ND".
func (me TxsdInvoiceType) IsNd() bool { return me.String() == "ND" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "CS".
func (me TxsdInvoiceType) IsCs() bool { return me.String() == "CS" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "LD".
func (me TxsdInvoiceType) IsLd() bool { return me.String() == "LD" }

//	Since TxsdInvoiceType is just a simple String type, this merely returns the current string value.
func (me TxsdInvoiceType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdInvoiceType is "FT".
func (me TxsdInvoiceType) IsFt() bool { return me.String() == "FT" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "VD".
func (me TxsdInvoiceType) IsVd() bool { return me.String() == "VD" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "RP".
func (me TxsdInvoiceType) IsRp() bool { return me.String() == "RP" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "RE".
func (me TxsdInvoiceType) IsRe() bool { return me.String() == "RE" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "NC".
func (me TxsdInvoiceType) IsNc() bool { return me.String() == "NC" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "TV".
func (me TxsdInvoiceType) IsTv() bool { return me.String() == "TV" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "TD".
func (me TxsdInvoiceType) IsTd() bool { return me.String() == "TD" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "DA".
func (me TxsdInvoiceType) IsDa() bool { return me.String() == "DA" }

//	This convenience method just performs a simple type conversion to TxsdInvoiceType's alias type xsdt.String.
func (me TxsdInvoiceType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdInvoiceType is "FS".
func (me TxsdInvoiceType) IsFs() bool { return me.String() == "FS" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "FR".
func (me TxsdInvoiceType) IsFr() bool { return me.String() == "FR" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "AA".
func (me TxsdInvoiceType) IsAa() bool { return me.String() == "AA" }

//	Returns true if the value of this enumerated TxsdInvoiceType is "RA".
func (me TxsdInvoiceType) IsRa() bool { return me.String() == "RA" }

type XsdGoPkgHasElem_InvoiceType struct {
	//	Restricao:FT para Fatura, emitida nos termos do artigo 36. do Codigo do IVA, FS para Fatura simplificada, emitida nos termos do artigo 40. do Codigo do IVA, FR para Fatura-recibo, ND para Nota de debito, NC para Nota de credito, VD para Venda a dinheiro e factura/recibo (a), TV para Talao de venda (a), TD para Talao de devolucao (a), AA para Alienacao de ativos (a), DA para Devolucao de  ativos (a). Para o setor Segurador, ainda pode ser preenchido com: RP para Premio ou recibo de premio, RE para Estorno ou recibo de estorno, CS para Imputacao a co-seguradoras, LD para Imputacao a co-seguradora lider, RA para Resseguro aceite. (a) Para os dados ate 2012-12-31
	InvoiceType TxsdInvoiceType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceType" json:"InvoiceType" bson:"InvoiceType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InvoiceType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InvoiceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InvoiceType instance.
func (me *XsdGoPkgHasElem_InvoiceType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InvoiceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	P para documento produzido na aplicacao, I para documento integrado e produzido noutra aplicacao, M para documento proveniente de recuperacao ou de emissao manual
type TSAFTPTSourceBilling xsdt.String

//	Since TSAFTPTSourceBilling is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFTPTSourceBilling) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFTPTSourceBilling is just a simple String type, this merely returns the current string value.
func (me TSAFTPTSourceBilling) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFTPTSourceBilling's alias type xsdt.String.
func (me TSAFTPTSourceBilling) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TSAFTPTSourceBilling is "P".
func (me TSAFTPTSourceBilling) IsP() bool { return me.String() == "P" }

//	Returns true if the value of this enumerated TSAFTPTSourceBilling is "I".
func (me TSAFTPTSourceBilling) IsI() bool { return me.String() == "I" }

//	Returns true if the value of this enumerated TSAFTPTSourceBilling is "M".
func (me TSAFTPTSourceBilling) IsM() bool { return me.String() == "M" }

type XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ struct {
	SourceBilling TSAFTPTSourceBilling `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceBilling" json:"SourceBilling" bson:"SourceBilling"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ instance.
func (me *XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	N para Normal, S para Autofaturacao, A para Documento anulado, R para Documento de resumo doutros documentos criados noutras aplicacoes e gerado nesta aplicacao, F para Documento faturado
type TxsdInvoiceStatus xsdt.String

//	Since TxsdInvoiceStatus is just a simple String type, this merely returns the current string value.
func (me TxsdInvoiceStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdInvoiceStatus's alias type xsdt.String.
func (me TxsdInvoiceStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdInvoiceStatus is "N".
func (me TxsdInvoiceStatus) IsN() bool { return me.String() == "N" }

//	Returns true if the value of this enumerated TxsdInvoiceStatus is "S".
func (me TxsdInvoiceStatus) IsS() bool { return me.String() == "S" }

//	Returns true if the value of this enumerated TxsdInvoiceStatus is "A".
func (me TxsdInvoiceStatus) IsA() bool { return me.String() == "A" }

//	Returns true if the value of this enumerated TxsdInvoiceStatus is "R".
func (me TxsdInvoiceStatus) IsR() bool { return me.String() == "R" }

//	Returns true if the value of this enumerated TxsdInvoiceStatus is "F".
func (me TxsdInvoiceStatus) IsF() bool { return me.String() == "F" }

//	Since TxsdInvoiceStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdInvoiceStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElem_InvoiceStatus struct {
	//	N para Normal, S para Autofaturacao, A para Documento anulado, R para Documento de resumo doutros documentos criados noutras aplicacoes e gerado nesta aplicacao, F para Documento faturado
	InvoiceStatus TxsdInvoiceStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceStatus" json:"InvoiceStatus" bson:"InvoiceStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InvoiceStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InvoiceStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InvoiceStatus instance.
func (me *XsdGoPkgHasElem_InvoiceStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InvoiceStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InvoiceStatusDate struct {
	InvoiceStatusDate TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceStatusDate" json:"InvoiceStatusDate" bson:"InvoiceStatusDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InvoiceStatusDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InvoiceStatusDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InvoiceStatusDate instance.
func (me *XsdGoPkgHasElem_InvoiceStatusDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InvoiceStatusDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Reason struct {
	Reason TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Reason" json:"Reason" bson:"Reason"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Reason function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reason instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Reason instance.
func (me *XsdGoPkgHasElem_Reason) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Reason; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus struct {
	XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ `bson:"inline"`
	XsdGoPkgHasElem_InvoiceStatus `bson:"inline"`
	XsdGoPkgHasElem_InvoiceStatusDate `bson:"inline"`
	XsdGoPkgHasElem_Reason `bson:"inline"`
	XsdGoPkgHasElem_SourceID `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus instance.
func (me *TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InvoiceStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InvoiceStatusDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Reason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_ struct {
	DocumentStatus *TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentStatus" json:"DocumentStatus" bson:"DocumentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_ instance.
func (me *XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocumentStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InvoiceDate struct {
	InvoiceDate string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceDate" json:"InvoiceDate" bson:"InvoiceDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InvoiceDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InvoiceDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InvoiceDate instance.
func (me *XsdGoPkgHasElem_InvoiceDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InvoiceDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CashVATSchemeIndicator struct {
	CashVATSchemeIndicator TSAFPTAccountingPeriod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CashVATSchemeIndicator" json:"CashVATSchemeIndicator" bson:"CashVATSchemeIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CashVATSchemeIndicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CashVATSchemeIndicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CashVATSchemeIndicator instance.
func (me *XsdGoPkgHasElem_CashVATSchemeIndicator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CashVATSchemeIndicator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ThirdPartiesBillingIndicator struct {
	ThirdPartiesBillingIndicator TSAFPTAccountingPeriod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ThirdPartiesBillingIndicator" json:"ThirdPartiesBillingIndicator" bson:"ThirdPartiesBillingIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ThirdPartiesBillingIndicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ThirdPartiesBillingIndicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ThirdPartiesBillingIndicator instance.
func (me *XsdGoPkgHasElem_ThirdPartiesBillingIndicator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ThirdPartiesBillingIndicator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSpecialRegimes struct {
	XsdGoPkgHasElem_SelfBillingIndicator `bson:"inline"`
	XsdGoPkgHasElem_CashVATSchemeIndicator `bson:"inline"`
	XsdGoPkgHasElem_ThirdPartiesBillingIndicator `bson:"inline"`
}

//	If the WalkHandlers.TSpecialRegimes function is not nil (ie. was set by outside code), calls it with this TSpecialRegimes instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TSpecialRegimes instance.
func (me *TSpecialRegimes) Walk() (err error) {
	if fn := WalkHandlers.TSpecialRegimes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ThirdPartiesBillingIndicator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SelfBillingIndicator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CashVATSchemeIndicator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_ struct {
	SpecialRegimes *TSpecialRegimes `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SpecialRegimes" json:"SpecialRegimes" bson:"SpecialRegimes"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_ instance.
func (me *XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SpecialRegimes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ShipFrom struct {
	ShipFrom *TShippingPointStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipFrom" json:"ShipFrom" bson:"ShipFrom"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ShipFrom function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ShipFrom instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ShipFrom instance.
func (me *XsdGoPkgHasElem_ShipFrom) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ShipFrom; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShipFrom.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LineNumber struct {
	LineNumber xsdt.NonNegativeInteger `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 LineNumber" json:"LineNumber" bson:"LineNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LineNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LineNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LineNumber instance.
func (me *XsdGoPkgHasElem_LineNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LineNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrderDate struct {
	OrderDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OrderDate" json:"OrderDate" bson:"OrderDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderDate instance.
func (me *XsdGoPkgHasElem_OrderDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OriginatingON struct {
	OriginatingON TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OriginatingON" json:"OriginatingON" bson:"OriginatingON"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OriginatingON function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OriginatingON instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OriginatingON instance.
func (me *XsdGoPkgHasElem_OriginatingON) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OriginatingON; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TOrderReferences struct {
	XsdGoPkgHasElem_OrderDate `bson:"inline"`
	XsdGoPkgHasElem_OriginatingON `bson:"inline"`
}

//	If the WalkHandlers.TOrderReferences function is not nil (ie. was set by outside code), calls it with this TOrderReferences instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TOrderReferences instance.
func (me *TOrderReferences) Walk() (err error) {
	if fn := WalkHandlers.TOrderReferences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OriginatingON.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OrderDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_ struct {
	OrderReferenceses []*TOrderReferences `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OrderReferences" json:"OrderReferences" bson:"OrderReferences"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_ instance.
func (me *XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrderReferenceses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Quantity struct {
	Quantity float32 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Quantity" json:"Quantity" bson:"Quantity"` // TSAFdecimalType
}

//	If the WalkHandlers.XsdGoPkgHasElem_Quantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Quantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Quantity instance.
func (me *XsdGoPkgHasElem_Quantity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Quantity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SerialNumber struct {
	SerialNumbers []TSAFPTtextTypeMandatoryMax100Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SerialNumber" json:"SerialNumber" bson:"SerialNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SerialNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SerialNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SerialNumber instance.
func (me *XsdGoPkgHasElems_SerialNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SerialNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TProductSerialNumber struct {
	XsdGoPkgHasElems_SerialNumber `bson:"inline"`
}

//	If the WalkHandlers.TProductSerialNumber function is not nil (ie. was set by outside code), calls it with this TProductSerialNumber instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TProductSerialNumber instance.
func (me *TProductSerialNumber) Walk() (err error) {
	if fn := WalkHandlers.TProductSerialNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SerialNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ struct {
	ProductSerialNumber *TProductSerialNumber `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductSerialNumber" json:"ProductSerialNumber" bson:"ProductSerialNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ instance.
func (me *XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProductSerialNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SettlementAmount struct {
	SettlementAmount TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SettlementAmount" json:"SettlementAmount" bson:"SettlementAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SettlementAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SettlementAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SettlementAmount instance.
func (me *XsdGoPkgHasElem_SettlementAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SettlementAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UnitOfMeasure struct {
	UnitOfMeasure string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 UnitOfMeasure" json:"UnitOfMeasure" bson:"UnitOfMeasure"` // TSAFPTtextTypeMandatoryMax20Car
}

//	If the WalkHandlers.XsdGoPkgHasElem_UnitOfMeasure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnitOfMeasure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UnitOfMeasure instance.
func (me *XsdGoPkgHasElem_UnitOfMeasure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UnitOfMeasure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxBase struct {
	TaxBase TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxBase" json:"TaxBase" bson:"TaxBase"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxBase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxBase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxBase instance.
func (me *XsdGoPkgHasElem_TaxBase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxBase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxCode struct {
	TaxCode TSAFPTHashControl `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCode" json:"TaxCode" bson:"TaxCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxCode instance.
func (me *XsdGoPkgHasElem_TaxCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tax struct {
	XsdGoPkgHasElem_TaxCode `bson:"inline"`
	XsdGoPkgHasElem_TaxPercentage `bson:"inline"`
	XsdGoPkgHasElem_TaxAmount `bson:"inline"`
	XsdGoPkgHasElem_TaxType `bson:"inline"`
	XsdGoPkgHasElem_TaxCountryRegion `bson:"inline"`
}

//	If the WalkHandlers.Tax function is not nil (ie. was set by outside code), calls it with this Tax instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this Tax instance.
func (me *Tax) Walk() (err error) {
	if fn := WalkHandlers.Tax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxPercentage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxCountryRegion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_ struct {
	Tax *Tax `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Tax" json:"Tax" bson:"Tax"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_ instance.
func (me *XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax21Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax21Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax21Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax21Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax21Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax21Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax21Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElems_ARCNo struct {
	ARCNos []TSAFPTtextTypeMandatoryMax21Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ARCNo" json:"ARCNo" bson:"ARCNo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ARCNo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ARCNo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ARCNo instance.
func (me *XsdGoPkgHasElems_ARCNo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ARCNo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IECAmount struct {
	IECAmount TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 IECAmount" json:"IECAmount" bson:"IECAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IECAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IECAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IECAmount instance.
func (me *XsdGoPkgHasElem_IECAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IECAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCustomsInformation struct {
	XsdGoPkgHasElems_ARCNo `bson:"inline"`
	XsdGoPkgHasElem_IECAmount `bson:"inline"`
}

//	If the WalkHandlers.TCustomsInformation function is not nil (ie. was set by outside code), calls it with this TCustomsInformation instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TCustomsInformation instance.
func (me *TCustomsInformation) Walk() (err error) {
	if fn := WalkHandlers.TCustomsInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ARCNo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IECAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_ struct {
	CustomsInformation *TCustomsInformation `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CustomsInformation" json:"CustomsInformation" bson:"CustomsInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_ instance.
func (me *XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CustomsInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UnitPrice struct {
	UnitPrice TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 UnitPrice" json:"UnitPrice" bson:"UnitPrice"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UnitPrice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnitPrice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UnitPrice instance.
func (me *XsdGoPkgHasElem_UnitPrice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UnitPrice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxPointDate struct {
	TaxPointDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxPointDate" json:"TaxPointDate" bson:"TaxPointDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxPointDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxPointDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxPointDate instance.
func (me *XsdGoPkgHasElem_TaxPointDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxPointDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTPortugueseTaxExemptionReason xsdt.String

//	Since TSAFPTPortugueseTaxExemptionReason is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTPortugueseTaxExemptionReason) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTPortugueseTaxExemptionReason is just a simple String type, this merely returns the current string value.
func (me TSAFPTPortugueseTaxExemptionReason) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTPortugueseTaxExemptionReason's alias type xsdt.String.
func (me TSAFPTPortugueseTaxExemptionReason) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_TaxExemptionReason struct {
	TaxExemptionReason TSAFPTPortugueseTaxExemptionReason `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxExemptionReason" json:"TaxExemptionReason" bson:"TaxExemptionReason"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxExemptionReason function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxExemptionReason instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxExemptionReason instance.
func (me *XsdGoPkgHasElem_TaxExemptionReason) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxExemptionReason; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Reference struct {
	Reference TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Reference" json:"Reference" bson:"Reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Reference instance.
func (me *XsdGoPkgHasElem_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReferences struct {
	XsdGoPkgHasElem_Reference `bson:"inline"`
	XsdGoPkgHasElem_Reason `bson:"inline"`
}

//	If the WalkHandlers.TReferences function is not nil (ie. was set by outside code), calls it with this TReferences instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TReferences instance.
func (me *TReferences) Walk() (err error) {
	if fn := WalkHandlers.TReferences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Reason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_ struct {
	Referenceses []*TReferences `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 References" json:"References" bson:"References"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_ instance.
func (me *XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Referenceses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTPortugueseTaxExemptionCode xsdt.String

//	Since TSAFPTPortugueseTaxExemptionCode is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTPortugueseTaxExemptionCode) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTPortugueseTaxExemptionCode is just a simple String type, this merely returns the current string value.
func (me TSAFPTPortugueseTaxExemptionCode) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTPortugueseTaxExemptionCode's alias type xsdt.String.
func (me TSAFPTPortugueseTaxExemptionCode) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_TaxExemptionCode struct {
	TaxExemptionCode TSAFPTPortugueseTaxExemptionCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxExemptionCode" json:"TaxExemptionCode" bson:"TaxExemptionCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxExemptionCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxExemptionCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxExemptionCode instance.
func (me *XsdGoPkgHasElem_TaxExemptionCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxExemptionCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine struct {
	XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_ `bson:"inline"`
	XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ `bson:"inline"`
	XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_ `bson:"inline"`
	XsdGoPkgHasElem_Description `bson:"inline"`
	XsdGoPkgHasElem_TaxExemptionCode `bson:"inline"`
	XsdGoPkgHasElem_LineNumber `bson:"inline"`
	XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_ `bson:"inline"`
	XsdGoPkgHasElem_Quantity `bson:"inline"`
	XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ `bson:"inline"`
	XsdGoPkgHasElem_SettlementAmount `bson:"inline"`
	XsdGoPkgHasElem_ProductCode `bson:"inline"`
	XsdGoPkgHasElem_UnitOfMeasure `bson:"inline"`
	XsdGoPkgHasElem_TaxBase `bson:"inline"`
	XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_ `bson:"inline"`
	XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_ `bson:"inline"`
	XsdGoPkgHasElem_ProductDescription `bson:"inline"`
	XsdGoPkgHasElem_UnitPrice `bson:"inline"`
	XsdGoPkgHasElem_TaxPointDate `bson:"inline"`
	XsdGoPkgHasElem_TaxExemptionReason `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine instance as the single argument. Then calls the Walk() method on 19/19 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine instance.
func (me *TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxExemptionCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SettlementAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LineNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Quantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UnitOfMeasure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxBase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxExemptionReason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UnitPrice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxPointDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_ struct {
	Lines []*TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Line" json:"Line" bson:"Line"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_ instance.
func (me *XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_ struct {
	SettlementDiscount TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SettlementDiscount" json:"SettlementDiscount" bson:"SettlementDiscount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_ instance.
func (me *XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_ struct {
	SettlementDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SettlementDate" json:"SettlementDate" bson:"SettlementDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_ instance.
func (me *XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_ struct {
	PaymentTerms TSAFPTtextTypeMandatoryMax100Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentTerms" json:"PaymentTerms" bson:"PaymentTerms"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_ instance.
func (me *XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSettlement struct {
	XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_ `bson:"inline"`
	XsdGoPkgHasElem_SettlementAmount `bson:"inline"`
	XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_ `bson:"inline"`
	XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_ `bson:"inline"`
}

//	If the WalkHandlers.TSettlement function is not nil (ie. was set by outside code), calls it with this TSettlement instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TSettlement instance.
func (me *TSettlement) Walk() (err error) {
	if fn := WalkHandlers.TSettlement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SettlementAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_ struct {
	Settlements []*TSettlement `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Settlement" json:"Settlement" bson:"Settlement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_ instance.
func (me *XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Settlements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao:CC para Cartao credito, CD para Cartao debito, CH para Cheque bancario, CI para credito documentario internacional, CO para Cheque ou cartao oferta, CS para Compensacao de saldos em conta corrente, DE para Dinheiro eletronico, por exemplo em cartoes de fidelidade ou de pontos, LC para Letra comercial, MB para Referencias de pagamento para Multibanco, NU para Numerario, OU para Outros meios aqui nao assinalados, PR para Permuta de bens, TB para Transferencia bancaria ou debito direto autorizado, TR para titulos de compensacao extrassalarial independentemente do seu suporte, por exemplo, titulos de refeicao, educacao, etc.
type TxsdPaymentMechanism xsdt.String

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "PR".
func (me TxsdPaymentMechanism) IsPr() bool { return me.String() == "PR" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "TR".
func (me TxsdPaymentMechanism) IsTr() bool { return me.String() == "TR" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "CD".
func (me TxsdPaymentMechanism) IsCd() bool { return me.String() == "CD" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "CI".
func (me TxsdPaymentMechanism) IsCi() bool { return me.String() == "CI" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "DE".
func (me TxsdPaymentMechanism) IsDe() bool { return me.String() == "DE" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "MB".
func (me TxsdPaymentMechanism) IsMb() bool { return me.String() == "MB" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "LC".
func (me TxsdPaymentMechanism) IsLc() bool { return me.String() == "LC" }

//	Since TxsdPaymentMechanism is just a simple String type, this merely returns the current string value.
func (me TxsdPaymentMechanism) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "CH".
func (me TxsdPaymentMechanism) IsCh() bool { return me.String() == "CH" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "CS".
func (me TxsdPaymentMechanism) IsCs() bool { return me.String() == "CS" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "NU".
func (me TxsdPaymentMechanism) IsNu() bool { return me.String() == "NU" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "OU".
func (me TxsdPaymentMechanism) IsOu() bool { return me.String() == "OU" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "TB".
func (me TxsdPaymentMechanism) IsTb() bool { return me.String() == "TB" }

//	Since TxsdPaymentMechanism is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPaymentMechanism) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TxsdPaymentMechanism's alias type xsdt.String.
func (me TxsdPaymentMechanism) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "CC".
func (me TxsdPaymentMechanism) IsCc() bool { return me.String() == "CC" }

//	Returns true if the value of this enumerated TxsdPaymentMechanism is "CO".
func (me TxsdPaymentMechanism) IsCo() bool { return me.String() == "CO" }

type XsdGoPkgHasElem_PaymentMechanism struct {
	//	Restricao:CC para Cartao credito, CD para Cartao debito, CH para Cheque bancario, CI para credito documentario internacional, CO para Cheque ou cartao oferta, CS para Compensacao de saldos em conta corrente, DE para Dinheiro eletronico, por exemplo em cartoes de fidelidade ou de pontos, LC para Letra comercial, MB para Referencias de pagamento para Multibanco, NU para Numerario, OU para Outros meios aqui nao assinalados, PR para Permuta de bens, TB para Transferencia bancaria ou debito direto autorizado, TR para titulos de compensacao extrassalarial independentemente do seu suporte, por exemplo, titulos de refeicao, educacao, etc.
	PaymentMechanism TxsdPaymentMechanism `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentMechanism" json:"PaymentMechanism" bson:"PaymentMechanism"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentMechanism function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentMechanism instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentMechanism instance.
func (me *XsdGoPkgHasElem_PaymentMechanism) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentMechanism; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_ struct {
	PaymentAmount TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentAmount" json:"PaymentAmount" bson:"PaymentAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_ instance.
func (me *XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_ struct {
	PaymentDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentDate" json:"PaymentDate" bson:"PaymentDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_ instance.
func (me *XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPaymentMethod struct {
	XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_ `bson:"inline"`
	XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_ `bson:"inline"`
	XsdGoPkgHasElem_PaymentMechanism `bson:"inline"`
}

//	If the WalkHandlers.TPaymentMethod function is not nil (ie. was set by outside code), calls it with this TPaymentMethod instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TPaymentMethod instance.
func (me *TPaymentMethod) Walk() (err error) {
	if fn := WalkHandlers.TPaymentMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PaymentMechanism.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_ struct {
	Payments []*TPaymentMethod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Payment" json:"Payment" bson:"Payment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_ instance.
func (me *XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Payments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxPayable struct {
	TaxPayable float64 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxPayable" json:"TaxPayable" bson:"TaxPayable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxPayable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxPayable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxPayable instance.
func (me *XsdGoPkgHasElem_TaxPayable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxPayable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NetTotal struct {
	NetTotal float64 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 NetTotal" json:"NetTotal" bson:"NetTotal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NetTotal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NetTotal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NetTotal instance.
func (me *XsdGoPkgHasElem_NetTotal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NetTotal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrossTotal struct {
	GrossTotal float64 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GrossTotal" json:"GrossTotal" bson:"GrossTotal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrossTotal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrossTotal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GrossTotal instance.
func (me *XsdGoPkgHasElem_GrossTotal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrossTotal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CurrencyAmount struct {
	CurrencyAmount TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CurrencyAmount" json:"CurrencyAmount" bson:"CurrencyAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CurrencyAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CurrencyAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CurrencyAmount instance.
func (me *XsdGoPkgHasElem_CurrencyAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CurrencyAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExchangeRate struct {
	ExchangeRate TSAFdecimalType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ExchangeRate" json:"ExchangeRate" bson:"ExchangeRate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExchangeRate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExchangeRate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExchangeRate instance.
func (me *XsdGoPkgHasElem_ExchangeRate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExchangeRate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CurrencyCode struct {
	CurrencyCode TSAFPTPortugueseTaxExemptionCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CurrencyCode" json:"CurrencyCode" bson:"CurrencyCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CurrencyCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CurrencyCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CurrencyCode instance.
func (me *XsdGoPkgHasElem_CurrencyCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CurrencyCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCurrency struct {
	XsdGoPkgHasElem_ExchangeRate `bson:"inline"`
	XsdGoPkgHasElem_CurrencyCode `bson:"inline"`
	XsdGoPkgHasElem_CurrencyAmount `bson:"inline"`
}

//	If the WalkHandlers.TCurrency function is not nil (ie. was set by outside code), calls it with this TCurrency instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TCurrency instance.
func (me *TCurrency) Walk() (err error) {
	if fn := WalkHandlers.TCurrency; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ExchangeRate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CurrencyCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CurrencyAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ struct {
	Currency *TCurrency `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Currency" json:"Currency" bson:"Currency"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ instance.
func (me *XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Currency.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals struct {
	XsdGoPkgHasElem_NetTotal `bson:"inline"`
	XsdGoPkgHasElem_GrossTotal `bson:"inline"`
	XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ `bson:"inline"`
	XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_ `bson:"inline"`
	XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_ `bson:"inline"`
	XsdGoPkgHasElem_TaxPayable `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals instance.
func (me *TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxPayable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NetTotal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrossTotal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_ struct {
	DocumentTotals *TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentTotals" json:"DocumentTotals" bson:"DocumentTotals"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_ instance.
func (me *XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocumentTotals.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_ struct {
	WithholdingTaxAmount TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WithholdingTaxAmount" json:"WithholdingTaxAmount" bson:"WithholdingTaxAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_ instance.
func (me *XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: IRS para Imposto Sobre o Rendimento das Pessoas Singulares, IRC para Imposto Sobre o Rendimento das Pessoas colectivas, IS para Imposto do selo
type TxsdWithholdingTaxType xsdt.String

//	Since TxsdWithholdingTaxType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdWithholdingTaxType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdWithholdingTaxType is just a simple String type, this merely returns the current string value.
func (me TxsdWithholdingTaxType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdWithholdingTaxType's alias type xsdt.String.
func (me TxsdWithholdingTaxType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdWithholdingTaxType is "IRS".
func (me TxsdWithholdingTaxType) IsIrs() bool { return me.String() == "IRS" }

//	Returns true if the value of this enumerated TxsdWithholdingTaxType is "IRC".
func (me TxsdWithholdingTaxType) IsIrc() bool { return me.String() == "IRC" }

//	Returns true if the value of this enumerated TxsdWithholdingTaxType is "IS".
func (me TxsdWithholdingTaxType) IsIs() bool { return me.String() == "IS" }

type XsdGoPkgHasElem_WithholdingTaxType struct {
	//	Restricao: IRS para Imposto Sobre o Rendimento das Pessoas Singulares, IRC para Imposto Sobre o Rendimento das Pessoas colectivas, IS para Imposto do selo
	WithholdingTaxType TxsdWithholdingTaxType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WithholdingTaxType" json:"WithholdingTaxType" bson:"WithholdingTaxType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WithholdingTaxType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WithholdingTaxType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WithholdingTaxType instance.
func (me *XsdGoPkgHasElem_WithholdingTaxType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WithholdingTaxType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_ struct {
	WithholdingTaxDescription TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WithholdingTaxDescription" json:"WithholdingTaxDescription" bson:"WithholdingTaxDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_ instance.
func (me *XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TWithholdingTax struct {
	XsdGoPkgHasElem_WithholdingTaxType `bson:"inline"`
	XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_ `bson:"inline"`
	XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_ `bson:"inline"`
}

//	If the WalkHandlers.TWithholdingTax function is not nil (ie. was set by outside code), calls it with this TWithholdingTax instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TWithholdingTax instance.
func (me *TWithholdingTax) Walk() (err error) {
	if fn := WalkHandlers.TWithholdingTax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_WithholdingTaxType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ struct {
	WithholdingTaxs []*TWithholdingTax `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WithholdingTax" json:"WithholdingTax" bson:"WithholdingTax"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ instance.
func (me *XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.WithholdingTaxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EACCode struct {
	EACCode TSAFPTPortugueseTaxExemptionCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 EACCode" json:"EACCode" bson:"EACCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EACCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EACCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EACCode instance.
func (me *XsdGoPkgHasElem_EACCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EACCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MovementEndTime struct {
	MovementEndTime TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementEndTime" json:"MovementEndTime" bson:"MovementEndTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MovementEndTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MovementEndTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MovementEndTime instance.
func (me *XsdGoPkgHasElem_MovementEndTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MovementEndTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MovementStartTime struct {
	MovementStartTime TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementStartTime" json:"MovementStartTime" bson:"MovementStartTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MovementStartTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MovementStartTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MovementStartTime instance.
func (me *XsdGoPkgHasElem_MovementStartTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MovementStartTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice struct {
	XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_ `bson:"inline"`

	XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ `bson:"inline"`

	XsdGoPkgHasElem_SourceID `bson:"inline"`

	XsdGoPkgHasElem_EACCode `bson:"inline"`

	XsdGoPkgHasElem_MovementEndTime `bson:"inline"`

	XsdGoPkgHasElem_MovementStartTime `bson:"inline"`

	XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_ `bson:"inline"`

	XsdGoPkgHasElem_InvoiceNo `bson:"inline"`

	XsdGoPkgHasElem_Period `bson:"inline"`

	XsdGoPkgHasElem_TransactionID `bson:"inline"`

	XsdGoPkgHasElem_CustomerID `bson:"inline"`

	XsdGoPkgHasElem_ShipTo `bson:"inline"`

	XsdGoPkgHasElem_Atcud `bson:"inline"`

	XsdGoPkgHasElem_Hash `bson:"inline"`

	XsdGoPkgHasElem_HashControl `bson:"inline"`

	XsdGoPkgHasElem_InvoiceType `bson:"inline"`

	XsdGoPkgHasElem_SystemEntryDate `bson:"inline"`

	XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_ `bson:"inline"`

	XsdGoPkgHasElem_InvoiceDate `bson:"inline"`

	XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_ `bson:"inline"`

	XsdGoPkgHasElem_ShipFrom `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice instance as the single argument. Then calls the Walk() method on 21/21 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice instance.
func (me *TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InvoiceNo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Period.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomerID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShipTo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Atcud.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Hash.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HashControl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InvoiceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SystemEntryDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TransactionID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InvoiceDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShipFrom.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EACCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MovementEndTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MovementStartTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_ struct {
	Invoices []*TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Invoice" json:"Invoice" bson:"Invoice"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_ instance.
func (me *XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Invoices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceSalesInvoices struct {
	XsdGoPkgHasElem_NumberOfEntries `bson:"inline"`
	XsdGoPkgHasElem_TotalDebit `bson:"inline"`
	XsdGoPkgHasElem_TotalCredit `bson:"inline"`
	XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoices function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceSalesInvoices instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceSalesInvoices instance.
func (me *TxsdSourceDocumentsSequenceSalesInvoices) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceSalesInvoices; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumberOfEntries.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalDebit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalCredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_ struct {
	SalesInvoices *TxsdSourceDocumentsSequenceSalesInvoices `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SalesInvoices" json:"SalesInvoice" bson:"SalesInvoice"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_ instance.
func (me *XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SalesInvoices.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals struct {
	XsdGoPkgHasElem_TaxPayable `bson:"inline"`
	XsdGoPkgHasElem_NetTotal `bson:"inline"`
	XsdGoPkgHasElem_GrossTotal `bson:"inline"`
	XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals instance.
func (me *TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxPayable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NetTotal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrossTotal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_ struct {
	DocumentTotals *TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentTotals" json:"DocumentTotals" bson:"DocumentTotals"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_ instance.
func (me *XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocumentTotals.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: Tipos de Documento (GR para Guia de remessa, GT para Guia de transporte incluindo as globais, GA para Guia de movimentacao de ativos fixos proprios, GC para Guia de consignacao, GD para Guia ou nota de devolucao
type TxsdMovementType xsdt.String

//	Since TxsdMovementType is just a simple String type, this merely returns the current string value.
func (me TxsdMovementType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMovementType's alias type xsdt.String.
func (me TxsdMovementType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdMovementType is "GR".
func (me TxsdMovementType) IsGr() bool { return me.String() == "GR" }

//	Returns true if the value of this enumerated TxsdMovementType is "GT".
func (me TxsdMovementType) IsGt() bool { return me.String() == "GT" }

//	Returns true if the value of this enumerated TxsdMovementType is "GA".
func (me TxsdMovementType) IsGa() bool { return me.String() == "GA" }

//	Returns true if the value of this enumerated TxsdMovementType is "GC".
func (me TxsdMovementType) IsGc() bool { return me.String() == "GC" }

//	Returns true if the value of this enumerated TxsdMovementType is "GD".
func (me TxsdMovementType) IsGd() bool { return me.String() == "GD" }

//	Since TxsdMovementType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMovementType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElem_MovementType struct {
	//	Restricao: Tipos de Documento (GR para Guia de remessa, GT para Guia de transporte incluindo as globais, GA para Guia de movimentacao de ativos fixos proprios, GC para Guia de consignacao, GD para Guia ou nota de devolucao
	MovementType TxsdMovementType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementType" json:"MovementType" bson:"MovementType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MovementType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MovementType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MovementType instance.
func (me *XsdGoPkgHasElem_MovementType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MovementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MovementComments struct {
	MovementComments TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementComments" json:"MovementComments" bson:"MovementComments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MovementComments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MovementComments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MovementComments instance.
func (me *XsdGoPkgHasElem_MovementComments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MovementComments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ATDocCodeID struct {
	ATDocCodeID TSAFPTtextTypeMandatoryMax200Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ATDocCodeID" json:"ATDocCodeID" bson:"ATDocCodeID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ATDocCodeID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ATDocCodeID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ATDocCodeID instance.
func (me *XsdGoPkgHasElem_ATDocCodeID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ATDocCodeID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFTPTMovementTaxType xsdt.String

//	This convenience method just performs a simple type conversion to TSAFTPTMovementTaxType's alias type xsdt.String.
func (me TSAFTPTMovementTaxType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TSAFTPTMovementTaxType is "IVA".
func (me TSAFTPTMovementTaxType) IsIva() bool { return me.String() == "IVA" }

//	Returns true if the value of this enumerated TSAFTPTMovementTaxType is "NS".
func (me TSAFTPTMovementTaxType) IsNs() bool { return me.String() == "NS" }

//	Since TSAFTPTMovementTaxType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFTPTMovementTaxType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFTPTMovementTaxType is just a simple String type, this merely returns the current string value.
func (me TSAFTPTMovementTaxType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_ struct {
	TaxType TSAFTPTMovementTaxType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxType" json:"TaxType" bson:"TaxType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_ instance.
func (me *XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFTPTMovementTaxCode xsdt.String

//	This convenience method just performs a simple type conversion to TSAFTPTMovementTaxCode's alias type xsdt.String.
func (me TSAFTPTMovementTaxCode) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TSAFTPTMovementTaxCode is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFTPTMovementTaxCode) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFTPTMovementTaxCode is just a simple String type, this merely returns the current string value.
func (me TSAFTPTMovementTaxCode) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_ struct {
	TaxCode TSAFTPTMovementTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCode" json:"TaxCode" bson:"TaxCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_ instance.
func (me *XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMovementTax struct {
	XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_ `bson:"inline"`
	XsdGoPkgHasElem_TaxCountryRegion `bson:"inline"`
	XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_ `bson:"inline"`
	XsdGoPkgHasElem_TaxPercentage `bson:"inline"`
}

//	If the WalkHandlers.TMovementTax function is not nil (ie. was set by outside code), calls it with this TMovementTax instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TMovementTax instance.
func (me *TMovementTax) Walk() (err error) {
	if fn := WalkHandlers.TMovementTax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxCountryRegion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxPercentage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_ struct {
	Tax *TMovementTax `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Tax" json:"Tax" bson:"Tax"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_ instance.
func (me *XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine struct {
	XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_ `bson:"inline"`
	XsdGoPkgHasElem_ProductCode `bson:"inline"`
	XsdGoPkgHasElem_Quantity `bson:"inline"`
	XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_ `bson:"inline"`
	XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_ `bson:"inline"`
	XsdGoPkgHasElem_SettlementAmount `bson:"inline"`
	XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ `bson:"inline"`
	XsdGoPkgHasElem_LineNumber `bson:"inline"`
	XsdGoPkgHasElem_UnitOfMeasure `bson:"inline"`
	XsdGoPkgHasElem_Description `bson:"inline"`
	XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ `bson:"inline"`
	XsdGoPkgHasElem_TaxExemptionCode `bson:"inline"`
	XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_ `bson:"inline"`
	XsdGoPkgHasElem_ProductDescription `bson:"inline"`
	XsdGoPkgHasElem_UnitPrice `bson:"inline"`
	XsdGoPkgHasElem_TaxExemptionReason `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine instance as the single argument. Then calls the Walk() method on 16/16 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine instance.
func (me *TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ProductDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UnitPrice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxExemptionReason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Quantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SettlementAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxExemptionCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LineNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UnitOfMeasure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_ struct {
	Lines []*TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Line" json:"Line" bson:"Line"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_ instance.
func (me *XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocumentNumber struct {
	DocumentNumber TSAFTPTMovementTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentNumber" json:"DocumentNumber" bson:"DocumentNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DocumentNumber instance.
func (me *XsdGoPkgHasElem_DocumentNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	N para Normal, T para Por conta de terceiros, A para Documento anulado, F para Documento faturado, quando para este documento tambem existe na tabela 4.1. para Documentos comerciais a clientes (SalesInvoices) o correspondente do tipo fatura ou fatura simplificada, R para Documento de resumo doutros documentos criados noutras aplicacoes e gerado nesta aplicacao
type TxsdMovementStatus xsdt.String

//	Returns true if the value of this enumerated TxsdMovementStatus is "T".
func (me TxsdMovementStatus) IsT() bool { return me.String() == "T" }

//	Returns true if the value of this enumerated TxsdMovementStatus is "A".
func (me TxsdMovementStatus) IsA() bool { return me.String() == "A" }

//	Returns true if the value of this enumerated TxsdMovementStatus is "F".
func (me TxsdMovementStatus) IsF() bool { return me.String() == "F" }

//	Returns true if the value of this enumerated TxsdMovementStatus is "R".
func (me TxsdMovementStatus) IsR() bool { return me.String() == "R" }

//	Since TxsdMovementStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMovementStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdMovementStatus is just a simple String type, this merely returns the current string value.
func (me TxsdMovementStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMovementStatus's alias type xsdt.String.
func (me TxsdMovementStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdMovementStatus is "N".
func (me TxsdMovementStatus) IsN() bool { return me.String() == "N" }

type XsdGoPkgHasElem_MovementStatus struct {
	//	N para Normal, T para Por conta de terceiros, A para Documento anulado, F para Documento faturado, quando para este documento tambem existe na tabela 4.1. para Documentos comerciais a clientes (SalesInvoices) o correspondente do tipo fatura ou fatura simplificada, R para Documento de resumo doutros documentos criados noutras aplicacoes e gerado nesta aplicacao
	MovementStatus TxsdMovementStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementStatus" json:"MovementStatus" bson:"MovementStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MovementStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MovementStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MovementStatus instance.
func (me *XsdGoPkgHasElem_MovementStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MovementStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MovementStatusDate struct {
	MovementStatusDate TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementStatusDate" json:"MovementStatusDate" bson:"MovementStatusDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MovementStatusDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MovementStatusDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MovementStatusDate instance.
func (me *XsdGoPkgHasElem_MovementStatusDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MovementStatusDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus struct {
	XsdGoPkgHasElem_MovementStatus `bson:"inline"`
	XsdGoPkgHasElem_MovementStatusDate `bson:"inline"`
	XsdGoPkgHasElem_Reason `bson:"inline"`
	XsdGoPkgHasElem_SourceID `bson:"inline"`
	XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus instance.
func (me *TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MovementStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MovementStatusDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Reason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_ struct {
	DocumentStatus *TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentStatus" json:"DocumentStatus" bson:"DocumentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_ instance.
func (me *XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocumentStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MovementDate struct {
	MovementDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementDate" json:"MovementDate" bson:"MovementDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MovementDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MovementDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MovementDate instance.
func (me *XsdGoPkgHasElem_MovementDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MovementDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement struct {
	XsdGoPkgHasElem_TransactionID `bson:"inline"`
	XsdGoPkgHasElem_SourceID `bson:"inline"`
	XsdGoPkgHasElem_ShipTo `bson:"inline"`
	XsdGoPkgHasElem_CustomerID `bson:"inline"`
	XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_ `bson:"inline"`
	XsdGoPkgHasElem_HashControl `bson:"inline"`
	XsdGoPkgHasElem_Period `bson:"inline"`
	XsdGoPkgHasElem_SystemEntryDate `bson:"inline"`
	XsdGoPkgHasElem_MovementStartTime `bson:"inline"`
	XsdGoPkgHasElem_MovementDate `bson:"inline"`
	XsdGoPkgHasElem_ShipFrom `bson:"inline"`
	XsdGoPkgHasElem_MovementEndTime `bson:"inline"`
	XsdGoPkgHasElem_SupplierID `bson:"inline"`
	XsdGoPkgHasElem_Atcud `bson:"inline"`
	XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_ `bson:"inline"`
	XsdGoPkgHasElem_ATDocCodeID `bson:"inline"`
	XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_ `bson:"inline"`
	XsdGoPkgHasElem_DocumentNumber `bson:"inline"`
	XsdGoPkgHasElem_Hash `bson:"inline"`
	XsdGoPkgHasElem_MovementType `bson:"inline"`
	XsdGoPkgHasElem_EACCode `bson:"inline"`
	XsdGoPkgHasElem_MovementComments `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement instance as the single argument. Then calls the Walk() method on 22/22 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement instance.
func (me *TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Hash.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MovementType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EACCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MovementComments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ATDocCodeID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShipTo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomerID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HashControl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Period.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SystemEntryDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TransactionID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MovementStartTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MovementDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShipFrom.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MovementEndTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SupplierID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Atcud.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_ struct {
	StockMovements []*TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 StockMovement" json:"StockMovement" bson:"StockMovement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_ instance.
func (me *XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StockMovements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumberOfMovementLines struct {
	NumberOfMovementLines xsdt.NonNegativeInteger `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 NumberOfMovementLines" json:"NumberOfMovementLines" bson:"NumberOfMovementLines"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumberOfMovementLines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumberOfMovementLines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NumberOfMovementLines instance.
func (me *XsdGoPkgHasElem_NumberOfMovementLines) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumberOfMovementLines; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TotalQuantityIssued struct {
	TotalQuantityIssued TSAFdecimalType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TotalQuantityIssued" json:"TotalQuantityIssued" bson:"TotalQuantityIssued"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalQuantityIssued function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalQuantityIssued instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalQuantityIssued instance.
func (me *XsdGoPkgHasElem_TotalQuantityIssued) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalQuantityIssued; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceMovementOfGoods struct {
	XsdGoPkgHasElem_NumberOfMovementLines `bson:"inline"`
	XsdGoPkgHasElem_TotalQuantityIssued `bson:"inline"`
	XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoods function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceMovementOfGoods instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceMovementOfGoods instance.
func (me *TxsdSourceDocumentsSequenceMovementOfGoods) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceMovementOfGoods; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NumberOfMovementLines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalQuantityIssued.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_ struct {
	MovementOfGoods *TxsdSourceDocumentsSequenceMovementOfGoods `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementOfGoods" json:"MovementOfGoods" bson:"MovementOfGoods"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_ instance.
func (me *XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MovementOfGoods.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WorkStatusDate struct {
	WorkStatusDate TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkStatusDate" json:"WorkStatusDate" bson:"WorkStatusDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WorkStatusDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WorkStatusDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WorkStatusDate instance.
func (me *XsdGoPkgHasElem_WorkStatusDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WorkStatusDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	N para Normal, A para Anulado, F para faturado (quando para este documento tambem existe na tabela 4.1. o correspondente do tipo fatura ou fatura simplificada)
type TxsdWorkStatus xsdt.String

//	Since TxsdWorkStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdWorkStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdWorkStatus is just a simple String type, this merely returns the current string value.
func (me TxsdWorkStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdWorkStatus's alias type xsdt.String.
func (me TxsdWorkStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdWorkStatus is "N".
func (me TxsdWorkStatus) IsN() bool { return me.String() == "N" }

//	Returns true if the value of this enumerated TxsdWorkStatus is "A".
func (me TxsdWorkStatus) IsA() bool { return me.String() == "A" }

//	Returns true if the value of this enumerated TxsdWorkStatus is "F".
func (me TxsdWorkStatus) IsF() bool { return me.String() == "F" }

type XsdGoPkgHasElem_WorkStatus struct {
	//	N para Normal, A para Anulado, F para faturado (quando para este documento tambem existe na tabela 4.1. o correspondente do tipo fatura ou fatura simplificada)
	WorkStatus TxsdWorkStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkStatus" json:"WorkStatus" bson:"WorkStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WorkStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WorkStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WorkStatus instance.
func (me *XsdGoPkgHasElem_WorkStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WorkStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus struct {
	XsdGoPkgHasElem_WorkStatus `bson:"inline"`
	XsdGoPkgHasElem_WorkStatusDate `bson:"inline"`
	XsdGoPkgHasElem_Reason `bson:"inline"`
	XsdGoPkgHasElem_SourceID `bson:"inline"`
	XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus instance.
func (me *TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_WorkStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WorkStatusDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Reason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_ struct {
	DocumentStatus *TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentStatus" json:"DocumentStatus" bson:"DocumentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_ instance.
func (me *XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocumentStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals struct {
	XsdGoPkgHasElem_GrossTotal `bson:"inline"`
	XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ `bson:"inline"`
	XsdGoPkgHasElem_TaxPayable `bson:"inline"`
	XsdGoPkgHasElem_NetTotal `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals instance.
func (me *TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxPayable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NetTotal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrossTotal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_ struct {
	DocumentTotals *TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentTotals" json:"DocumentTotals" bson:"DocumentTotals"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_ instance.
func (me *XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocumentTotals.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine struct {
	XsdGoPkgHasElem_UnitPrice `bson:"inline"`
	XsdGoPkgHasElem_TaxExemptionReason `bson:"inline"`
	XsdGoPkgHasElem_LineNumber `bson:"inline"`
	XsdGoPkgHasElem_TaxBase `bson:"inline"`
	XsdGoPkgHasElem_TaxPointDate `bson:"inline"`
	XsdGoPkgHasElem_Description `bson:"inline"`
	XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ `bson:"inline"`
	XsdGoPkgHasElem_ProductCode `bson:"inline"`
	XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_ `bson:"inline"`
	XsdGoPkgHasElem_ProductDescription `bson:"inline"`
	XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_ `bson:"inline"`
	XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_ `bson:"inline"`
	XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_ `bson:"inline"`
	XsdGoPkgHasElem_Quantity `bson:"inline"`
	XsdGoPkgHasElem_UnitOfMeasure `bson:"inline"`
	XsdGoPkgHasElem_TaxExemptionCode `bson:"inline"`
	XsdGoPkgHasElem_SettlementAmount `bson:"inline"`
	XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine instance as the single argument. Then calls the Walk() method on 18/18 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine instance.
func (me *TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxExemptionCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SettlementAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Quantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UnitOfMeasure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LineNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UnitPrice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxExemptionReason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxBase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxPointDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProductDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_ struct {
	Lines []*TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Line" json:"Line" bson:"Line"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_ instance.
func (me *XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WorkDate struct {
	WorkDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkDate" json:"WorkDate" bson:"WorkDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WorkDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WorkDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WorkDate instance.
func (me *XsdGoPkgHasElem_WorkDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WorkDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: DC para documentos emitidos ate 2017-06-30, CM para consulta de mesa, CC para credito de consignacao, FC para fatura de consignacao nos termos do art.38 do CIVA, FO para folha de obra, NE para nota de encomenda, OU para outros documentos suscetiveis de apresentacao ao cliente para conferencia de mercadorias ou de prestacao de servicos que nao se encontrem aqui devidamente identificados (ou seus equivalentes), OR para orcamento, PF para fatura pro-forma. Para o setor Segurador quando para os tipos de documentos a seguir identificados tambem deva existir na tabela 4.1 - Documentos comerciais a clientes (SalesInvoices) a correspondente fatura ou documento rectificativo de fatura, ainda pode ser preenchido com RP para premio ou recibo de premio, RE para estorno ou recibo de estorno, CS para imputacao a co-seguradoras, LD para imputacao a co-seguradora lider, RA para resseguro aceite.
type TxsdWorkType xsdt.String

//	This convenience method just performs a simple type conversion to TxsdWorkType's alias type xsdt.String.
func (me TxsdWorkType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdWorkType is "CM".
func (me TxsdWorkType) IsCm() bool { return me.String() == "CM" }

//	Returns true if the value of this enumerated TxsdWorkType is "PF".
func (me TxsdWorkType) IsPf() bool { return me.String() == "PF" }

//	Returns true if the value of this enumerated TxsdWorkType is "RE".
func (me TxsdWorkType) IsRe() bool { return me.String() == "RE" }

//	Returns true if the value of this enumerated TxsdWorkType is "LD".
func (me TxsdWorkType) IsLd() bool { return me.String() == "LD" }

//	Returns true if the value of this enumerated TxsdWorkType is "CC".
func (me TxsdWorkType) IsCc() bool { return me.String() == "CC" }

//	Returns true if the value of this enumerated TxsdWorkType is "NE".
func (me TxsdWorkType) IsNe() bool { return me.String() == "NE" }

//	Returns true if the value of this enumerated TxsdWorkType is "OU".
func (me TxsdWorkType) IsOu() bool { return me.String() == "OU" }

//	Returns true if the value of this enumerated TxsdWorkType is "RP".
func (me TxsdWorkType) IsRp() bool { return me.String() == "RP" }

//	Returns true if the value of this enumerated TxsdWorkType is "CS".
func (me TxsdWorkType) IsCs() bool { return me.String() == "CS" }

//	Returns true if the value of this enumerated TxsdWorkType is "RA".
func (me TxsdWorkType) IsRa() bool { return me.String() == "RA" }

//	Since TxsdWorkType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdWorkType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdWorkType is "FC".
func (me TxsdWorkType) IsFc() bool { return me.String() == "FC" }

//	Returns true if the value of this enumerated TxsdWorkType is "OR".
func (me TxsdWorkType) IsOr() bool { return me.String() == "OR" }

//	Returns true if the value of this enumerated TxsdWorkType is "DC".
func (me TxsdWorkType) IsDc() bool { return me.String() == "DC" }

//	Since TxsdWorkType is just a simple String type, this merely returns the current string value.
func (me TxsdWorkType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdWorkType is "FO".
func (me TxsdWorkType) IsFo() bool { return me.String() == "FO" }

type XsdGoPkgHasElem_WorkType struct {
	//	Restricao: DC para documentos emitidos ate 2017-06-30, CM para consulta de mesa, CC para credito de consignacao, FC para fatura de consignacao nos termos do art.38 do CIVA, FO para folha de obra, NE para nota de encomenda, OU para outros documentos suscetiveis de apresentacao ao cliente para conferencia de mercadorias ou de prestacao de servicos que nao se encontrem aqui devidamente identificados (ou seus equivalentes), OR para orcamento, PF para fatura pro-forma. Para o setor Segurador quando para os tipos de documentos a seguir identificados tambem deva existir na tabela 4.1 - Documentos comerciais a clientes (SalesInvoices) a correspondente fatura ou documento rectificativo de fatura, ainda pode ser preenchido com RP para premio ou recibo de premio, RE para estorno ou recibo de estorno, CS para imputacao a co-seguradoras, LD para imputacao a co-seguradora lider, RA para resseguro aceite.
	WorkType TxsdWorkType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkType" json:"WorkType" bson:"WorkType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WorkType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WorkType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WorkType instance.
func (me *XsdGoPkgHasElem_WorkType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WorkType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument struct {
	XsdGoPkgHasElem_Atcud `bson:"inline"`
	XsdGoPkgHasElem_HashControl `bson:"inline"`
	XsdGoPkgHasElem_WorkDate `bson:"inline"`
	XsdGoPkgHasElem_CustomerID `bson:"inline"`
	XsdGoPkgHasElem_Hash `bson:"inline"`
	XsdGoPkgHasElem_Period `bson:"inline"`
	XsdGoPkgHasElem_WorkType `bson:"inline"`
	XsdGoPkgHasElem_DocumentNumber `bson:"inline"`
	XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_ `bson:"inline"`
	XsdGoPkgHasElem_SourceID `bson:"inline"`
	XsdGoPkgHasElem_SystemEntryDate `bson:"inline"`
	XsdGoPkgHasElem_TransactionID `bson:"inline"`
	XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_ `bson:"inline"`
	XsdGoPkgHasElem_EACCode `bson:"inline"`
	XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument instance as the single argument. Then calls the Walk() method on 15/15 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument instance.
func (me *TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EACCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Atcud.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HashControl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WorkDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomerID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Hash.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Period.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WorkType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SystemEntryDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TransactionID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_ struct {
	WorkDocuments []*TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkDocument" json:"WorkDocument" bson:"WorkDocument"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_ instance.
func (me *XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.WorkDocuments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequenceWorkingDocuments struct {
	XsdGoPkgHasElem_NumberOfEntries `bson:"inline"`
	XsdGoPkgHasElem_TotalDebit `bson:"inline"`
	XsdGoPkgHasElem_TotalCredit `bson:"inline"`
	XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocuments function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequenceWorkingDocuments instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequenceWorkingDocuments instance.
func (me *TxsdSourceDocumentsSequenceWorkingDocuments) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequenceWorkingDocuments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NumberOfEntries.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalDebit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalCredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_ struct {
	WorkingDocuments *TxsdSourceDocumentsSequenceWorkingDocuments `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkingDocuments" json:"WorkingDocuments" bson:"WorkingDocuments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_ instance.
func (me *XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.WorkingDocuments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: RC para Recibo emitido no ambito do regime de IVA de Caixa (incluindo os relativos a adiantamentos desse regime), RG para Outros recibos emitidos
type TSAFTPTPaymentType xsdt.String

//	This convenience method just performs a simple type conversion to TSAFTPTPaymentType's alias type xsdt.String.
func (me TSAFTPTPaymentType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TSAFTPTPaymentType is "RC".
func (me TSAFTPTPaymentType) IsRc() bool { return me.String() == "RC" }

//	Returns true if the value of this enumerated TSAFTPTPaymentType is "RG".
func (me TSAFTPTPaymentType) IsRg() bool { return me.String() == "RG" }

//	Since TSAFTPTPaymentType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFTPTPaymentType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFTPTPaymentType is just a simple String type, this merely returns the current string value.
func (me TSAFTPTPaymentType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_ struct {
	PaymentType TSAFTPTPaymentType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentType" json:"PaymentType" bson:"PaymentType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_ instance.
func (me *XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PaymentRefNo struct {
	PaymentRefNo TSAFTPTMovementTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentRefNo" json:"PaymentRefNo" bson:"PaymentRefNo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentRefNo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentRefNo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentRefNo instance.
func (me *XsdGoPkgHasElem_PaymentRefNo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentRefNo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	N para normal, A para Anulado
type TxsdPaymentStatus xsdt.String

//	This convenience method just performs a simple type conversion to TxsdPaymentStatus's alias type xsdt.String.
func (me TxsdPaymentStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdPaymentStatus is "N".
func (me TxsdPaymentStatus) IsN() bool { return me.String() == "N" }

//	Returns true if the value of this enumerated TxsdPaymentStatus is "A".
func (me TxsdPaymentStatus) IsA() bool { return me.String() == "A" }

//	Since TxsdPaymentStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPaymentStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdPaymentStatus is just a simple String type, this merely returns the current string value.
func (me TxsdPaymentStatus) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_PaymentStatus struct {
	//	N para normal, A para Anulado
	PaymentStatus TxsdPaymentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentStatus" json:"PaymentStatus" bson:"PaymentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentStatus instance.
func (me *XsdGoPkgHasElem_PaymentStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PaymentStatusDate struct {
	PaymentStatusDate TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentStatusDate" json:"PaymentStatusDate" bson:"PaymentStatusDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentStatusDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentStatusDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentStatusDate instance.
func (me *XsdGoPkgHasElem_PaymentStatusDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentStatusDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	P para documento produzido na aplicacao, I para documento integrado e produzido noutra aplicacao, M para documento proveniente de recuperacao ou de emissao manual
type TSAFTPTSourcePayment xsdt.String

//	Returns true if the value of this enumerated TSAFTPTSourcePayment is "M".
func (me TSAFTPTSourcePayment) IsM() bool { return me.String() == "M" }

//	Since TSAFTPTSourcePayment is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFTPTSourcePayment) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFTPTSourcePayment is just a simple String type, this merely returns the current string value.
func (me TSAFTPTSourcePayment) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFTPTSourcePayment's alias type xsdt.String.
func (me TSAFTPTSourcePayment) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TSAFTPTSourcePayment is "P".
func (me TSAFTPTSourcePayment) IsP() bool { return me.String() == "P" }

//	Returns true if the value of this enumerated TSAFTPTSourcePayment is "I".
func (me TSAFTPTSourcePayment) IsI() bool { return me.String() == "I" }

type XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_ struct {
	SourcePayment TSAFTPTSourcePayment `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourcePayment" json:"SourcePayment" bson:"SourcePayment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_ instance.
func (me *XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus struct {
	XsdGoPkgHasElem_PaymentStatus `bson:"inline"`
	XsdGoPkgHasElem_PaymentStatusDate `bson:"inline"`
	XsdGoPkgHasElem_Reason `bson:"inline"`
	XsdGoPkgHasElem_SourceID `bson:"inline"`
	XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus instance.
func (me *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PaymentStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PaymentStatusDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Reason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_ struct {
	DocumentStatus *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentStatus" json:"DocumentStatus" bson:"DocumentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_ instance.
func (me *XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocumentStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_ struct {
	PaymentMethods []*TPaymentMethod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentMethod" json:"PaymentMethod" bson:"PaymentMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_ instance.
func (me *XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PaymentMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement struct {
	XsdGoPkgHasElem_SettlementAmount `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement instance.
func (me *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SettlementAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_ struct {
	Settlement *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Settlement" json:"Settlement" bson:"Settlement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_ instance.
func (me *XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Settlement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals struct {
	XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_ `bson:"inline"`
	XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ `bson:"inline"`
	XsdGoPkgHasElem_TaxPayable `bson:"inline"`
	XsdGoPkgHasElem_NetTotal `bson:"inline"`
	XsdGoPkgHasElem_GrossTotal `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals instance.
func (me *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxPayable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NetTotal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrossTotal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_ struct {
	DocumentTotals *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentTotals" json:"DocumentTotals" bson:"DocumentTotals"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_ instance.
func (me *XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocumentTotals.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SystemID struct {
	SystemID TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SystemID" json:"SystemID" bson:"SystemID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SystemID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SystemID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SystemID instance.
func (me *XsdGoPkgHasElem_SystemID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SystemID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID struct {
	XsdGoPkgHasElem_OriginatingON `bson:"inline"`
	XsdGoPkgHasElem_InvoiceDate `bson:"inline"`
	XsdGoPkgHasElem_Description `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID instance.
func (me *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OriginatingON.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InvoiceDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_ struct {
	SourceDocumentIDs []*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceDocumentID" json:"SourceDocumentID" bson:"SourceDocumentID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_ instance.
func (me *XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SourceDocumentIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPaymentTaxCode xsdt.String

//	Since TPaymentTaxCode is just a simple String type, this merely sets the current value from the specified string.
func (me *TPaymentTaxCode) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPaymentTaxCode is just a simple String type, this merely returns the current string value.
func (me TPaymentTaxCode) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPaymentTaxCode's alias type xsdt.String.
func (me TPaymentTaxCode) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_ struct {
	TaxCode TPaymentTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCode" json:"TaxCode" bson:"TaxCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_ instance.
func (me *XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPaymentTax struct {
	XsdGoPkgHasElem_TaxCountryRegion `bson:"inline"`
	XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_ `bson:"inline"`
	XsdGoPkgHasElem_TaxPercentage `bson:"inline"`
	XsdGoPkgHasElem_TaxAmount `bson:"inline"`
	XsdGoPkgHasElem_TaxType `bson:"inline"`
}

//	If the WalkHandlers.TPaymentTax function is not nil (ie. was set by outside code), calls it with this TPaymentTax instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TPaymentTax instance.
func (me *TPaymentTax) Walk() (err error) {
	if fn := WalkHandlers.TPaymentTax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxCountryRegion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxPercentage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_ struct {
	Tax *TPaymentTax `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Tax" json:"Tax" bson:"Tax"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_ instance.
func (me *XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine struct {
	XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_ `bson:"inline"`
	XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ `bson:"inline"`
	XsdGoPkgHasElem_LineNumber `bson:"inline"`
	XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_ `bson:"inline"`
	XsdGoPkgHasElem_SettlementAmount `bson:"inline"`
	XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_ `bson:"inline"`
	XsdGoPkgHasElem_TaxExemptionReason `bson:"inline"`
	XsdGoPkgHasElem_TaxExemptionCode `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine instance.
func (me *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TaxExemptionCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LineNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SettlementAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaxExemptionReason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_ struct {
	Lines []*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Line" json:"Line" bson:"Line"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_ instance.
func (me *XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequencePaymentsSequencePayment struct {
	XsdGoPkgHasElem_Period `bson:"inline"`
	XsdGoPkgHasElem_TransactionDate `bson:"inline"`
	XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_ `bson:"inline"`
	XsdGoPkgHasElem_PaymentRefNo `bson:"inline"`
	XsdGoPkgHasElem_TransactionID `bson:"inline"`
	XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_ `bson:"inline"`
	XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_ `bson:"inline"`
	XsdGoPkgHasElem_CustomerID `bson:"inline"`
	XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_ `bson:"inline"`
	XsdGoPkgHasElem_Atcud `bson:"inline"`
	XsdGoPkgHasElem_Description `bson:"inline"`
	XsdGoPkgHasElem_SystemID `bson:"inline"`
	XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_ `bson:"inline"`
	XsdGoPkgHasElem_SourceID `bson:"inline"`
	XsdGoPkgHasElem_SystemEntryDate `bson:"inline"`
	XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePayment function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequencePaymentsSequencePayment instance as the single argument. Then calls the Walk() method on 16/16 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequencePaymentsSequencePayment instance.
func (me *TxsdSourceDocumentsSequencePaymentsSequencePayment) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequencePaymentsSequencePayment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SourceID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SystemEntryDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Period.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TransactionDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PaymentRefNo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TransactionID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CustomerID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Atcud.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SystemID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_ struct {
	Payments []*TxsdSourceDocumentsSequencePaymentsSequencePayment `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Payment" json:"Payment" bson:"Payment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_ instance.
func (me *XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Payments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocumentsSequencePayments struct {
	XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_ `bson:"inline"`
	XsdGoPkgHasElem_NumberOfEntries `bson:"inline"`
	XsdGoPkgHasElem_TotalDebit `bson:"inline"`
	XsdGoPkgHasElem_TotalCredit `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocumentsSequencePayments function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocumentsSequencePayments instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocumentsSequencePayments instance.
func (me *TxsdSourceDocumentsSequencePayments) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocumentsSequencePayments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TotalDebit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalCredit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumberOfEntries.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_ struct {
	Payments *TxsdSourceDocumentsSequencePayments `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Payments" json:"Payments" bson:"Payments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_ instance.
func (me *XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Payments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceDocuments struct {
	XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_ `bson:"inline"`
	XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_ `bson:"inline"`
	XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_ `bson:"inline"`
	XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_ `bson:"inline"`
}

//	If the WalkHandlers.TxsdSourceDocuments function is not nil (ie. was set by outside code), calls it with this TxsdSourceDocuments instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdSourceDocuments instance.
func (me *TxsdSourceDocuments) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceDocuments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SourceDocuments struct {
	SourceDocuments *TxsdSourceDocuments `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceDocuments" json:"SourceDocuments" bson:"SourceDocuments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourceDocuments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourceDocuments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SourceDocuments instance.
func (me *XsdGoPkgHasElem_SourceDocuments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SourceDocuments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SourceDocuments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAuditFile struct {
	XsdGoPkgHasElem_Header `bson:"inline"`
	XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_ `bson:"inline"`
	XsdGoPkgHasElem_GeneralLedgerEntries `bson:"inline"`
	XsdGoPkgHasElem_SourceDocuments `bson:"inline"`
}

//	If the WalkHandlers.TxsdAuditFile function is not nil (ie. was set by outside code), calls it with this TxsdAuditFile instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdAuditFile instance.
func (me *TxsdAuditFile) Walk() (err error) {
	if fn := WalkHandlers.TxsdAuditFile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Header.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GeneralLedgerEntries.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SourceDocuments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuditFile struct {
	AuditFiles []*TxsdAuditFile `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AuditFile" json:"AuditFile" bson:"AuditFile"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuditFile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuditFile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuditFile instance.
func (me *XsdGoPkgHasElems_AuditFile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuditFile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuditFiles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuditFile struct {
	AuditFile *TxsdAuditFile `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AuditFile" json:"AuditFile" bson:"AuditFile"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuditFile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuditFile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuditFile instance.
func (me *XsdGoPkgHasElem_AuditFile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuditFile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuditFile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Header struct {
	Headers []*TxsdHeader `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Header" json:"Header" bson:"Header"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Header function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Header instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Header instance.
func (me *XsdGoPkgHasElems_Header) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Header; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Headers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GeneralLedgerAccounts struct {
	GeneralLedgerAccountses []*TxsdGeneralLedgerAccounts `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GeneralLedgerAccounts" json:"GeneralLedgerAccounts" bson:"GeneralLedgerAccounts"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GeneralLedgerAccounts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GeneralLedgerAccounts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GeneralLedgerAccounts instance.
func (me *XsdGoPkgHasElems_GeneralLedgerAccounts) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GeneralLedgerAccounts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeneralLedgerAccountses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Customer struct {
	Customer *TxsdCustomer `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Customer" json:"Customer" bson:"Customer"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Customer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Customer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Customer instance.
func (me *XsdGoPkgHasElem_Customer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Customer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Customer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Supplier struct {
	Supplier *TxsdSupplier `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Supplier" json:"Supplier" bson:"Supplier"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Supplier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Supplier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Supplier instance.
func (me *XsdGoPkgHasElem_Supplier) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Supplier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Supplier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Product struct {
	Product *TxsdProduct `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Product" json:"Product"j bson:"Product"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Product function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Product instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Product instance.
func (me *XsdGoPkgHasElem_Product) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Product; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Product.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxTable struct {
	TaxTables []*TxsdTaxTable `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxTable" json:"TaxTable" bson:"TaxTable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxTable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxTable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxTable instance.
func (me *XsdGoPkgHasElems_TaxTable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TaxTables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxTableEntry struct {
	TaxTableEntry *TxsdTaxTableEntry `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxTableEntry" json:"TaxTableEntry" bson:"TaxTableEntry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxTableEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxTableEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaxTableEntry instance.
func (me *XsdGoPkgHasElem_TaxTableEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxTableEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TaxTableEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GeneralLedgerEntries struct {
	GeneralLedgerEntrieses []*TxsdGeneralLedgerEntries `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GeneralLedgerEntries" json:"GeneralLedgerEntries" bson:"GeneralLedgerEntries"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GeneralLedgerEntries function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GeneralLedgerEntries instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GeneralLedgerEntries instance.
func (me *XsdGoPkgHasElems_GeneralLedgerEntries) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GeneralLedgerEntries; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeneralLedgerEntrieses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SourceDocuments struct {
	SourceDocumentses []*TxsdSourceDocuments `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceDocuments" json:"SourceDocuments" bson:"SourceDocuments"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourceDocuments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourceDocuments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourceDocuments instance.
func (me *XsdGoPkgHasElems_SourceDocuments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SourceDocuments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SourceDocumentses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AccountDescription struct {
	AccountDescriptions []TSAFPTtextTypeMandatoryMax100Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AccountDescription" json:"AccountDescription" bson:"AccountDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccountDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccountDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccountDescription instance.
func (me *XsdGoPkgHasElems_AccountDescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccountDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Address struct {
	Addresses []*TAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Address" json:"Address" bson:"Address"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Address instance.
func (me *XsdGoPkgHasElems_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Addresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AddressDetail struct {
	AddressDetails []TSAFPTtextTypeMandatoryMax210Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AddressDetail" json:"AddressDetail" bson:"AddressDetail"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AddressDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AddressDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AddressDetail instance.
func (me *XsdGoPkgHasElems_AddressDetail) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AddressDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ARCNo struct {
	ARCNo TSAFPTtextTypeMandatoryMax21Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ARCNo" json:"ARCNo" bson:"ARCNo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ARCNo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ARCNo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ARCNo instance.
func (me *XsdGoPkgHasElem_ARCNo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ARCNo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Atcud struct {
	Atcuds []TSAFPTtextTypeMandatoryMax100Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ATCUD" json:"ATCUD" bson:"ATCUD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Atcud function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Atcud instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Atcud instance.
func (me *XsdGoPkgHasElems_Atcud) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Atcud; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ATDocCodeID struct {
	ATDocCodeIDs []TSAFPTtextTypeMandatoryMax200Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ATDocCodeID" json:"ATDocCodeID" bson:"ATDocCodeID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ATDocCodeID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ATDocCodeID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ATDocCodeID instance.
func (me *XsdGoPkgHasElems_ATDocCodeID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ATDocCodeID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BillingAddress struct {
	BillingAddresses []*TAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 BillingAddress" json:"BillingAddress" bson:"BillingAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BillingAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BillingAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BillingAddress instance.
func (me *XsdGoPkgHasElems_BillingAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BillingAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BillingAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BuildingNumber struct {
	BuildingNumbers []TSAFPTtextTypeMandatoryMax10Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 BuildingNumber" json:"BuildingNumber" bson:"BuildingNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BuildingNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BuildingNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BuildingNumber instance.
func (me *XsdGoPkgHasElems_BuildingNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BuildingNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BusinessName struct {
	BusinessNames []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 BusinessName" json:"BusinessName" bson:"BusinessName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BusinessName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BusinessName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BusinessName instance.
func (me *XsdGoPkgHasElems_BusinessName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BusinessName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_City struct {
	Cities []TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 City" json:"City" bson:"City"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_City instance.
func (me *XsdGoPkgHasElems_City) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_City; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ClosingCreditBalance struct {
	ClosingCreditBalances []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ClosingCreditBalance" json:"ClosingCreditBalance" bson:"ClosingCreditBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ClosingCreditBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ClosingCreditBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ClosingCreditBalance instance.
func (me *XsdGoPkgHasElems_ClosingCreditBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ClosingCreditBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ClosingDebitBalance struct {
	ClosingDebitBalances []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ClosingDebitBalance" json:"ClosingDebitBalance" bson:"ClosingDebitBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ClosingDebitBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ClosingDebitBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ClosingDebitBalance instance.
func (me *XsdGoPkgHasElems_ClosingDebitBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ClosingDebitBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CNCode struct {
	CNCode TSAFPTCNCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CNCode" json:"CNCode" bson:"CNCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CNCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CNCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CNCode instance.
func (me *XsdGoPkgHasElem_CNCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CNCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompanyAddress struct {
	CompanyAddresses []*TAddressStructurePT `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CompanyAddress" json:"CompanyAddress" bson:"CompanyAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompanyAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompanyAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompanyAddress instance.
func (me *XsdGoPkgHasElems_CompanyAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompanyAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompanyAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompanyName struct {
	CompanyNames []TSAFPTtextTypeMandatoryMax100Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CompanyName" json:"CompanyName" bson:"CompanyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompanyName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompanyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompanyName instance.
func (me *XsdGoPkgHasElems_CompanyName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompanyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Contact struct {
	Contacts []TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Contact" json:"Contact" bson:"Contact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Contact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Contact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Contact instance.
func (me *XsdGoPkgHasElems_Contact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Contact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreditAmount struct {
	CreditAmounts []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CreditAmount" json:"CreditAmount" bson:"CreditAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreditAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreditAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreditAmount instance.
func (me *XsdGoPkgHasElems_CreditAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreditAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CurrencyAmount struct {
	CurrencyAmounts []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CurrencyAmount" json:"CurrencyAmount" bson:"CurrencyAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CurrencyAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CurrencyAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CurrencyAmount instance.
func (me *XsdGoPkgHasElems_CurrencyAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CurrencyAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CustomerID struct {
	CustomerIDs []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CustomerID" json:"CustomerID" bson:"CustomerID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CustomerID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CustomerID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CustomerID instance.
func (me *XsdGoPkgHasElems_CustomerID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CustomerID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CustomerTaxID struct {
	CustomerTaxIDs []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CustomerTaxID" json:"CustomerTaxID" bson:"CustomerTaxID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CustomerTaxID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CustomerTaxID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CustomerTaxID instance.
func (me *XsdGoPkgHasElems_CustomerTaxID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CustomerTaxID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DateCreated struct {
	DateCreateds []TSAFPTDateSpan `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DateCreated" json:"DateCreated" bson:"DateCreated"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DateCreated function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DateCreated instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DateCreated instance.
func (me *XsdGoPkgHasElems_DateCreated) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DateCreated; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DebitAmount struct {
	DebitAmounts []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DebitAmount" json:"DebitAmount" bson:"DebitAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DebitAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DebitAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DebitAmount instance.
func (me *XsdGoPkgHasElems_DebitAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DebitAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DeliveryDate struct {
	DeliveryDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DeliveryDate" json:"DeliveryDate" bson:"DeliveryDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DeliveryDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DeliveryDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DeliveryDate instance.
func (me *XsdGoPkgHasElems_DeliveryDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DeliveryDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DeliveryID struct {
	DeliveryID TSAFPTtextTypeMandatoryMax255Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DeliveryID" json:"DeliveryID" bson:"DeliveryID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DeliveryID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DeliveryID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DeliveryID instance.
func (me *XsdGoPkgHasElem_DeliveryID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DeliveryID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Description struct {
	Descriptions []TSAFPTtextTypeMandatoryMax200Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Description" json:"Description" bson:"Description"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Description function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Description instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Description instance.
func (me *XsdGoPkgHasElems_Description) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Description; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocArchivalNumber struct {
	DocArchivalNumbers []TSAFTPTDocArchivalNumber `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocArchivalNumber" json:"DocArchivalNumber" bson:"DocArchivalNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocArchivalNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocArchivalNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocArchivalNumber instance.
func (me *XsdGoPkgHasElems_DocArchivalNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocArchivalNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Email struct {
	Emails []TSAFPTtextTypeMandatoryMax254Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Email" json:"Email" bson:"Email"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Email instance.
func (me *XsdGoPkgHasElems_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EndDate struct {
	EndDates []TSAFPTDateSpan `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 EndDate" json:"EndDate" json:"EndDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndDate instance.
func (me *XsdGoPkgHasElems_EndDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExchangeRate struct {
	ExchangeRates []TSAFdecimalType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ExchangeRate" json:"ExchangeRate" bson:"ExchangeRate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExchangeRate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExchangeRate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExchangeRate instance.
func (me *XsdGoPkgHasElems_ExchangeRate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExchangeRate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Fax struct {
	Faxs []TSAFPTtextTypeMandatoryMax20Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Fax" json:"Fax" bson:"Fax"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fax instance.
func (me *XsdGoPkgHasElems_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GLPostingDate struct {
	GLPostingDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GLPostingDate" json:"GLPostingDate" bson:"GLPostingDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GLPostingDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GLPostingDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GLPostingDate instance.
func (me *XsdGoPkgHasElems_GLPostingDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GLPostingDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrossTotal struct {
	GrossTotals []float64 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GrossTotal" json:"GrossTotal" bson:"GrossTotal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrossTotal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrossTotal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrossTotal instance.
func (me *XsdGoPkgHasElems_GrossTotal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrossTotal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Hash struct {
	Hashs []TSAFPTtextTypeMandatoryMax172Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Hash" json:"Hash" bson:"Hash"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Hash function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Hash instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Hash instance.
func (me *XsdGoPkgHasElems_Hash) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Hash; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HashControl struct {
	HashControls []TSAFPTHashControl `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 HashControl" json:"HashControl" bson:"HashControl"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HashControl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HashControl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HashControl instance.
func (me *XsdGoPkgHasElems_HashControl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HashControl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HeaderComment struct {
	HeaderComments []TSAFPTtextTypeMandatoryMax255Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 HeaderComment" json:"HeaderComment" bson:"HeaderComment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HeaderComment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HeaderComment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HeaderComment instance.
func (me *XsdGoPkgHasElems_HeaderComment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HeaderComment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IECAmount struct {
	IECAmounts []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 IECAmount" json:"IECAmount" bson:"IECAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IECAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IECAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IECAmount instance.
func (me *XsdGoPkgHasElems_IECAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IECAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InvoiceDate struct {
	InvoiceDates []string `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceDate" json:"InvoiceDate" bson:"InvoiceDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InvoiceDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InvoiceDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InvoiceDate instance.
func (me *XsdGoPkgHasElems_InvoiceDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InvoiceDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InvoiceStatusDate struct {
	InvoiceStatusDates []TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceStatusDate" json:"InvoiceStatusDate" bson:"InvoiceStatusDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InvoiceStatusDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InvoiceStatusDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InvoiceStatusDate instance.
func (me *XsdGoPkgHasElems_InvoiceStatusDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InvoiceStatusDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JournalID struct {
	JournalIDs []TSAFPTJournalID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 JournalID" json:"JournalID" bson:"JournalID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JournalID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JournalID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JournalID instance.
func (me *XsdGoPkgHasElems_JournalID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JournalID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LineNumber struct {
	LineNumbers []xsdt.NonNegativeInteger `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 LineNumber" json:"LineNumber" bson:"LineNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LineNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LineNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LineNumber instance.
func (me *XsdGoPkgHasElems_LineNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LineNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LocationID struct {
	LocationID TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 LocationID" json:"LocationID" bson:"LocationID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LocationID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LocationID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LocationID instance.
func (me *XsdGoPkgHasElem_LocationID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LocationID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MovementComments struct {
	MovementCommentses []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementComments" json:"MovementComments" bson:"MovementComments"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MovementComments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MovementComments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MovementComments instance.
func (me *XsdGoPkgHasElems_MovementComments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MovementComments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MovementDate struct {
	MovementDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementDate" json:"MovementDate" bson:"MovementDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MovementDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MovementDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MovementDate instance.
func (me *XsdGoPkgHasElems_MovementDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MovementDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MovementEndTime struct {
	MovementEndTimes []TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementEndTime" json:"MovementEndTime" bson:"MovementEndTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MovementEndTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MovementEndTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MovementEndTime instance.
func (me *XsdGoPkgHasElems_MovementEndTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MovementEndTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MovementStartTime struct {
	MovementStartTimes []TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementStartTime" json:"MovementStartTime" bson:"MovementStartTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MovementStartTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MovementStartTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MovementStartTime instance.
func (me *XsdGoPkgHasElems_MovementStartTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MovementStartTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MovementStatusDate struct {
	MovementStatusDates []TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementStatusDate" json:"MovementStatusDate" bson:"MovementStatusDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MovementStatusDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MovementStatusDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MovementStatusDate instance.
func (me *XsdGoPkgHasElems_MovementStatusDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MovementStatusDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NetTotal struct {
	NetTotals []float64 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 NetTotal" json:"NetTotal" bson:"NetTotal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NetTotal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NetTotal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NetTotal instance.
func (me *XsdGoPkgHasElems_NetTotal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NetTotal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumberOfEntries struct {
	NumberOfEntrieses []xsdt.NonNegativeInteger `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 NumberOfEntries" json:"NumberOfEntries" bson:"NumberOfEntries"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumberOfEntries function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumberOfEntries instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumberOfEntries instance.
func (me *XsdGoPkgHasElems_NumberOfEntries) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumberOfEntries; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumberOfMovementLines struct {
	NumberOfMovementLineses []xsdt.NonNegativeInteger `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 NumberOfMovementLines" json:"NumberOfMovementLines" bson:"NumberOfMovementLines"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumberOfMovementLines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumberOfMovementLines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumberOfMovementLines instance.
func (me *XsdGoPkgHasElems_NumberOfMovementLines) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumberOfMovementLines; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OpeningCreditBalance struct {
	OpeningCreditBalances []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OpeningCreditBalance" json:"OpeningCreditBalance" bson:"OpeningCreditBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OpeningCreditBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OpeningCreditBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OpeningCreditBalance instance.
func (me *XsdGoPkgHasElems_OpeningCreditBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OpeningCreditBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OpeningDebitBalance struct {
	OpeningDebitBalances []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OpeningDebitBalance" json:"OpeningDebitBalance" bson:"OpeningDebitBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OpeningDebitBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OpeningDebitBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OpeningDebitBalance instance.
func (me *XsdGoPkgHasElems_OpeningDebitBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OpeningDebitBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrderDate struct {
	OrderDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OrderDate" json:"OrderDate" bson:"OrderDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderDate instance.
func (me *XsdGoPkgHasElems_OrderDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OriginatingON struct {
	OriginatingONs []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OriginatingON" json:"OriginatingON" bson:"OriginatingON"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OriginatingON function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OriginatingON instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OriginatingON instance.
func (me *XsdGoPkgHasElems_OriginatingON) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OriginatingON; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentStatusDate struct {
	PaymentStatusDates []TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentStatusDate" json:"PaymentStatusDate" bson:"PaymentStatusDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentStatusDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentStatusDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentStatusDate instance.
func (me *XsdGoPkgHasElems_PaymentStatusDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentStatusDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PostalCode struct {
	PostalCodes []TSAFPTtextTypeMandatoryMax20Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PostalCode" json:"PostalCode" bson:"PostalCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PostalCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PostalCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PostalCode instance.
func (me *XsdGoPkgHasElems_PostalCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PostalCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProductCode struct {
	ProductCodes []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductCode" json:"ProductCode" bson:"ProductCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductCode instance.
func (me *XsdGoPkgHasElems_ProductCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProductCompanyTaxID struct {
	ProductCompanyTaxIDs []TSAFPTtextTypeMandatoryMax20Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductCompanyTaxID" jjson:"ProductCompanyTaxID" bson:"ProductCompanyTaxID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductCompanyTaxID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductCompanyTaxID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductCompanyTaxID instance.
func (me *XsdGoPkgHasElems_ProductCompanyTaxID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductCompanyTaxID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProductDescription struct {
	ProductDescriptions []TSAFPTProductDescription `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductDescription" json:"ProductDescription" bson:"ProductDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductDescription instance.
func (me *XsdGoPkgHasElems_ProductDescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProductGroup struct {
	ProductGroups []TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductGroup" json:"ProductGroup" bson:"ProductGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductGroup instance.
func (me *XsdGoPkgHasElems_ProductGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProductID struct {
	ProductIDs []TSAFPTProductID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductID" json:"ProductID" bson:"ProductID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductID instance.
func (me *XsdGoPkgHasElems_ProductID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProductNumberCode struct {
	ProductNumberCodes []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductNumberCode" json:"ProductNumberCode" bson:"ProductNumberCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductNumberCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductNumberCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductNumberCode instance.
func (me *XsdGoPkgHasElems_ProductNumberCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductNumberCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProductVersion struct {
	ProductVersions []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductVersion" json:"ProductVersion" bson:"ProductVersion"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductVersion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductVersion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductVersion instance.
func (me *XsdGoPkgHasElems_ProductVersion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductVersion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Quantity struct {
	Quantities []TSAFdecimalType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Quantity" json:"Quantity" bson:"Quantity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Quantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Quantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Quantity instance.
func (me *XsdGoPkgHasElems_Quantity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Quantity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Reason struct {
	Reasons []TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Reason" json:"Reason"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Reason function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reason instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reason instance.
func (me *XsdGoPkgHasElems_Reason) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Reason; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecordID struct {
	RecordIDs []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 RecordID" json:"RecordID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecordID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecordID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecordID instance.
func (me *XsdGoPkgHasElems_RecordID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecordID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Reference struct {
	References []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Reference" json:"Reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reference instance.
func (me *XsdGoPkgHasElems_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Region struct {
	Regions []TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Region" json:"Region"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Region function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Region instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Region instance.
func (me *XsdGoPkgHasElems_Region) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Region; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SerialNumber struct {
	SerialNumber TSAFPTtextTypeMandatoryMax100Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SerialNumber" json:"SerialNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SerialNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SerialNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SerialNumber instance.
func (me *XsdGoPkgHasElem_SerialNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SerialNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SettlementAmount struct {
	SettlementAmounts []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SettlementAmount" json:"SettlementAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SettlementAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SettlementAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SettlementAmount instance.
func (me *XsdGoPkgHasElems_SettlementAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SettlementAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ShipFrom struct {
	ShipFroms []*TShippingPointStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipFrom" json:"ShipFrom"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ShipFrom function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ShipFrom instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ShipFrom instance.
func (me *XsdGoPkgHasElems_ShipFrom) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ShipFrom; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ShipFroms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ShipFromAddress struct {
	ShipFromAddress *TAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipFromAddress" json:"ShipFromAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ShipFromAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ShipFromAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ShipFromAddress instance.
func (me *XsdGoPkgHasElem_ShipFromAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ShipFromAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShipFromAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ShipFromAddress struct {
	ShipFromAddresses []*TAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipFromAddress" json:"ShipFromAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ShipFromAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ShipFromAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ShipFromAddress instance.
func (me *XsdGoPkgHasElems_ShipFromAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ShipFromAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ShipFromAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ShipTo struct {
	ShipTos []*TShippingPointStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipTo" json:"ShipTo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ShipTo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ShipTo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ShipTo instance.
func (me *XsdGoPkgHasElems_ShipTo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ShipTo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ShipTos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ShipToAddress struct {
	ShipToAddress *TAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipToAddress" json:"ShipToAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ShipToAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ShipToAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ShipToAddress instance.
func (me *XsdGoPkgHasElem_ShipToAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ShipToAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShipToAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SoftwareCertificateNumber struct {
	SoftwareCertificateNumbers []xsdt.NonNegativeInteger `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SoftwareCertificateNumber" json:"SoftwareCertificateNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SoftwareCertificateNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SoftwareCertificateNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SoftwareCertificateNumber instance.
func (me *XsdGoPkgHasElems_SoftwareCertificateNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SoftwareCertificateNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SourceDocumentID struct {
	SourceDocumentIDs []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceDocumentID" json:"SourceDocumentID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourceDocumentID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourceDocumentID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourceDocumentID instance.
func (me *XsdGoPkgHasElems_SourceDocumentID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SourceDocumentID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SourceID struct {
	SourceIDs []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceID" json:"SourceID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourceID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourceID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourceID instance.
func (me *XsdGoPkgHasElems_SourceID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SourceID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StartDate struct {
	StartDates []TSAFPTDateSpan `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 StartDate" json:"StartDate" bson:"StartDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StartDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StartDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StartDate instance.
func (me *XsdGoPkgHasElems_StartDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StartDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StreetName struct {
	StreetNames []TSAFPTtextTypeMandatoryMax200Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 StreetName" json:"StreetName" bson:"StreetName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StreetName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StreetName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StreetName instance.
func (me *XsdGoPkgHasElems_StreetName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StreetName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SupplierID struct {
	SupplierIDs []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SupplierID" json:"SupplierID" bson:"SupplierID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupplierID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupplierID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupplierID instance.
func (me *XsdGoPkgHasElems_SupplierID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupplierID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SupplierTaxID struct {
	SupplierTaxIDs []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SupplierTaxID" json:"SupplierTaxID" bson:"SupplierTaxID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupplierTaxID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupplierTaxID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupplierTaxID instance.
func (me *XsdGoPkgHasElems_SupplierTaxID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupplierTaxID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SystemEntryDate struct {
	SystemEntryDates []TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SystemEntryDate" json:"SystemEntryDate" bson:"SystemEntryDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SystemEntryDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SystemEntryDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SystemEntryDate instance.
func (me *XsdGoPkgHasElems_SystemEntryDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SystemEntryDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SystemID struct {
	SystemIDs []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SystemID" json:"SystemID" bson:"SystemID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SystemID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SystemID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SystemID instance.
func (me *XsdGoPkgHasElems_SystemID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SystemID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxAmount struct {
	TaxAmounts []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxAmount" json:"TaxAmount" bson:"TaxAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxAmount instance.
func (me *XsdGoPkgHasElems_TaxAmount) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxAmount; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxBase struct {
	TaxBases []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxBase" json:"TaxBase" bson:"TaxBase"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxBase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxBase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxBase instance.
func (me *XsdGoPkgHasElems_TaxBase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxBase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxEntity struct {
	TaxEntities []TSAFPTtextTypeMandatoryMax20Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxEntity" json:"TaxEntity" bson:"TaxEntity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxEntity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxEntity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxEntity instance.
func (me *XsdGoPkgHasElems_TaxEntity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxEntity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxExemptionCode struct {
	TaxExemptionCodes []TSAFPTPortugueseTaxExemptionCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxExemptionCode" json:"TaxExemptionCode" bson:"TaxExemptionCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxExemptionCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxExemptionCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxExemptionCode instance.
func (me *XsdGoPkgHasElems_TaxExemptionCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxExemptionCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxExemptionReason struct {
	TaxExemptionReasons []TSAFPTPortugueseTaxExemptionReason `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxExemptionReason" json:"TaxExemptionReason" bson:"TaxExemptionReason"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxExemptionReason function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxExemptionReason instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxExemptionReason instance.
func (me *XsdGoPkgHasElems_TaxExemptionReason) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxExemptionReason; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxExpirationDate struct {
	TaxExpirationDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxExpirationDate" json:"TaxExpirationDate" bson:"TaxExpirationDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxExpirationDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxExpirationDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxExpirationDate instance.
func (me *XsdGoPkgHasElems_TaxExpirationDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxExpirationDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxPayable struct {
	TaxPayables []float64 `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxPayable" json:"TaxPayable" bson:"TaxPayable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxPayable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxPayable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxPayable instance.
func (me *XsdGoPkgHasElems_TaxPayable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxPayable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxPercentage struct {
	TaxPercentages []TSAFdecimalType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxPercentage" json:"TaxPercentage" bson:"TaxPercentage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxPercentage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxPercentage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxPercentage instance.
func (me *XsdGoPkgHasElems_TaxPercentage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxPercentage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxPointDate struct {
	TaxPointDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxPointDate" json:"TaxPointDate" bson:"TaxPointDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxPointDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxPointDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxPointDate instance.
func (me *XsdGoPkgHasElems_TaxPointDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxPointDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaxVerificationDate struct {
	TaxVerificationDate TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxVerificationDate" json:"TaxVerificationDate" bson:"TaxVerificationDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaxVerificationDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaxVerificationDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TaxVerificationDate instance.
func (me *XsdGoPkgHasElem_TaxVerificationDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaxVerificationDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxVerificationDate struct {
	TaxVerificationDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxVerificationDate" json:"TaxVerificationDate" bson:"TaxVerificationDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxVerificationDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxVerificationDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxVerificationDate instance.
func (me *XsdGoPkgHasElems_TaxVerificationDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxVerificationDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Telephone struct {
	Telephones []TSAFPTtextTypeMandatoryMax20Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Telephone" json:"Telephone" bson:"Telephone"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Telephone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Telephone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Telephone instance.
func (me *XsdGoPkgHasElems_Telephone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Telephone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TotalCredit struct {
	TotalCredits []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TotalCredit" json:"TotalCredit" bson:"TotalCredit"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalCredit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalCredit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalCredit instance.
func (me *XsdGoPkgHasElems_TotalCredit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalCredit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TotalDebit struct {
	TotalDebits []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TotalDebit" json:"TotalDebit" bson:"TotalDebit"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalDebit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalDebit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalDebit instance.
func (me *XsdGoPkgHasElems_TotalDebit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalDebit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TotalQuantityIssued struct {
	TotalQuantityIssueds []TSAFdecimalType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TotalQuantityIssued" json:"TotalQuantityIssued" bson:"TotalQuantityIssued"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalQuantityIssued function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalQuantityIssued instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalQuantityIssued instance.
func (me *XsdGoPkgHasElems_TotalQuantityIssued) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalQuantityIssued; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TransactionDate struct {
	TransactionDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TransactionDate" json:"TransactionDate" bson:"TransactionDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TransactionDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TransactionDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TransactionDate instance.
func (me *XsdGoPkgHasElems_TransactionDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TransactionDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TransactionID struct {
	TransactionIDs []TSAFPTTransactionID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TransactionID" json:"TransactionID" bson:"TransactionID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TransactionID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TransactionID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TransactionID instance.
func (me *XsdGoPkgHasElems_TransactionID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TransactionID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UnitOfMeasure struct {
	UnitOfMeasures []TSAFPTtextTypeMandatoryMax20Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 UnitOfMeasure" json:"UnitOfMeasure" bson:"UnitOfMeasure"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UnitOfMeasure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnitOfMeasure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnitOfMeasure instance.
func (me *XsdGoPkgHasElems_UnitOfMeasure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UnitOfMeasure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UnitPrice struct {
	UnitPrices []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 UnitPrice" json:"UnitPrice" bson:"UnitPrice"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UnitPrice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnitPrice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnitPrice instance.
func (me *XsdGoPkgHasElems_UnitPrice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UnitPrice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UNNumber struct {
	UNNumber TSAFPTUNNumber `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 UNNumber" json:"UNNumber" bson:"UNNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UNNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UNNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UNNumber instance.
func (me *XsdGoPkgHasElem_UNNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UNNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WarehouseID struct {
	WarehouseID TSAFPTtextTypeMandatoryMax50Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WarehouseID" json:"WarehouseID" bson:"WarehouseID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WarehouseID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WarehouseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WarehouseID instance.
func (me *XsdGoPkgHasElem_WarehouseID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WarehouseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Website struct {
	Websites []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Website" json:"Website" bson:"Website"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Website function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Website instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Website instance.
func (me *XsdGoPkgHasElems_Website) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Website; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WorkDate struct {
	WorkDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkDate" json:"WorkDate" bson:"WorkDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WorkDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WorkDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WorkDate instance.
func (me *XsdGoPkgHasElems_WorkDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WorkDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WorkStatusDate struct {
	WorkStatusDates []TSAFdateTimeType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkStatusDate" json:"WorkStatusDate" bson:"WorkStatusDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WorkStatusDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WorkStatusDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WorkStatusDate instance.
func (me *XsdGoPkgHasElems_WorkStatusDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WorkStatusDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AccountID struct {
	AccountIDs []TSAFPTGLAccountID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AccountID" json:"AccountID" bson:"AccountID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccountID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccountID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccountID instance.
func (me *XsdGoPkgHasElems_AccountID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccountID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuditFileVersion struct {
	AuditFileVersions []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AuditFileVersion" json:"AuditFileVersion" bson:"AuditFileVersion"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuditFileVersion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuditFileVersion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuditFileVersion instance.
func (me *XsdGoPkgHasElems_AuditFileVersion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuditFileVersion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CashVATSchemeIndicator struct {
	CashVATSchemeIndicators []TSAFPTAccountingPeriod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CashVATSchemeIndicator" json:"CashVATSchemeIndicator" bson:"CashVATSchemeIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CashVATSchemeIndicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CashVATSchemeIndicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CashVATSchemeIndicator instance.
func (me *XsdGoPkgHasElems_CashVATSchemeIndicator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CashVATSchemeIndicator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Concatenacao da Conservatoria do Registo Comercial com o numero do registo comercial separados pelo caracter espaco. Nos casos em que nao existe o registo comercial, deve ser indicado o NIF.
type XsdGoPkgHasElems_CompanyID struct {
	//	Concatenacao da Conservatoria do Registo Comercial com o numero do registo comercial separados pelo caracter espaco. Nos casos em que nao existe o registo comercial, deve ser indicado o NIF.
	CompanyIDs []TxsdCompanyID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CompanyID" json:"CompanyID" bson:"CompanyID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompanyID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompanyID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompanyID instance.
func (me *XsdGoPkgHasElems_CompanyID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompanyID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Country struct {
	Countries []TSAFPTGLAccountID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Country" json:"Country" bson:"Country"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Country function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Country instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Country instance.
func (me *XsdGoPkgHasElems_Country) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Country; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CurrencyCode struct {
	CurrencyCodes []TSAFPTPortugueseTaxExemptionCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CurrencyCode" json:"CurrencyCode" bson:"CurrencyCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CurrencyCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CurrencyCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CurrencyCode instance.
func (me *XsdGoPkgHasElems_CurrencyCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CurrencyCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocumentNumber struct {
	DocumentNumbers []TSAFTPTMovementTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentNumber" json:"DocumentNumber" bson:"DocumentNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentNumber instance.
func (me *XsdGoPkgHasElems_DocumentNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EACCode struct {
	EACCodes []TSAFPTPortugueseTaxExemptionCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 EACCode" json:"EACCode" bson:"EACCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EACCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EACCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EACCode instance.
func (me *XsdGoPkgHasElems_EACCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EACCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FiscalYear struct {
	FiscalYears []TxsdFiscalYear `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 FiscalYear" json:"FiscalYear" bson:"FiscalYear"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FiscalYear function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FiscalYear instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FiscalYear instance.
func (me *XsdGoPkgHasElems_FiscalYear) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FiscalYear; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	GR para conta de 1. grau da contabilidade geral, GA para conta agregadora ou integradora da contabilidade geral, GM para conta de movimento da contabilidade geral, AR para conta de 1. grau da contabilidade analitica, AA para conta agregadora ou integradora da contabilidade analitica, AM para conta de movimento da contabilidade analitica
type XsdGoPkgHasElems_GroupingCategory struct {
	//	GR para conta de 1. grau da contabilidade geral, GA para conta agregadora ou integradora da contabilidade geral, GM para conta de movimento da contabilidade geral, AR para conta de 1. grau da contabilidade analitica, AA para conta agregadora ou integradora da contabilidade analitica, AM para conta de movimento da contabilidade analitica
	GroupingCategories []TxsdGroupingCategory `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GroupingCategory" json:"GroupingCategory" bson:"GroupingCategory"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GroupingCategory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GroupingCategory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GroupingCategory instance.
func (me *XsdGoPkgHasElems_GroupingCategory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GroupingCategory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InvoiceNo struct {
	InvoiceNos []TSAFPTTransactionID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceNo" json:"InvoiceNo" bson:"InvoiceNo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InvoiceNo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InvoiceNo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InvoiceNo instance.
func (me *XsdGoPkgHasElems_InvoiceNo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InvoiceNo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	N para Normal, S para Autofaturacao, A para Documento anulado, R para Documento de resumo doutros documentos criados noutras aplicacoes e gerado nesta aplicacao, F para Documento faturado
type XsdGoPkgHasElems_InvoiceStatus struct {
	//	N para Normal, S para Autofaturacao, A para Documento anulado, R para Documento de resumo doutros documentos criados noutras aplicacoes e gerado nesta aplicacao, F para Documento faturado
	InvoiceStatuses []TxsdInvoiceStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceStatus" json:"InvoiceStatus" bson:"InvoiceStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InvoiceStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InvoiceStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InvoiceStatus instance.
func (me *XsdGoPkgHasElems_InvoiceStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InvoiceStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao:FT para Fatura, emitida nos termos do artigo 36. do Codigo do IVA, FS para Fatura simplificada, emitida nos termos do artigo 40. do Codigo do IVA, FR para Fatura-recibo, ND para Nota de debito, NC para Nota de credito, VD para Venda a dinheiro e factura/recibo (a), TV para Talao de venda (a), TD para Talao de devolucao (a), AA para Alienacao de ativos (a), DA para Devolucao de  ativos (a). Para o setor Segurador, ainda pode ser preenchido com: RP para Premio ou recibo de premio, RE para Estorno ou recibo de estorno, CS para Imputacao a co-seguradoras, LD para Imputacao a co-seguradora lider, RA para Resseguro aceite. (a) Para os dados ate 2012-12-31
type XsdGoPkgHasElems_InvoiceType struct {
	//	Restricao:FT para Fatura, emitida nos termos do artigo 36. do Codigo do IVA, FS para Fatura simplificada, emitida nos termos do artigo 40. do Codigo do IVA, FR para Fatura-recibo, ND para Nota de debito, NC para Nota de credito, VD para Venda a dinheiro e factura/recibo (a), TV para Talao de venda (a), TD para Talao de devolucao (a), AA para Alienacao de ativos (a), DA para Devolucao de  ativos (a). Para o setor Segurador, ainda pode ser preenchido com: RP para Premio ou recibo de premio, RE para Estorno ou recibo de estorno, CS para Imputacao a co-seguradoras, LD para Imputacao a co-seguradora lider, RA para Resseguro aceite. (a) Para os dados ate 2012-12-31
	InvoiceTypes []TxsdInvoiceType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 InvoiceType" json:"InvoiceType" bson:"InvoiceType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InvoiceType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InvoiceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InvoiceType instance.
func (me *XsdGoPkgHasElems_InvoiceType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InvoiceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	N para Normal, T para Por conta de terceiros, A para Documento anulado, F para Documento faturado, quando para este documento tambem existe na tabela 4.1. para Documentos comerciais a clientes (SalesInvoices) o correspondente do tipo fatura ou fatura simplificada, R para Documento de resumo doutros documentos criados noutras aplicacoes e gerado nesta aplicacao
type XsdGoPkgHasElems_MovementStatus struct {
	//	N para Normal, T para Por conta de terceiros, A para Documento anulado, F para Documento faturado, quando para este documento tambem existe na tabela 4.1. para Documentos comerciais a clientes (SalesInvoices) o correspondente do tipo fatura ou fatura simplificada, R para Documento de resumo doutros documentos criados noutras aplicacoes e gerado nesta aplicacao
	MovementStatuses []TxsdMovementStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementStatus" json:"MovementStatus" bson:"MovementStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MovementStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MovementStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MovementStatus instance.
func (me *XsdGoPkgHasElems_MovementStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MovementStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: Tipos de Documento (GR para Guia de remessa, GT para Guia de transporte incluindo as globais, GA para Guia de movimentacao de ativos fixos proprios, GC para Guia de consignacao, GD para Guia ou nota de devolucao
type XsdGoPkgHasElems_MovementType struct {
	//	Restricao: Tipos de Documento (GR para Guia de remessa, GT para Guia de transporte incluindo as globais, GA para Guia de movimentacao de ativos fixos proprios, GC para Guia de consignacao, GD para Guia ou nota de devolucao
	MovementTypes []TxsdMovementType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementType" json:"MovementType" bson:"MovementType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MovementType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MovementType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MovementType instance.
func (me *XsdGoPkgHasElems_MovementType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MovementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao:CC para Cartao credito, CD para Cartao debito, CH para Cheque bancario, CI para credito documentario internacional, CO para Cheque ou cartao oferta, CS para Compensacao de saldos em conta corrente, DE para Dinheiro eletronico, por exemplo em cartoes de fidelidade ou de pontos, LC para Letra comercial, MB para Referencias de pagamento para Multibanco, NU para Numerario, OU para Outros meios aqui nao assinalados, PR para Permuta de bens, TB para Transferencia bancaria ou debito direto autorizado, TR para titulos de compensacao extrassalarial independentemente do seu suporte, por exemplo, titulos de refeicao, educacao, etc.
type XsdGoPkgHasElems_PaymentMechanism struct {
	//	Restricao:CC para Cartao credito, CD para Cartao debito, CH para Cheque bancario, CI para credito documentario internacional, CO para Cheque ou cartao oferta, CS para Compensacao de saldos em conta corrente, DE para Dinheiro eletronico, por exemplo em cartoes de fidelidade ou de pontos, LC para Letra comercial, MB para Referencias de pagamento para Multibanco, NU para Numerario, OU para Outros meios aqui nao assinalados, PR para Permuta de bens, TB para Transferencia bancaria ou debito direto autorizado, TR para titulos de compensacao extrassalarial independentemente do seu suporte, por exemplo, titulos de refeicao, educacao, etc.
	PaymentMechanisms []TxsdPaymentMechanism `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentMechanism" json:"PaymentMechanism" bson:"PaymentMechanism"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentMechanism function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentMechanism instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentMechanism instance.
func (me *XsdGoPkgHasElems_PaymentMechanism) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentMechanism; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentRefNo struct {
	PaymentRefNos []TSAFTPTMovementTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentRefNo" json:"PaymentRefNo" bson:"PaymentRefNo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentRefNo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentRefNo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentRefNo instance.
func (me *XsdGoPkgHasElems_PaymentRefNo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentRefNo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	N para normal, A para Anulado
type XsdGoPkgHasElems_PaymentStatus struct {
	//	N para normal, A para Anulado
	PaymentStatuses []TxsdPaymentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentStatus" json:"PaymentStatus" bson:"PaymentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentStatus instance.
func (me *XsdGoPkgHasElems_PaymentStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Period struct {
	Periods []TSAFPTAccountingPeriod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Period" json:"Period" bson:"Period"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Period function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Period instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Period instance.
func (me *XsdGoPkgHasElems_Period) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Period; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: P para Produtos, S para Servicos, O para Outros (Ex: portes debitados, adiantamentos recebidos ou alienacao de ativos), E para Impostos Especiais de Consumo (ex.:IABA, ISP, IT); I para impostos, taxas e encargos parafiscais exceto IVA e IS que deverao ser refletidos na tabela 2.5 Tabela de impostos (TaxTable)e Impostos Especiais de Consumo
type XsdGoPkgHasElems_ProductType struct {
	//	Restricao: P para Produtos, S para Servicos, O para Outros (Ex: portes debitados, adiantamentos recebidos ou alienacao de ativos), E para Impostos Especiais de Consumo (ex.:IABA, ISP, IT); I para impostos, taxas e encargos parafiscais exceto IVA e IS que deverao ser refletidos na tabela 2.5 Tabela de impostos (TaxTable)e Impostos Especiais de Consumo
	ProductTypes []TxsdProductType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductType" json:"ProductType" bson:"ProductType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductType instance.
func (me *XsdGoPkgHasElems_ProductType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SelfBillingIndicator struct {
	SelfBillingIndicators []TSAFTaxonomyCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SelfBillingIndicator" json:"SelfBillingIndicator" bson:"SelfBillingIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SelfBillingIndicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SelfBillingIndicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SelfBillingIndicator instance.
func (me *XsdGoPkgHasElems_SelfBillingIndicator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SelfBillingIndicator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	C para Contabilidade, E para Faturacao emitida por terceiros, F para Faturacao, I para Contabilidade integrada com a faturacao, P para Faturacao parcial, R para Recibos (a), S para Autofaturacao, T para Documentos de transporte (a). (a) Deve ser indicado este tipo, se o programa apenas este emitir este tipo de documento. Caso contrario, devera ser utilizado o tipo C, F ou I
type XsdGoPkgHasElems_TaxAccountingBasis struct {
	//	C para Contabilidade, E para Faturacao emitida por terceiros, F para Faturacao, I para Contabilidade integrada com a faturacao, P para Faturacao parcial, R para Recibos (a), S para Autofaturacao, T para Documentos de transporte (a). (a) Deve ser indicado este tipo, se o programa apenas este emitir este tipo de documento. Caso contrario, devera ser utilizado o tipo C, F ou I
	TaxAccountingBasises []TxsdTaxAccountingBasis `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxAccountingBasis" json:"TaxAccountingBasis" bson:"TaxAccountingBasis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxAccountingBasis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxAccountingBasis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxAccountingBasis instance.
func (me *XsdGoPkgHasElems_TaxAccountingBasis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxAccountingBasis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxCode struct {
	TaxCodes []TSAFPTHashControl `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCode" json:"TaxCode" bson:"TaxCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxCode instance.
func (me *XsdGoPkgHasElems_TaxCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxCountryRegion struct {
	TaxCountryRegions []TSAFPTProductDescription `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCountryRegion" json:"TaxCountryRegion" bson:"TaxCountryRegion"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxCountryRegion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxCountryRegion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxCountryRegion instance.
func (me *XsdGoPkgHasElems_TaxCountryRegion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxCountryRegion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	S para SNC base (Taxonomia S), M para SNC microentidades (Taxonomia M), N para Normas Internacionais de Contabilidade (Taxonomia S), O para outros referenciais contabilisticos cuja taxonomia nao se encontra codificada
type XsdGoPkgHasElems_TaxonomyReference struct {
	//	S para SNC base (Taxonomia S), M para SNC microentidades (Taxonomia M), N para Normas Internacionais de Contabilidade (Taxonomia S), O para outros referenciais contabilisticos cuja taxonomia nao se encontra codificada
	TaxonomyReferences []TxsdTaxonomyReference `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxonomyReference" json:"TaxonomyReference" bson:"TaxonomyReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxonomyReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxonomyReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxonomyReference instance.
func (me *XsdGoPkgHasElems_TaxonomyReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxonomyReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxType struct {
	TaxTypes []TxsdTaxType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxType" json:"TaxType" bson:"TaxType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxType instance.
func (me *XsdGoPkgHasElems_TaxType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ThirdPartiesBillingIndicator struct {
	ThirdPartiesBillingIndicators []TSAFPTAccountingPeriod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ThirdPartiesBillingIndicator" json:"ThirdPartiesBillingIndicator" bson:"ThirdPartiesBillingIndicator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ThirdPartiesBillingIndicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ThirdPartiesBillingIndicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ThirdPartiesBillingIndicator instance.
func (me *XsdGoPkgHasElems_ThirdPartiesBillingIndicator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ThirdPartiesBillingIndicator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: N para Normal, R para Regularizacoes do periodo de tributacao, A para Apuramento de resultados, J para Movimentos de ajustamento
type XsdGoPkgHasElems_TransactionType struct {
	//	Restricao: N para Normal, R para Regularizacoes do periodo de tributacao, A para Apuramento de resultados, J para Movimentos de ajustamento
	TransactionTypes []TxsdTransactionType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TransactionType" json:"TransactionType" bson:"TransactionType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TransactionType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TransactionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TransactionType instance.
func (me *XsdGoPkgHasElems_TransactionType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TransactionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: IRS para Imposto Sobre o Rendimento das Pessoas Singulares, IRC para Imposto Sobre o Rendimento das Pessoas colectivas, IS para Imposto do selo
type XsdGoPkgHasElems_WithholdingTaxType struct {
	//	Restricao: IRS para Imposto Sobre o Rendimento das Pessoas Singulares, IRC para Imposto Sobre o Rendimento das Pessoas colectivas, IS para Imposto do selo
	WithholdingTaxTypes []TxsdWithholdingTaxType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WithholdingTaxType" json:"WithholdingTaxType" bson:"WithholdingTaxType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WithholdingTaxType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WithholdingTaxType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WithholdingTaxType instance.
func (me *XsdGoPkgHasElems_WithholdingTaxType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WithholdingTaxType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	N para Normal, A para Anulado, F para faturado (quando para este documento tambem existe na tabela 4.1. o correspondente do tipo fatura ou fatura simplificada)
type XsdGoPkgHasElems_WorkStatus struct {
	//	N para Normal, A para Anulado, F para faturado (quando para este documento tambem existe na tabela 4.1. o correspondente do tipo fatura ou fatura simplificada)
	WorkStatuses []TxsdWorkStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkStatus" json:"WorkStatus" bson:"WorkStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WorkStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WorkStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WorkStatus instance.
func (me *XsdGoPkgHasElems_WorkStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WorkStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Restricao: DC para documentos emitidos ate 2017-06-30, CM para consulta de mesa, CC para credito de consignacao, FC para fatura de consignacao nos termos do art.38 do CIVA, FO para folha de obra, NE para nota de encomenda, OU para outros documentos suscetiveis de apresentacao ao cliente para conferencia de mercadorias ou de prestacao de servicos que nao se encontrem aqui devidamente identificados (ou seus equivalentes), OR para orcamento, PF para fatura pro-forma. Para o setor Segurador quando para os tipos de documentos a seguir identificados tambem deva existir na tabela 4.1 - Documentos comerciais a clientes (SalesInvoices) a correspondente fatura ou documento rectificativo de fatura, ainda pode ser preenchido com RP para premio ou recibo de premio, RE para estorno ou recibo de estorno, CS para imputacao a co-seguradoras, LD para imputacao a co-seguradora lider, RA para resseguro aceite.
type XsdGoPkgHasElems_WorkType struct {
	//	Restricao: DC para documentos emitidos ate 2017-06-30, CM para consulta de mesa, CC para credito de consignacao, FC para fatura de consignacao nos termos do art.38 do CIVA, FO para folha de obra, NE para nota de encomenda, OU para outros documentos suscetiveis de apresentacao ao cliente para conferencia de mercadorias ou de prestacao de servicos que nao se encontrem aqui devidamente identificados (ou seus equivalentes), OR para orcamento, PF para fatura pro-forma. Para o setor Segurador quando para os tipos de documentos a seguir identificados tambem deva existir na tabela 4.1 - Documentos comerciais a clientes (SalesInvoices) a correspondente fatura ou documento rectificativo de fatura, ainda pode ser preenchido com RP para premio ou recibo de premio, RE para estorno ou recibo de estorno, CS para imputacao a co-seguradoras, LD para imputacao a co-seguradora lider, RA para resseguro aceite.
	WorkTypes []TxsdWorkType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkType" json:"WorkType" bson:"WorkType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WorkType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WorkType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WorkType instance.
func (me *XsdGoPkgHasElems_WorkType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WorkType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_ struct {
	StockMovement *TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 StockMovement" json:"StockMovement" bson:"StockMovement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_ instance.
func (me *XsdGoPkgHasElem_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StockMovement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_ struct {
	Taxs []*TMovementTax `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Tax" json:"Tax" bson:"Tax"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_ instance.
func (me *XsdGoPkgHasElems_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Taxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_ struct {
	SourcePayments []TSAFTPTSourcePayment `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourcePayment" json:"SourcePayment" bson:"SourcePayment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_ instance.
func (me *XsdGoPkgHasElems_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CurrencysequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ struct {
	Currencies []*TCurrency `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Currency" json:"Currency" bson:"Currency"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CurrencysequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CurrencysequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CurrencysequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_ instance.
func (me *XsdGoPkgHasElems_CurrencysequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CurrencysequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Currencies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_ struct {
	SpecialRegimeses []*TSpecialRegimes `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SpecialRegimes" json:"SpecialRegimes" bson:"SpecialRegimes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_ instance.
func (me *XsdGoPkgHasElems_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SpecialRegimeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMax40Car xsdt.String

//	Since TSAFPTtextTypeMax40Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMax40Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMax40Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMax40Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMax40Car's alias type xsdt.String.
func (me TSAFPTtextTypeMax40Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElems_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ struct {
	AccountIDs []TSAFPTGLAccountID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 AccountID" json:"AccountID" bson:"AccountID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_ instance.
func (me *XsdGoPkgHasElems_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_ struct {
	Journal *TxsdGeneralLedgerEntriesSequenceJournal `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Journal" json:"Journal" bson:"Journal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_ instance.
func (me *XsdGoPkgHasElem_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Journal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreditLineallLinessequenceTransactionsequenceJournalsequenceGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_ struct {
	CreditLines []*TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CreditLine" json:"CreditLine" bson:"CreditLine"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreditLineallLinessequenceTransactionsequenceJournalsequenceGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreditLineallLinessequenceTransactionsequenceJournalsequenceGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreditLineallLinessequenceTransactionsequenceJournalsequenceGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_ instance.
func (me *XsdGoPkgHasElems_CreditLineallLinessequenceTransactionsequenceJournalsequenceGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreditLineallLinessequenceTransactionsequenceJournalsequenceGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CreditLines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxsequenceLinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Tax_Tax_ struct {
	Taxs []*Tax `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Tax" json:"Tax" bson:"Tax"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxsequenceLinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Tax_Tax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxsequenceLinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Tax_Tax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxsequenceLinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Tax_Tax_ instance.
func (me *XsdGoPkgHasElems_TaxsequenceLinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Tax_Tax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxsequenceLinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Tax_Tax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Taxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrderReferencessequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_OrderReferences_TOrderReferences_ struct {
	OrderReferences *TOrderReferences `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 OrderReferences" json:"OrderReferences" bson:"OrderReferences"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderReferencessequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_OrderReferences_TOrderReferences_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderReferencessequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_OrderReferences_TOrderReferences_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrderReferencessequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_OrderReferences_TOrderReferences_ instance.
func (me *XsdGoPkgHasElem_OrderReferencessequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_OrderReferences_TOrderReferences_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderReferencessequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_OrderReferences_TOrderReferences_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrderReferences.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MasterFilessequenceAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_ struct {
	MasterFileses []*TxsdAuditFileSequenceMasterFiles `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MasterFiles" json:"MasterFiles" bson:"MasterFiles"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MasterFilessequenceAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MasterFilessequenceAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MasterFilessequenceAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_ instance.
func (me *XsdGoPkgHasElems_MasterFilessequenceAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MasterFilessequenceAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MasterFileses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_ struct {
	References *TReferences `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 References" json:"References" bson:"References"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_ instance.
func (me *XsdGoPkgHasElem_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.References.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DescriptionsequenceTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_ struct {
	Descriptions []TSAFPTtextTypeMandatoryMax255Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Description" json:"Description" bson:"Description"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DescriptionsequenceTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DescriptionsequenceTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DescriptionsequenceTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_ instance.
func (me *XsdGoPkgHasElems_DescriptionsequenceTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DescriptionsequenceTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxRegistrationNumbersequenceHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_ struct {
	TaxRegistrationNumbers []TSAFPTPortugueseVatNumber `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxRegistrationNumber" json:"TaxRegistrationNumber" bson:"TaxRegistrationNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxRegistrationNumbersequenceHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxRegistrationNumbersequenceHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxRegistrationNumbersequenceHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_ instance.
func (me *XsdGoPkgHasElems_TaxRegistrationNumbersequenceHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxRegistrationNumbersequenceHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CustomsInformationsequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_CustomsInformation_TCustomsInformation_ struct {
	CustomsInformations []*TCustomsInformation `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CustomsInformation" json:"CustomsInformation" bson:"CustomsInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CustomsInformationsequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_CustomsInformation_TCustomsInformation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CustomsInformationsequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_CustomsInformation_TCustomsInformation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CustomsInformationsequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_CustomsInformation_TCustomsInformation_ instance.
func (me *XsdGoPkgHasElems_CustomsInformationsequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_CustomsInformation_TCustomsInformation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CustomsInformationsequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_CustomsInformation_TCustomsInformation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CustomsInformations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SettlementsequenceDocumentTotalssequencePaymentsequencePaymentssequenceSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_ struct {
	Settlements []*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Settlement" json:"Settlement" bson:"Settlement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SettlementsequenceDocumentTotalssequencePaymentsequencePaymentssequenceSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SettlementsequenceDocumentTotalssequencePaymentsequencePaymentssequenceSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SettlementsequenceDocumentTotalssequencePaymentsequencePaymentssequenceSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_ instance.
func (me *XsdGoPkgHasElems_SettlementsequenceDocumentTotalssequencePaymentsequencePaymentssequenceSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SettlementsequenceDocumentTotalssequencePaymentsequencePaymentssequenceSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Settlements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_ struct {
	DocumentTotalses []*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentTotals" json:"DocumentTotals" bson:"DocumentTotals"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_ instance.
func (me *XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocumentTotalses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_ struct {
	PaymentTermses []TSAFPTtextTypeMandatoryMax100Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentTerms" json:"PaymentTerms" bson:"PaymentTerms"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_ instance.
func (me *XsdGoPkgHasElems_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TransactionsequenceJournalsequenceGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_ struct {
	Transaction *TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Transaction" json:"Transaction" bson:"Transaction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TransactionsequenceJournalsequenceGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TransactionsequenceJournalsequenceGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TransactionsequenceJournalsequenceGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_ instance.
func (me *XsdGoPkgHasElem_TransactionsequenceJournalsequenceGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TransactionsequenceJournalsequenceGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transaction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LinesequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_ struct {
	Line *TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Line" json:"Line" bson:"Line"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinesequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinesequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LinesequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_ instance.
func (me *XsdGoPkgHasElem_LinesequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LinesequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Line.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_ struct {
	PaymentMethod *TPaymentMethod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentMethod" json:"PaymentMethod" bson:"PaymentMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_ instance.
func (me *XsdGoPkgHasElem_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PaymentMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ struct {
	WithholdingTax *TWithholdingTax `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WithholdingTax" json:"WithholdingTax" bson:"WithholdingTax"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_ instance.
func (me *XsdGoPkgHasElem_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.WithholdingTax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_ struct {
	DocumentStatuses []*TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentStatus" json:"DocumentStatus" bson:"DocumentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_ instance.
func (me *XsdGoPkgHasElems_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocumentStatuses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_ struct {
	Lineses []*TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Lines" json:"Lines" bson:"Lines"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_ instance.
func (me *XsdGoPkgHasElems_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lineses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax35Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax35Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax35Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax35Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax35Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax35Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax35Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElems_CustomsDetailssequenceProductschema_CustomsDetails_TCustomsDetails_ struct {
	CustomsDetailses []*TCustomsDetails `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CustomsDetails" json:"CustomsDetails" bson:"CustomsDetails"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CustomsDetailssequenceProductschema_CustomsDetails_TCustomsDetails_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CustomsDetailssequenceProductschema_CustomsDetails_TCustomsDetails_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CustomsDetailssequenceProductschema_CustomsDetails_TCustomsDetails_ instance.
func (me *XsdGoPkgHasElems_CustomsDetailssequenceProductschema_CustomsDetails_TCustomsDetails_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CustomsDetailssequenceProductschema_CustomsDetails_TCustomsDetails_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CustomsDetailses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_ struct {
	DocumentTotalses []*TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentTotals" json:"DocumentTotals" bson:"DocumentTotals"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_ instance.
func (me *XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocumentTotalses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PaymentsequencePaymentssequenceSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_ struct {
	Payment *TxsdSourceDocumentsSequencePaymentsSequencePayment `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Payment" json:"Payment" bson:"Payment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentsequencePaymentssequenceSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentsequencePaymentssequenceSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PaymentsequencePaymentssequenceSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_ instance.
func (me *XsdGoPkgHasElem_PaymentsequencePaymentssequenceSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentsequencePaymentssequenceSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Payment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_ struct {
	DebitLines []*TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DebitLine" json:"DebitLine" bson:"DebitLine"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_ instance.
func (me *XsdGoPkgHasElems_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DebitLines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_ struct {
	TaxTypes []TSAFTPTMovementTaxType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxType" json:"TaxType" bson:"TaxType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_ instance.
func (me *XsdGoPkgHasElems_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentssequenceSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_ struct {
	Paymentses []*TxsdSourceDocumentsSequencePayments `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Payments" json:"Payments" bson:"Payments"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentssequenceSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentssequenceSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentssequenceSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_ instance.
func (me *XsdGoPkgHasElems_PaymentssequenceSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentssequenceSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Paymentses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur struct {
	CurrencyCodes []xsdt.String `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 CurrencyCode" json:"CurrencyCode" bson:"CurrencyCode"`
}

//	Returns the fixed value for CurrencyCode -- "EUR"
func (me XsdGoPkgHasElems_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur) CurrencyCodeFixed() xsdt.String {
	return xsdt.String("EUR")
}

//	If the WalkHandlers.XsdGoPkgHasElems_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur instance.
func (me *XsdGoPkgHasElems_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_ struct {
	Invoice *TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Invoice" json:"Invoice" bson:"Invoice"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_ instance.
func (me *XsdGoPkgHasElem_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Invoice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SalesInvoicessequenceSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_ struct {
	SalesInvoiceses []*TxsdSourceDocumentsSequenceSalesInvoices `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SalesInvoices" json:"SalesInvoices" bson:"SalesInvoices"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SalesInvoicessequenceSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SalesInvoicessequenceSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SalesInvoicessequenceSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_ instance.
func (me *XsdGoPkgHasElems_SalesInvoicessequenceSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SalesInvoicessequenceSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SalesInvoiceses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_ struct {
	Settlement *TSettlement `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Settlement" json:"Settlement" bson:"Settlement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_ instance.
func (me *XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Settlement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_ struct {
	Line *TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Line" json:"Line" bson:"Line"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_ instance.
func (me *XsdGoPkgHasElem_LinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Line.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_ struct {
	TaxCodes []TSAFTPTMovementTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCode" json:"Line" bson:"Line"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_ instance.
func (me *XsdGoPkgHasElems_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GroupingCodesequenceAccountsequenceGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_ struct {
	GroupingCodes []TSAFPTGLAccountID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 GroupingCode" json:"GroupingCode" bson:"GroupingCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GroupingCodesequenceAccountsequenceGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GroupingCodesequenceAccountsequenceGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GroupingCodesequenceAccountsequenceGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_ instance.
func (me *XsdGoPkgHasElems_GroupingCodesequenceAccountsequenceGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GroupingCodesequenceAccountsequenceGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocumentStatussequencePaymentsequencePaymentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_ struct {
	DocumentStatuses []*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentStatus" json:"DocumentStatus" bson:"DocumentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentStatussequencePaymentsequencePaymentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentStatussequencePaymentsequencePaymentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentStatussequencePaymentsequencePaymentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_ instance.
func (me *XsdGoPkgHasElems_DocumentStatussequencePaymentsequencePaymentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentStatussequencePaymentsequencePaymentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocumentStatuses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_ struct {
	WorkDocument *TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkDocument" json:"WorkDocument" bson:"WorkDocument"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_ instance.
func (me *XsdGoPkgHasElem_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.WorkDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ struct {
	ProductSerialNumbers []*TProductSerialNumber `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ProductSerialNumber" json:"ProductSerialNumber" bson:"ProductSerialNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_ instance.
func (me *XsdGoPkgHasElems_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProductSerialNumbers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxCodesequenceTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_ struct {
	TaxCodes []TaxTableEntryTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCode" json:"TaxCode" bson:"TaxCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxCodesequenceTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxCodesequenceTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxCodesequenceTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_ instance.
func (me *XsdGoPkgHasElems_TaxCodesequenceTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxCodesequenceTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_ struct {
	Periods []TSAFPTAccountingPeriod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Period" json:"Period" bson:"Period"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_ instance.
func (me *XsdGoPkgHasElems_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_ struct {
	PaymentTypes []TSAFTPTPaymentType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentType" json:"PaymentType" bson:"PaymentType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_ instance.
func (me *XsdGoPkgHasElems_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata" json:"chardata" bson:"chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxsequenceLinesequencePaymentsequencePaymentssequenceSourceDocumentsschema_Tax_TPaymentTax_ struct {
	Taxs []*TPaymentTax `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Tax" json:"Tax" bson:"Tax"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxsequenceLinesequencePaymentsequencePaymentssequenceSourceDocumentsschema_Tax_TPaymentTax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxsequenceLinesequencePaymentsequencePaymentssequenceSourceDocumentsschema_Tax_TPaymentTax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxsequenceLinesequencePaymentsequencePaymentssequenceSourceDocumentsschema_Tax_TPaymentTax_ instance.
func (me *XsdGoPkgHasElems_TaxsequenceLinesequencePaymentsequencePaymentssequenceSourceDocumentsschema_Tax_TPaymentTax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxsequenceLinesequencePaymentsequencePaymentssequenceSourceDocumentsschema_Tax_TPaymentTax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Taxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_ struct {
	SourceDocumentID *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceDocumentID" json:"SourceDocumentID" json:"SourceDocumentID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_ instance.
func (me *XsdGoPkgHasElem_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SourceDocumentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SourceBillingsequenceDocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ struct {
	SourceBillings []TSAFTPTSourceBilling `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SourceBilling" json:"SourceBilling" bson:"SourceBilling"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourceBillingsequenceDocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourceBillingsequenceDocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourceBillingsequenceDocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_ instance.
func (me *XsdGoPkgHasElems_SourceBillingsequenceDocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SourceBillingsequenceDocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_ struct {
	Line *TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Line" json:"Line" bson:"Line"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_ instance.
func (me *XsdGoPkgHasElem_LinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Line.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_ struct {
	WorkingDocumentses []*TxsdSourceDocumentsSequenceWorkingDocuments `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WorkingDocuments" json:"WorkingDocuments" bson:"WorkingDocuments"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_ instance.
func (me *XsdGoPkgHasElems_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.WorkingDocumentses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocumentStatussequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_ struct {
	DocumentStatuses []*TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentStatus" json:"DocumentStatus" bson:"DocumentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentStatussequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentStatussequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentStatussequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_ instance.
func (me *XsdGoPkgHasElems_DocumentStatussequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentStatussequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocumentStatuses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocumentTotalssequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_ struct {
	DocumentTotalses []*TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentTotals" bson:"DocumentTotals" json:"DocumentTotals"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentTotalssequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentTotalssequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentTotalssequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_ instance.
func (me *XsdGoPkgHasElems_DocumentTotalssequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentTotalssequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocumentTotalses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_ struct {
	WithholdingTaxDescriptions []TSAFPTtextTypeMandatoryMax60Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WithholdingTaxDescription" json:"WithholdingTaxDescription" bson:"WithholdingTaxDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_ instance.
func (me *XsdGoPkgHasElems_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_ struct {
	MovementOfGoodses []*TxsdSourceDocumentsSequenceMovementOfGoods `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 MovementOfGoods" json:"MovementOfGoods" bson:"MovementOfGoods"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_ instance.
func (me *XsdGoPkgHasElems_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MovementOfGoodses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_ struct {
	ShipFromAddress *TSupplierAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 ShipFromAddress" json:"ShipFromAddress" bson:"ShipFromAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_ instance.
func (me *XsdGoPkgHasElem_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShipFromAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_ struct {
	DocumentTotalses []*TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentTotals" json:"DocumentTotals" bson:"DocumentTotals"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_ instance.
func (me *XsdGoPkgHasElems_DocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocumentTotalses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BillingAddresssequenceSupplierschema_BillingAddress_TSupplierAddressStructure_ struct {
	BillingAddresses []*TSupplierAddressStructure `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 BillingAddress" json:"BillingAddress" bson:"BillingAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BillingAddresssequenceSupplierschema_BillingAddress_TSupplierAddressStructure_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BillingAddresssequenceSupplierschema_BillingAddress_TSupplierAddressStructure_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BillingAddresssequenceSupplierschema_BillingAddress_TSupplierAddressStructure_ instance.
func (me *XsdGoPkgHasElems_BillingAddresssequenceSupplierschema_BillingAddress_TSupplierAddressStructure_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BillingAddresssequenceSupplierschema_BillingAddress_TSupplierAddressStructure_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BillingAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_ struct {
	SettlementDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SettlementDate" json:"SettlementDate" bson:"SettlementDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_ instance.
func (me *XsdGoPkgHasElems_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_ struct {
	Line *TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Line" json:"Line" bson:"Line"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_ instance.
func (me *XsdGoPkgHasElem_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Line.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PaymentsequenceDocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Payment_TPaymentMethod_ struct {
	Payment *TPaymentMethod `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Payment" json:"Payment" bson:"Payment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentsequenceDocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Payment_TPaymentMethod_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentsequenceDocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Payment_TPaymentMethod_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PaymentsequenceDocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Payment_TPaymentMethod_ instance.
func (me *XsdGoPkgHasElem_PaymentsequenceDocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Payment_TPaymentMethod_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentsequenceDocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Payment_TPaymentMethod_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Payment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AccountsequenceGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_ struct {
	Account *TxsdGeneralLedgerAccountsSequenceAccount `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Account" json:"Account" bson:"Account"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AccountsequenceGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccountsequenceGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AccountsequenceGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_ instance.
func (me *XsdGoPkgHasElem_AccountsequenceGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AccountsequenceGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Account.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_ struct {
	DocumentStatuses []*TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 DocumentStatus" json:"DocumentStatus" bson:"DocumentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_ instance.
func (me *XsdGoPkgHasElems_DocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocumentStatuses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_ struct {
	WithholdingTaxAmounts []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 WithholdingTaxAmount" json:"WithholdingTaxAmount" bson:"WithholdingTaxAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_ instance.
func (me *XsdGoPkgHasElems_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt struct {
	Countries []xsdt.String `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Country" json:"Country" bson:"Country"`
}

//	Returns the fixed value for Country -- "PT"
func (me XsdGoPkgHasElems_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt) CountryFixed() xsdt.String {
	return xsdt.String("PT")
}

//	If the WalkHandlers.XsdGoPkgHasElems_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt instance.
func (me *XsdGoPkgHasElems_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_ struct {
	PaymentAmounts []TSAFmonetaryType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentAmount" json:"PaymentAmount" bson:"PaymentAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_ instance.
func (me *XsdGoPkgHasElems_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_ struct {
	SettlementDiscounts []TSAFPTtextTypeMandatoryMax30Car `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 SettlementDiscount" json:"SettlementDiscount" bson:"SettlementDiscount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_ instance.
func (me *XsdGoPkgHasElems_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TaxonomyCodesequenceAccountsequenceGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_ struct {
	TaxonomyCodes []TSAFTaxonomyCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxonomyCode" json:"TaxonomyCode" bson:"TaxonomyCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxonomyCodesequenceAccountsequenceGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxonomyCodesequenceAccountsequenceGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxonomyCodesequenceAccountsequenceGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_ instance.
func (me *XsdGoPkgHasElems_TaxonomyCodesequenceAccountsequenceGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxonomyCodesequenceAccountsequenceGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_ struct {
	PaymentDates []TSAFdateType `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PaymentDate" json:"PaymentDate" bson:"PaymentDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_ instance.
func (me *XsdGoPkgHasElems_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_ struct {
	Countries []TSupplierCountry `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 Country" json:"Country" bson:"Country"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_ instance.
func (me *XsdGoPkgHasElems_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSAFPTtextTypeMandatoryMax70Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax70Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax70Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax70Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax70Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax70Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax70Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type TSAFPTtextTypeMandatoryMax90Car xsdt.String

//	Since TSAFPTtextTypeMandatoryMax90Car is just a simple String type, this merely sets the current value from the specified string.
func (me *TSAFPTtextTypeMandatoryMax90Car) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSAFPTtextTypeMandatoryMax90Car is just a simple String type, this merely returns the current string value.
func (me TSAFPTtextTypeMandatoryMax90Car) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSAFPTtextTypeMandatoryMax90Car's alias type xsdt.String.
func (me TSAFPTtextTypeMandatoryMax90Car) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElems_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_ struct {
	TaxCodes []TPaymentTaxCode `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 TaxCode" json:"TaxCode" bson:"TaxCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_ instance.
func (me *XsdGoPkgHasElems_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_ struct {
	PostalCodes []TPostalCodePT `xml:"urn:OECD:StandardAuditFile-Tax:PT_1.04_01 PostalCode" bson:"PostalCode" json:"PostalCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_ instance.
func (me *XsdGoPkgHasElems_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 487 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 487 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElems_Atcud                                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Atcud, bool) error
	XsdGoPkgHasElems_ProductVersion                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_ProductVersion, bool) error
	XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_, bool) error
	XsdGoPkgHasElem_TaxExpirationDate                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_TaxExpirationDate, bool) error
	TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine                                                                                                                                                                                                                                                                                                                                                                   func(*TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine, bool) error
	XsdGoPkgHasElem_CompanyName                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_CompanyName, bool) error
	TxsdTaxTable                                                                                                                                                                                                                                                                                                                                                                                                                                  func(*TxsdTaxTable, bool) error
	XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_, bool) error
	XsdGoPkgHasElems_CreditAmount                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_CreditAmount, bool) error
	XsdGoPkgHasElems_CompanyID                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_CompanyID, bool) error
	XsdGoPkgHasElems_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_                                                                                                                              func(*XsdGoPkgHasElems_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_, bool) error
	XsdGoPkgHasElem_OpeningDebitBalance                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_OpeningDebitBalance, bool) error
	XsdGoPkgHasElems_GrossTotal                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_GrossTotal, bool) error
	XsdGoPkgHasElems_SystemID                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_SystemID, bool) error
	XsdGoPkgHasElems_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_, bool) error
	XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_                                                                                                                                  func(*XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_, bool) error
	XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_DescriptionsequenceTxsdTaxTableEntryTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_, bool) error
	XsdGoPkgHasElem_InvoiceNo                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_InvoiceNo, bool) error
	XsdGoPkgHasElem_WarehouseID                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_WarehouseID, bool) error
	XsdGoPkgHasElems_BillingAddresssequenceSupplierschema_BillingAddress_TSupplierAddressStructure_                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_BillingAddresssequenceSupplierschema_BillingAddress_TSupplierAddressStructure_, bool) error
	XsdGoPkgHasElem_DateCreated                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_DateCreated, bool) error
	XsdGoPkgHasElem_InvoiceStatusDate                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_InvoiceStatusDate, bool) error
	TxsdSourceDocumentsSequencePayments                                                                                                                                                                                                                                                                                                                                                                                                           func(*TxsdSourceDocumentsSequencePayments, bool) error
	XsdGoPkgHasElems_InvoiceNo                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_InvoiceNo, bool) error
	XsdGoPkgHasElems_TaxType                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_TaxType, bool) error
	XsdGoPkgHasElems_TransactionType                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_TransactionType, bool) error
	XsdGoPkgHasElem_GLPostingDate                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_GLPostingDate, bool) error
	XsdGoPkgHasElems_Supplier                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_Supplier, bool) error
	XsdGoPkgHasElems_Product                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_Product, bool) error
	TCurrency                                                                                                                                                                                                                                                                                                                                                                                                                                     func(*TCurrency, bool) error
	XsdGoPkgHasElems_DocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_DocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_, bool) error
	TxsdCustomer                                                                                                                                                                                                                                                                                                                                                                                                                                  func(*TxsdCustomer, bool) error
	XsdGoPkgHasElem_TaxEntity                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_TaxEntity, bool) error
	TxsdGeneralLedgerAccounts                                                                                                                                                                                                                                                                                                                                                                                                                     func(*TxsdGeneralLedgerAccounts, bool) error
	XsdGoPkgHasElem_TaxExemptionReason                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_TaxExemptionReason, bool) error
	TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice                                                                                                                                                                                                                                                                                                                                                                                       func(*TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice, bool) error
	XsdGoPkgHasElem_NumberOfMovementLines                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_NumberOfMovementLines, bool) error
	XsdGoPkgHasElem_TotalQuantityIssued                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_TotalQuantityIssued, bool) error
	XsdGoPkgHasElems_GeneralLedgerAccounts                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_GeneralLedgerAccounts, bool) error
	XsdGoPkgHasElem_SoftwareCertificateNumber                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_SoftwareCertificateNumber, bool) error
	XsdGoPkgHasElems_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_, bool) error
	XsdGoPkgHasElems_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_                                                                                                                                            func(*XsdGoPkgHasElems_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_, bool) error
	XsdGoPkgHasElems_Address                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_Address, bool) error
	XsdGoPkgHasElem_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_                                                                                                                          func(*XsdGoPkgHasElem_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_, bool) error
	TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals                                                                                                                                                                                                                                                                                                                                                         func(*TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals, bool) error
	XsdGoPkgHasElem_InvoiceType                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_InvoiceType, bool) error
	TSpecialRegimes                                                                                                                                                                                                                                                                                                                                                                                                                               func(*TSpecialRegimes, bool) error
	XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_SalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_, bool) error
	XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_                                                                                                           func(*XsdGoPkgHasElem_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_, bool) error
	XsdGoPkgHasElem_ARCNo                                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_ARCNo, bool) error
	XsdGoPkgHasElems_HashControl                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_HashControl, bool) error
	XsdGoPkgHasElems_WorkStatus                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_WorkStatus, bool) error
	XsdGoPkgHasElem_GeneralLedgerAccounts                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_GeneralLedgerAccounts, bool) error
	XsdGoPkgHasElems_Reason                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_Reason, bool) error
	XsdGoPkgHasElems_SerialNumber                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_SerialNumber, bool) error
	TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement                                                                                                                                                                                                                                                                                                                                                                               func(*TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement, bool) error
	XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_, bool) error
	XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur, bool) error
	XsdGoPkgHasElems_EACCode                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_EACCode, bool) error
	XsdGoPkgHasElem_Region                                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_Region, bool) error
	XsdGoPkgHasElem_SystemEntryDate                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_SystemEntryDate, bool) error
	XsdGoPkgHasElem_TaxBase                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_TaxBase, bool) error
	XsdGoPkgHasElem_MovementStartTime                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_MovementStartTime, bool) error
	XsdGoPkgHasElems_ShipTo                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_ShipTo, bool) error
	XsdGoPkgHasElems_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_, bool) error
	XsdGoPkgHasElem_City                                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_City, bool) error
	XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_                                                                                                     func(*XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_, bool) error
	XsdGoPkgHasElems_TaxRegistrationNumbersequenceHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_TaxRegistrationNumbersequenceHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_, bool) error
	XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_PaymentDatesequencePaymentMethodschema_PaymentDate_TSAFdateType_, bool) error
	XsdGoPkgHasElem_CashVATSchemeIndicator                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_CashVATSchemeIndicator, bool) error
	TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID                                                                                                                                                                                                                                                                                                                                                        func(*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID, bool) error
	XsdGoPkgHasElems_BuildingNumber                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_BuildingNumber, bool) error
	XsdGoPkgHasElems_MovementEndTime                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_MovementEndTime, bool) error
	XsdGoPkgHasElem_ClosingDebitBalance                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_ClosingDebitBalance, bool) error
	XsdGoPkgHasElem_SourceDocumentID                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_SourceDocumentID, bool) error
	XsdGoPkgHasElems_ATDocCodeID                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_ATDocCodeID, bool) error
	XsdGoPkgHasElems_OrderDate                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_OrderDate, bool) error
	XsdGoPkgHasElems_TaxEntity                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_TaxEntity, bool) error
	XsdGoPkgHasElems_UNNumber                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_UNNumber, bool) error
	XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_                                          func(*XsdGoPkgHasElem_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_, bool) error
	XsdGoPkgHasElem_Atcud                                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Atcud, bool) error
	XsdGoPkgHasElem_MovementEndTime                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_MovementEndTime, bool) error
	XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_                                                                                                                                 func(*XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_, bool) error
	XsdGoPkgHasElems_WorkDate                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_WorkDate, bool) error
	XsdGoPkgHasElems_CashVATSchemeIndicator                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_CashVATSchemeIndicator, bool) error
	TSupplierAddressStructure                                                                                                                                                                                                                                                                                                                                                                                                                     func(*TSupplierAddressStructure, bool) error
	XsdGoPkgHasElems_InvoiceType                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_InvoiceType, bool) error
	XsdGoPkgHasElems_CompanyAddress                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_CompanyAddress, bool) error
	XsdGoPkgHasElems_SystemEntryDate                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_SystemEntryDate, bool) error
	XsdGoPkgHasElem_LinesequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_LinesequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLine_, bool) error
	XsdGoPkgHasElems_BusinessName                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_BusinessName, bool) error
	XsdGoPkgHasElems_DocumentNumber                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_DocumentNumber, bool) error
	XsdGoPkgHasElem_DeliveryID                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_DeliveryID, bool) error
	XsdGoPkgHasElem_PaymentMechanism                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_PaymentMechanism, bool) error
	XsdGoPkgHasElems_ShipFromAddress                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_ShipFromAddress, bool) error
	XsdGoPkgHasElems_MasterFilessequenceAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_MasterFilessequenceAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_, bool) error
	XsdGoPkgHasElem_Email                                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Email, bool) error
	XsdGoPkgHasElems_Email                                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Email, bool) error
	XsdGoPkgHasElems_NetTotal                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_NetTotal, bool) error
	XsdGoPkgHasElems_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_, bool) error
	TxsdSupplier                                                                                                                                                                                                                                                                                                                                                                                                                                  func(*TxsdSupplier, bool) error
	XsdGoPkgHasElem_MovementStatus                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_MovementStatus, bool) error
	XsdGoPkgHasElem_CompanyID                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_CompanyID, bool) error
	TPaymentTax                                                                                                                                                                                                                                                                                                                                                                                                                                   func(*TPaymentTax, bool) error
	XsdGoPkgHasElems_TaxPayable                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_TaxPayable, bool) error
	XsdGoPkgHasElems_NumberOfEntries                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_NumberOfEntries, bool) error
	XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_, bool) error
	XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_                                                      func(*XsdGoPkgHasElems_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_, bool) error
	XsdGoPkgHasElems_CurrencyAmount                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_CurrencyAmount, bool) error
	XsdGoPkgHasElem_LocationID                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_LocationID, bool) error
	XsdGoPkgHasElems_StreetName                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_StreetName, bool) error
	XsdGoPkgHasElems_CurrencysequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_                                                                                                                               func(*XsdGoPkgHasElems_CurrencysequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_, bool) error
	XsdGoPkgHasElems_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_PaymentTermssequenceSettlementschema_PaymentTerms_TSAFPTtextTypeMandatoryMax100Car_, bool) error
	XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_, bool) error
	XsdGoPkgHasElems_LineNumber                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_LineNumber, bool) error
	TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine                                                                                                                                                                                                                                                                                                                                                                           func(*TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine, bool) error
	XsdGoPkgHasElem_PaymentStatus                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_PaymentStatus, bool) error
	XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_                                                                                                    func(*XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_, bool) error
	TxsdSourceDocuments                                                                                                                                                                                                                                                                                                                                                                                                                           func(*TxsdSourceDocuments, bool) error
	TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine                                                                                                                                                                                                                                                                                                                                                                   func(*TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine, bool) error
	TReferences                                                                                                                                                                                                                                                                                                                                                                                                                                   func(*TReferences, bool) error
	XsdGoPkgHasElems_CustomerID                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_CustomerID, bool) error
	XsdGoPkgHasElems_MovementStartTime                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_MovementStartTime, bool) error
	TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine                                                                                                                                                                                                                                                                                                                                                           func(*TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine, bool) error
	XsdGoPkgHasElems_Fax                                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_Fax, bool) error
	XsdGoPkgHasElems_MovementDate                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_MovementDate, bool) error
	XsdGoPkgHasElems_Period                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_Period, bool) error
	XsdGoPkgHasElems_BillingAddress                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_BillingAddress, bool) error
	XsdGoPkgHasElem_Period                                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_Period, bool) error
	XsdGoPkgHasElem_DeliveryDate                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_DeliveryDate, bool) error
	XsdGoPkgHasElem_InvoiceDate                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_InvoiceDate, bool) error
	TMovementTax                                                                                                                                                                                                                                                                                                                                                                                                                                  func(*TMovementTax, bool) error
	XsdGoPkgHasElems_GroupingCodesequenceAccountsequenceGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_GroupingCodesequenceAccountsequenceGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_, bool) error
	XsdGoPkgHasElem_HeaderComment                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_HeaderComment, bool) error
	XsdGoPkgHasElems_TaxVerificationDate                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_TaxVerificationDate, bool) error
	XsdGoPkgHasElem_ProductCompanyTaxID                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_ProductCompanyTaxID, bool) error
	XsdGoPkgHasElem_MovementType                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_MovementType, bool) error
	XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_                                                                                                                                                                                                                func(*XsdGoPkgHasElems_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_, bool) error
	XsdGoPkgHasElems_CompanyName                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_CompanyName, bool) error
	TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines                                                                                                                                                                                                                                                                                                                                                                       func(*TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines, bool) error
	XsdGoPkgHasElems_TaxBase                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_TaxBase, bool) error
	XsdGoPkgHasElems_TaxExpirationDate                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_TaxExpirationDate, bool) error
	XsdGoPkgHasElems_TaxonomyCodesequenceAccountsequenceGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_TaxonomyCodesequenceAccountsequenceGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_, bool) error
	XsdGoPkgHasElem_WorkType                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_WorkType, bool) error
	TProductSerialNumber                                                                                                                                                                                                                                                                                                                                                                                                                          func(*TProductSerialNumber, bool) error
	XsdGoPkgHasElems_AuditFile                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_AuditFile, bool) error
	XsdGoPkgHasElems_InvoiceStatusDate                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_InvoiceStatusDate, bool) error
	XsdGoPkgHasElem_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_InvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Invoice_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoice_, bool) error
	XsdGoPkgHasElems_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_                                                                                              func(*XsdGoPkgHasElems_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_, bool) error
	XsdGoPkgHasElem_OrderDate                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_OrderDate, bool) error
	XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_                                                                                                                                                                                                              func(*XsdGoPkgHasElems_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_, bool) error
	XsdGoPkgHasElem_TaxVerificationDate                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_TaxVerificationDate, bool) error
	XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_                                                                                                                                                  func(*XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_, bool) error
	XsdGoPkgHasElem_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_                                                                                                                                                                                             func(*XsdGoPkgHasElem_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_, bool) error
	XsdGoPkgHasElem_PaymentsequencePaymentssequenceSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_PaymentsequencePaymentssequenceSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_, bool) error
	XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_                                                                                                                                             func(*XsdGoPkgHasElem_LinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Lines_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLines_, bool) error
	TOrderReferences                                                                                                                                                                                                                                                                                                                                                                                                                              func(*TOrderReferences, bool) error
	XsdGoPkgHasElems_AccountDescription                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_AccountDescription, bool) error
	XsdGoPkgHasElems_WarehouseID                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_WarehouseID, bool) error
	XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_                                                                                                                         func(*XsdGoPkgHasElems_ReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_References_TReferences_, bool) error
	XsdGoPkgHasElems_Reference                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_Reference, bool) error
	XsdGoPkgHasElems_PaymentMechanism                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_PaymentMechanism, bool) error
	XsdGoPkgHasElem_StartDate                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_StartDate, bool) error
	XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_                                                                                                                                                   func(*XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals_, bool) error
	TWithholdingTax                                                                                                                                                                                                                                                                                                                                                                                                                               func(*TWithholdingTax, bool) error
	XsdGoPkgHasElem_TransactionType                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_TransactionType, bool) error
	XsdGoPkgHasElem_MovementDate                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_MovementDate, bool) error
	TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus                                                                                                                                                                                                                                                                                                                                                         func(*TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus, bool) error
	XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_, bool) error
	XsdGoPkgHasElem_Customer                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_Customer, bool) error
	XsdGoPkgHasElems_ExchangeRate                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_ExchangeRate, bool) error
	XsdGoPkgHasElem_PostalCode                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_PostalCode, bool) error
	XsdGoPkgHasElem_AddressDetail                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_AddressDetail, bool) error
	XsdGoPkgHasElem_CustomerTaxID                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_CustomerTaxID, bool) error
	TxsdTaxTableEntry                                                                                                                                                                                                                                                                                                                                                                                                                             func(*TxsdTaxTableEntry, bool) error
	XsdGoPkgHasElems_GLPostingDate                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_GLPostingDate, bool) error
	XsdGoPkgHasElems_MovementStatusDate                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_MovementStatusDate, bool) error
	XsdGoPkgHasElems_SourceDocumentID                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_SourceDocumentID, bool) error
	XsdGoPkgHasElems_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_                                                                                                            func(*XsdGoPkgHasElems_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_, bool) error
	XsdGoPkgHasElem_FiscalYear                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_FiscalYear, bool) error
	XsdGoPkgHasElem_TaxType                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_TaxType, bool) error
	XsdGoPkgHasElem_SystemID                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_SystemID, bool) error
	XsdGoPkgHasElems_AddressDetail                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_AddressDetail, bool) error
	XsdGoPkgHasElems_TaxExemptionCode                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_TaxExemptionCode, bool) error
	XsdGoPkgHasElems_TaxsequenceLinesequencePaymentsequencePaymentssequenceSourceDocumentsschema_Tax_TPaymentTax_                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_TaxsequenceLinesequencePaymentsequencePaymentssequenceSourceDocumentsschema_Tax_TPaymentTax_, bool) error
	XsdGoPkgHasElem_TaxAccountingBasis                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_TaxAccountingBasis, bool) error
	XsdGoPkgHasElems_CurrencyCode                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_CurrencyCode, bool) error
	TSettlement                                                                                                                                                                                                                                                                                                                                                                                                                                   func(*TSettlement, bool) error
	XsdGoPkgHasElem_CustomerID                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_CustomerID, bool) error
	XsdGoPkgHasElems_TotalCredit                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_TotalCredit, bool) error
	XsdGoPkgHasElem_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_                                                                                                                                                                                                               func(*XsdGoPkgHasElem_PaymentMethodsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentMethod_TPaymentMethod_, bool) error
	XsdGoPkgHasElem_BuildingNumber                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_BuildingNumber, bool) error
	XsdGoPkgHasElem_Reason                                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_Reason, bool) error
	XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_                                                                                                                                                                                             func(*XsdGoPkgHasElem_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_, bool) error
	XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_                                                                                                        func(*XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TPaymentMethod_, bool) error
	XsdGoPkgHasElems_City                                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_City, bool) error
	TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine                                                                                                                                                                                                                                                                                                                                                          func(*TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine, bool) error
	XsdGoPkgHasElems_Hash                                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Hash, bool) error
	XsdGoPkgHasElem_Website                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_Website, bool) error
	XsdGoPkgHasElems_ProductDescription                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_ProductDescription, bool) error
	XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_                                                                                                                                                                                func(*XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_, bool) error
	XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_, bool) error
	XsdGoPkgHasElems_ProductID                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_ProductID, bool) error
	XsdGoPkgHasElems_TaxonomyReference                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_TaxonomyReference, bool) error
	XsdGoPkgHasElems_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_CurrencyCodesequenceTxsdHeaderHeaderschema_CurrencyCode_XsdtString_Eur, bool) error
	TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction                                                                                                                                                                                                                                                                                                                                                                                    func(*TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction, bool) error
	XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_                                           func(*XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_, bool) error
	XsdGoPkgHasElem_TaxTable                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_TaxTable, bool) error
	XsdGoPkgHasElems_ClosingCreditBalance                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_ClosingCreditBalance, bool) error
	XsdGoPkgHasElem_Contact                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_Contact, bool) error
	XsdGoPkgHasElems_TaxTableEntry                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_TaxTableEntry, bool) error
	XsdGoPkgHasElem_JournalID                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_JournalID, bool) error
	XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_PaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payment_TxsdSourceDocumentsSequencePaymentsSequencePayment_, bool) error
	XsdGoPkgHasElem_CNCode                                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_CNCode, bool) error
	XsdGoPkgHasElems_DebitAmount                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_DebitAmount, bool) error
	XsdGoPkgHasElems_TaxPointDate                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_TaxPointDate, bool) error
	XsdGoPkgHasElem_ProductVersion                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_ProductVersion, bool) error
	XsdGoPkgHasElem_NetTotal                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_NetTotal, bool) error
	XsdGoPkgHasElem_WorkDate                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_WorkDate, bool) error
	XsdGoPkgHasElems_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_AccountIDsequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_AccountID_TSAFPTGLAccountID_, bool) error
	Tax                                                                                                                                                                                                                                                                                                                                                                                                                                           func(*Tax, bool) error
	XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_, bool) error
	XsdGoPkgHasElem_PaymentRefNo                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_PaymentRefNo, bool) error
	XsdGoPkgHasElem_SettlementAmount                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_SettlementAmount, bool) error
	XsdGoPkgHasElem_TaxAmount                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_TaxAmount, bool) error
	TxsdGeneralLedgerEntries                                                                                                                                                                                                                                                                                                                                                                                                                      func(*TxsdGeneralLedgerEntries, bool) error
	XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_                                                                                                  func(*XsdGoPkgHasElem_CustomsInformationsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_CustomsInformation_TCustomsInformation_, bool) error
	XsdGoPkgHasElems_MovementComments                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_MovementComments, bool) error
	XsdGoPkgHasElem_ShipFromAddress                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_ShipFromAddress, bool) error
	TxsdHeader                                                                                                                                                                                                                                                                                                                                                                                                                                    func(*TxsdHeader, bool) error
	XsdGoPkgHasElem_Hash                                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Hash, bool) error
	XsdGoPkgHasElem_TaxExemptionCode                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_TaxExemptionCode, bool) error
	XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_, bool) error
	XsdGoPkgHasElems_MovementStatus                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_MovementStatus, bool) error
	XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_TransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_, bool) error
	XsdGoPkgHasElems_DocumentStatussequencePaymentsequencePaymentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_DocumentStatussequencePaymentsequencePaymentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_, bool) error
	XsdGoPkgHasElem_LinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_LinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_, bool) error
	XsdGoPkgHasElems_SettlementsequenceDocumentTotalssequencePaymentsequencePaymentssequenceSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_SettlementsequenceDocumentTotalssequencePaymentsequencePaymentssequenceSourceDocumentsschema_Settlement_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement_, bool) error
	XsdGoPkgHasElems_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_PaymentAmountsequencePaymentMethodschema_PaymentAmount_TSAFmonetaryType_, bool) error
	XsdGoPkgHasElem_TaxTableEntry                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_TaxTableEntry, bool) error
	XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_                                                                                                     func(*XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_, bool) error
	XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_                                                                                               func(*XsdGoPkgHasElem_ProductSerialNumbersequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_ProductSerialNumber_TProductSerialNumber_, bool) error
	TCustomsDetails                                                                                                                                                                                                                                                                                                                                                                                                                               func(*TCustomsDetails, bool) error
	XsdGoPkgHasElem_ProductCode                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_ProductCode, bool) error
	XsdGoPkgHasElem_Supplier                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_Supplier, bool) error
	XsdGoPkgHasElem_AuditFileVersion                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_AuditFileVersion, bool) error
	XsdGoPkgHasElems_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_SettlementDatesequenceSettlementschema_SettlementDate_TSAFdateType_, bool) error
	XsdGoPkgHasElem_OpeningCreditBalance                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_OpeningCreditBalance, bool) error
	XsdGoPkgHasElem_ProductDescription                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_ProductDescription, bool) error
	TxsdSourceDocumentsSequenceSalesInvoices                                                                                                                                                                                                                                                                                                                                                                                                      func(*TxsdSourceDocumentsSequenceSalesInvoices, bool) error
	XsdGoPkgHasElems_CustomerTaxID                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_CustomerTaxID, bool) error
	XsdGoPkgHasElems_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_, bool) error
	XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_GroupingCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_GroupingCode_TSAFPTGLAccountID_, bool) error
	TPaymentMethod                                                                                                                                                                                                                                                                                                                                                                                                                                func(*TPaymentMethod, bool) error
	XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_                                                                                                                                                            func(*XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TPaymentTax_, bool) error
	XsdGoPkgHasElems_TaxTable                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_TaxTable, bool) error
	XsdGoPkgHasElems_ProductNumberCode                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_ProductNumberCode, bool) error
	XsdGoPkgHasElem_TaxPercentage                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_TaxPercentage, bool) error
	TxsdGeneralLedgerEntriesSequenceJournal                                                                                                                                                                                                                                                                                                                                                                                                       func(*TxsdGeneralLedgerEntriesSequenceJournal, bool) error
	XsdGoPkgHasElem_GeneralLedgerEntries                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_GeneralLedgerEntries, bool) error
	XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_                                                                                                                               func(*XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus_, bool) error
	XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_                                                                                                                                                   func(*XsdGoPkgHasElem_DocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus_, bool) error
	XsdGoPkgHasElems_Description                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_Description, bool) error
	XsdGoPkgHasElems_UnitOfMeasure                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_UnitOfMeasure, bool) error
	XsdGoPkgHasElems_ShipToAddress                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_ShipToAddress, bool) error
	XsdGoPkgHasElems_Header                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_Header, bool) error
	XsdGoPkgHasElems_SupplierID                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_SupplierID, bool) error
	XsdGoPkgHasElems_Website                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_Website, bool) error
	XsdGoPkgHasElems_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_TaxCodesequenceMovementTaxschema_TaxCode_TSAFTPTMovementTaxCode_, bool) error
	TShippingPointStructure                                                                                                                                                                                                                                                                                                                                                                                                                       func(*TShippingPointStructure, bool) error
	XsdGoPkgHasElems_DeliveryID                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_DeliveryID, bool) error
	XsdGoPkgHasElem_Quantity                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_Quantity, bool) error
	XsdGoPkgHasElem_ExchangeRate                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_ExchangeRate, bool) error
	TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement                                                                                                                                                                                                                                                                                                                                                    func(*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotalsSequenceSettlement, bool) error
	XsdGoPkgHasElems_OpeningDebitBalance                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_OpeningDebitBalance, bool) error
	XsdGoPkgHasElem_SupplierTaxID                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_SupplierTaxID, bool) error
	TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals                                                                                                                                                                                                                                                                                                                                                         func(*TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals, bool) error
	XsdGoPkgHasElems_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_                                                                                                          func(*XsdGoPkgHasElems_SourcePaymentsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourcePayment_TSAFTPTSourcePayment_, bool) error
	XsdGoPkgHasElem_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_                                                       func(*XsdGoPkgHasElem_SourceDocumentIDsequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineLinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_SourceDocumentID_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLineSequenceSourceDocumentID_, bool) error
	XsdGoPkgHasElem_ClosingCreditBalance                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_ClosingCreditBalance, bool) error
	XsdGoPkgHasElems_OpeningCreditBalance                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_OpeningCreditBalance, bool) error
	XsdGoPkgHasElem_TaxonomyReference                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_TaxonomyReference, bool) error
	XsdGoPkgHasElem_AuditFile                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_AuditFile, bool) error
	TxsdSourceDocumentsSequenceWorkingDocuments                                                                                                                                                                                                                                                                                                                                                                                                   func(*TxsdSourceDocumentsSequenceWorkingDocuments, bool) error
	XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_PaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_, bool) error
	XsdGoPkgHasElems_PaymentStatus                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_PaymentStatus, bool) error
	XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_                                                                                                    func(*XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_, bool) error
	XsdGoPkgHasElems_AuditFileVersion                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_AuditFileVersion, bool) error
	XsdGoPkgHasElem_LinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_LinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceLine_, bool) error
	XsdGoPkgHasElems_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_                                                                                                                                                                                                              func(*XsdGoPkgHasElems_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_, bool) error
	XsdGoPkgHasElem_CompanyAddress                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_CompanyAddress, bool) error
	XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt, bool) error
	XsdGoPkgHasElem_SourceDocuments                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_SourceDocuments, bool) error
	XsdGoPkgHasElems_TaxCountryRegion                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_TaxCountryRegion, bool) error
	XsdGoPkgHasElem_BusinessName                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_BusinessName, bool) error
	XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_MasterFilessequenceTxsdAuditFileAuditFileschema_MasterFiles_TxsdAuditFileSequenceMasterFiles_, bool) error
	XsdGoPkgHasElems_SalesInvoicessequenceSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_SalesInvoicessequenceSourceDocumentsschema_SalesInvoices_TxsdSourceDocumentsSequenceSalesInvoices_, bool) error
	XsdGoPkgHasElem_SupplierID                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_SupplierID, bool) error
	XsdGoPkgHasElems_DeliveryDate                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_DeliveryDate, bool) error
	XsdGoPkgHasElems_PostalCode                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_PostalCode, bool) error
	XsdGoPkgHasElems_TotalQuantityIssued                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_TotalQuantityIssued, bool) error
	XsdGoPkgHasElems_TransactionID                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_TransactionID, bool) error
	XsdGoPkgHasElem_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_                                                                                                                                                                                 func(*XsdGoPkgHasElem_LinesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine_, bool) error
	XsdGoPkgHasElems_LocationID                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_LocationID, bool) error
	XsdGoPkgHasElems_OriginatingON                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_OriginatingON, bool) error
	XsdGoPkgHasElems_Quantity                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_Quantity, bool) error
	XsdGoPkgHasElems_SourceBillingsequenceDocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_SourceBillingsequenceDocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_, bool) error
	TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine                                                                                                                                                                                                                                                                                                                                                                                func(*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceLine, bool) error
	XsdGoPkgHasElem_UnitOfMeasure                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_UnitOfMeasure, bool) error
	XsdGoPkgHasElem_SerialNumber                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_SerialNumber, bool) error
	XsdGoPkgHasElems_TaxAccountingBasis                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_TaxAccountingBasis, bool) error
	XsdGoPkgHasElems_WithholdingTaxType                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_WithholdingTaxType, bool) error
	XsdGoPkgHasElems_DescriptionsequenceTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_DescriptionsequenceTaxTableEntryschema_Description_TSAFPTtextTypeMandatoryMax255Car_, bool) error
	TAddressStructure                                                                                                                                                                                                                                                                                                                                                                                                                             func(*TAddressStructure, bool) error
	XsdGoPkgHasElem_DocArchivalNumber                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_DocArchivalNumber, bool) error
	XsdGoPkgHasElem_TaxPointDate                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_TaxPointDate, bool) error
	XsdGoPkgHasElems_WorkType                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_WorkType, bool) error
	XsdGoPkgHasElem_TotalDebit                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_TotalDebit, bool) error
	XsdGoPkgHasElem_UnitPrice                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_UnitPrice, bool) error
	XsdGoPkgHasElems_PaymentStatusDate                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_PaymentStatusDate, bool) error
	XsdGoPkgHasElems_ProductType                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_ProductType, bool) error
	XsdGoPkgHasElems_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_, bool) error
	XsdGoPkgHasElem_TaxPayable                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_TaxPayable, bool) error
	XsdGoPkgHasElems_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_                                                                                                                                                                                           func(*XsdGoPkgHasElems_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_, bool) error
	XsdGoPkgHasElems_CreditLineallLinessequenceTransactionsequenceJournalsequenceGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_CreditLineallLinessequenceTransactionsequenceJournalsequenceGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_, bool) error
	XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_                                                                                                                               func(*XsdGoPkgHasElem_DocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals_, bool) error
	XsdGoPkgHasElems_ProductGroup                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_ProductGroup, bool) error
	XsdGoPkgHasCdata                                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_LineNumber                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_LineNumber, bool) error
	XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_                                                                                       func(*XsdGoPkgHasElem_SourceBillingsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatusDocumentStatussequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SourceBilling_TSAFTPTSourceBilling_, bool) error
	TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals                                                                                                                                                                                                                                                                                                                                                                      func(*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentTotals, bool) error
	XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_                                                                                                      func(*XsdGoPkgHasElem_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_, bool) error
	XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_CustomsDetailssequenceTxsdProductProductschema_CustomsDetails_TCustomsDetails_, bool) error
	XsdGoPkgHasElem_MovementComments                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_MovementComments, bool) error
	XsdGoPkgHasElem_AccountID                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_AccountID, bool) error
	XsdGoPkgHasElem_ProductNumberCode                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_ProductNumberCode, bool) error
	XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_WithholdingTaxDescriptionsequenceWithholdingTaxschema_WithholdingTaxDescription_TSAFPTtextTypeMandatoryMax60Car_, bool) error
	TAddressStructurePT                                                                                                                                                                                                                                                                                                                                                                                                                           func(*TAddressStructurePT, bool) error
	TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus                                                                                                                                                                                                                                                                                                                                                                      func(*TxsdSourceDocumentsSequencePaymentsSequencePaymentSequenceDocumentStatus, bool) error
	XsdGoPkgHasElem_Description                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_Description, bool) error
	XsdGoPkgHasElems_SourceID                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_SourceID, bool) error
	XsdGoPkgHasElems_AccountID                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_AccountID, bool) error
	XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_, bool) error
	XsdGoPkgHasElem_InvoiceStatus                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_InvoiceStatus, bool) error
	XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_                                                                                                          func(*XsdGoPkgHasElems_OrderReferencessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_OrderReferences_TOrderReferences_, bool) error
	XsdGoPkgHasElems_ClosingDebitBalance                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_ClosingDebitBalance, bool) error
	XsdGoPkgHasElems_ProductCompanyTaxID                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_ProductCompanyTaxID, bool) error
	XsdGoPkgHasElems_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_                                         func(*XsdGoPkgHasElems_DebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLine_, bool) error
	XsdGoPkgHasElem_AccountDescription                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_AccountDescription, bool) error
	XsdGoPkgHasElems_UnitPrice                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_UnitPrice, bool) error
	XsdGoPkgHasElem_GrossTotal                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_GrossTotal, bool) error
	XsdGoPkgHasElem_CurrencyAmount                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_CurrencyAmount, bool) error
	TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals                                                                                                                                                                                                                                                                                                                                                                 func(*TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotals, bool) error
	XsdGoPkgHasElems_ProductCode                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_ProductCode, bool) error
	XsdGoPkgHasElems_DocumentTotalssequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_DocumentTotalssequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentTotals_, bool) error
	XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_                                                                                                     func(*XsdGoPkgHasElems_SettlementsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Settlement_TSettlement_, bool) error
	XsdGoPkgHasElems_SupplierTaxID                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_SupplierTaxID, bool) error
	TxsdGeneralLedgerAccountsSequenceAccount                                                                                                                                                                                                                                                                                                                                                                                                      func(*TxsdGeneralLedgerAccountsSequenceAccount, bool) error
	XsdGoPkgHasElem_ProductType                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_ProductType, bool) error
	XsdGoPkgHasElem_Product                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_Product, bool) error
	XsdGoPkgHasElems_TotalDebit                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_TotalDebit, bool) error
	XsdGoPkgHasElems_TaxCodesequenceTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_TaxCodesequenceTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_, bool) error
	XsdGoPkgHasElem_StreetName                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_StreetName, bool) error
	XsdGoPkgHasElem_OriginatingON                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_OriginatingON, bool) error
	XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_                                                                                                                                                                                                                func(*XsdGoPkgHasElems_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_, bool) error
	XsdGoPkgHasElem_WorkStatus                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_WorkStatus, bool) error
	XsdGoPkgHasElems_WorkStatusDate                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_WorkStatusDate, bool) error
	XsdGoPkgHasElem_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_, bool) error
	XsdGoPkgHasElem_TotalCredit                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_TotalCredit, bool) error
	XsdGoPkgHasElem_CurrencyCode                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_CurrencyCode, bool) error
	XsdGoPkgHasElem_EACCode                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_EACCode, bool) error
	XsdGoPkgHasElem_DocumentNumber                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_DocumentNumber, bool) error
	XsdGoPkgHasElems_DateCreated                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_DateCreated, bool) error
	XsdGoPkgHasElems_ShipFrom                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_ShipFrom, bool) error
	XsdGoPkgHasElem_AccountsequenceGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_AccountsequenceGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_, bool) error
	XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_AccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_Account_TxsdGeneralLedgerAccountsSequenceAccount_, bool) error
	XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_CountrysequenceSupplierAddressStructureschema_Country_TSupplierCountry_, bool) error
	XsdGoPkgHasElems_CNCode                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_CNCode, bool) error
	XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_, bool) error
	XsdGoPkgHasElems_SoftwareCertificateNumber                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_SoftwareCertificateNumber, bool) error
	XsdGoPkgHasElems_TaxsequenceLinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Tax_Tax_                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_TaxsequenceLinesequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Tax_Tax_, bool) error
	XsdGoPkgHasElem_Country                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_Country, bool) error
	TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus                                                                                                                                                                                                                                                                                                                                                                 func(*TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentStatus, bool) error
	XsdGoPkgHasElems_Contact                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_Contact, bool) error
	XsdGoPkgHasElems_InvoiceDate                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_InvoiceDate, bool) error
	XsdGoPkgHasElems_SelfBillingIndicator                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_SelfBillingIndicator, bool) error
	XsdGoPkgHasElems_CustomsDetailssequenceProductschema_CustomsDetails_TCustomsDetails_                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_CustomsDetailssequenceProductschema_CustomsDetails_TCustomsDetails_, bool) error
	XsdGoPkgHasElems_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_TaxCodesequencePaymentTaxschema_TaxCode_TPaymentTaxCode_, bool) error
	XsdGoPkgHasElem_HashControl                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_HashControl, bool) error
	XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_BillingAddresssequenceTxsdSupplierSupplierschema_BillingAddress_TSupplierAddressStructure_, bool) error
	XsdGoPkgHasElem_Address                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_Address, bool) error
	XsdGoPkgHasElems_ARCNo                                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_ARCNo, bool) error
	XsdGoPkgHasElems_FiscalYear                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_FiscalYear, bool) error
	XsdGoPkgHasElem_EndDate                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_EndDate, bool) error
	XsdGoPkgHasElem_MovementStatusDate                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_MovementStatusDate, bool) error
	TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus                                                                                                                                                                                                                                                                                                                                                         func(*TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus, bool) error
	TxsdSourceDocumentsSequenceMovementOfGoods                                                                                                                                                                                                                                                                                                                                                                                                    func(*TxsdSourceDocumentsSequenceMovementOfGoods, bool) error
	XsdGoPkgHasElems_IECAmount                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_IECAmount, bool) error
	XsdGoPkgHasElem_IECAmount                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_IECAmount, bool) error
	XsdGoPkgHasElem_TaxCode                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_TaxCode, bool) error
	XsdGoPkgHasElem_PaymentStatusDate                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_PaymentStatusDate, bool) error
	XsdGoPkgHasElems_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_MovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_MovementOfGoods_TxsdSourceDocumentsSequenceMovementOfGoods_, bool) error
	XsdGoPkgHasElem_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_ShipFromAddresssequenceTxsdSupplierSupplierschema_ShipFromAddress_TSupplierAddressStructure_, bool) error
	XsdGoPkgHasElem_SourceID                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_SourceID, bool) error
	TxsdSourceDocumentsSequencePaymentsSequencePayment                                                                                                                                                                                                                                                                                                                                                                                            func(*TxsdSourceDocumentsSequencePaymentsSequencePayment, bool) error
	XsdGoPkgHasElem_PaymentsequenceDocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Payment_TPaymentMethod_                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_PaymentsequenceDocumentTotalssequenceInvoicesequenceSalesInvoicessequenceSourceDocumentsschema_Payment_TPaymentMethod_, bool) error
	XsdGoPkgHasElem_ProductGroup                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_ProductGroup, bool) error
	XsdGoPkgHasElems_CustomsInformationsequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_CustomsInformation_TCustomsInformation_                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_CustomsInformationsequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_CustomsInformation_TCustomsInformation_, bool) error
	XsdGoPkgHasElems_SourceDocuments                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_SourceDocuments, bool) error
	XsdGoPkgHasElem_OrderReferencessequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_OrderReferences_TOrderReferences_                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_OrderReferencessequenceLinesequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_OrderReferences_TOrderReferences_, bool) error
	XsdGoPkgHasElem_ThirdPartiesBillingIndicator                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_ThirdPartiesBillingIndicator, bool) error
	XsdGoPkgHasElems_TaxAmount                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_TaxAmount, bool) error
	XsdGoPkgHasElems_TaxExemptionReason                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_TaxExemptionReason, bool) error
	XsdGoPkgHasElems_MovementType                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_MovementType, bool) error
	XsdGoPkgHasElems_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_SettlementDiscountsequenceSettlementschema_SettlementDiscount_TSAFPTtextTypeMandatoryMax30Car_, bool) error
	XsdGoPkgHasElems_JournalID                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_JournalID, bool) error
	XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_ func(*XsdGoPkgHasElem_CreditAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLineCreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditAmount_TSAFmonetaryType_, bool) error
	XsdGoPkgHasElem_TransactionID                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_TransactionID, bool) error
	TCustomsInformation                                                                                                                                                                                                                                                                                                                                                                                                                           func(*TCustomsInformation, bool) error
	XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_TaxCodesequenceTxsdTaxTableEntryTaxTableEntryschema_TaxCode_TaxTableEntryTaxCode_, bool) error
	XsdGoPkgHasElem_ShipTo                                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_ShipTo, bool) error
	XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_TaxTypesequenceMovementTaxschema_TaxType_TSAFTPTMovementTaxType_, bool) error
	XsdGoPkgHasElems_GroupingCategory                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_GroupingCategory, bool) error
	XsdGoPkgHasElems_PaymentRefNo                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_PaymentRefNo, bool) error
	XsdGoPkgHasElem_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_StockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_StockMovement_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovement_, bool) error
	XsdGoPkgHasElem_ProductID                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_ProductID, bool) error
	XsdGoPkgHasElem_RecordID                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_RecordID, bool) error
	XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_                                                                                                                                                func(*XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLineLinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_Tax_, bool) error
	TxsdAuditFileSequenceMasterFiles                                                                                                                                                                                                                                                                                                                                                                                                              func(*TxsdAuditFileSequenceMasterFiles, bool) error
	XsdGoPkgHasElem_UNNumber                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_UNNumber, bool) error
	XsdGoPkgHasElem_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_WorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkDocument_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument_, bool) error
	XsdGoPkgHasElems_DocumentStatussequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_DocumentStatussequenceWorkDocumentsequenceWorkingDocumentssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentStatus_, bool) error
	XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_JournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Journal_TxsdGeneralLedgerEntriesSequenceJournal_, bool) error
	XsdGoPkgHasElems_EndDate                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_EndDate, bool) error
	XsdGoPkgHasElem_Telephone                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_Telephone, bool) error
	XsdGoPkgHasElem_SelfBillingIndicator                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_SelfBillingIndicator, bool) error
	XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_PostalCodesequenceAddressStructurePTschema_PostalCode_TPostalCodePT_, bool) error
	XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_                                                                                                            func(*XsdGoPkgHasElem_CurrencysequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceDocumentTotalsDocumentTotalssequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Currency_TCurrency_, bool) error
	XsdGoPkgHasElem_WorkStatusDate                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_WorkStatusDate, bool) error
	XsdGoPkgHasElems_PaymentssequenceSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_PaymentssequenceSourceDocumentsschema_Payments_TxsdSourceDocumentsSequencePayments_, bool) error
	XsdGoPkgHasElem_NumberOfEntries                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_NumberOfEntries, bool) error
	XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_                                                                                                                                                                                            func(*XsdGoPkgHasElems_WithholdingTaxsequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_WithholdingTax_TWithholdingTax_, bool) error
	XsdGoPkgHasElems_ThirdPartiesBillingIndicator                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_ThirdPartiesBillingIndicator, bool) error
	XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_                                                                                                   func(*XsdGoPkgHasElems_DocumentTotalssequenceTxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentWorkDocumentsequenceTxsdSourceDocumentsSequenceWorkingDocumentsWorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_DocumentTotals_TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocumentSequenceDocumentTotals_, bool) error
	XsdGoPkgHasElem_Reference                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_Reference, bool) error
	TxsdProduct                                                                                                                                                                                                                                                                                                                                                                                                                                   func(*TxsdProduct, bool) error
	XsdGoPkgHasElem_TaxCountryRegion                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_TaxCountryRegion, bool) error
	XsdGoPkgHasElem_ShipFrom                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_ShipFrom, bool) error
	XsdGoPkgHasElems_RecordID                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_RecordID, bool) error
	XsdGoPkgHasElem_Header                                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_Header, bool) error
	XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_WorkingDocumentssequenceTxsdSourceDocumentsSourceDocumentsschema_WorkingDocuments_TxsdSourceDocumentsSequenceWorkingDocuments_, bool) error
	XsdGoPkgHasElems_InvoiceStatus                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_InvoiceStatus, bool) error
	XsdGoPkgHasElem_Fax                                                                                                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_Fax, bool) error
	TxsdAuditFile                                                                                                                                                                                                                                                                                                                                                                                                                                 func(*TxsdAuditFile, bool) error
	XsdGoPkgHasElems_GeneralLedgerEntries                                                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_GeneralLedgerEntries, bool) error
	XsdGoPkgHasElems_DocArchivalNumber                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_DocArchivalNumber, bool) error
	XsdGoPkgHasElems_TaxCode                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_TaxCode, bool) error
	XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_TaxRegistrationNumbersequenceTxsdHeaderHeaderschema_TaxRegistrationNumber_TSAFPTPortugueseVatNumber_, bool) error
	XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_                                                                                                                                                            func(*XsdGoPkgHasElems_LinesequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_Line_TxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceSequenceLine_, bool) error
	XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_                                                                                                             func(*XsdGoPkgHasElem_TaxsequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceLineLinesequenceTxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementStockMovementsequenceTxsdSourceDocumentsSequenceMovementOfGoodsMovementOfGoodssequenceTxsdSourceDocumentsSourceDocumentsschema_Tax_TMovementTax_, bool) error
	XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_                                                                                                                                                                                                               func(*XsdGoPkgHasElem_PaymentTypesequenceTxsdSourceDocumentsSequencePaymentsSequencePaymentPaymentsequenceTxsdSourceDocumentsSequencePaymentsPaymentssequenceTxsdSourceDocumentsSourceDocumentsschema_PaymentType_TSAFTPTPaymentType_, bool) error
	XsdGoPkgHasElem_TransactionDate                                                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_TransactionDate, bool) error
	XsdGoPkgHasElems_HeaderComment                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_HeaderComment, bool) error
	XsdGoPkgHasElem_ShipToAddress                                                                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_ShipToAddress, bool) error
	XsdGoPkgHasElems_TransactionDate                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_TransactionDate, bool) error
	XsdGoPkgHasElem_BillingAddress                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_BillingAddress, bool) error
	XsdGoPkgHasElem_WithholdingTaxType                                                                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_WithholdingTaxType, bool) error
	XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_     func(*XsdGoPkgHasElem_DebitAmountsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllDebitLineDebitLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_DebitAmount_TSAFmonetaryType_, bool) error
	XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_                                       func(*XsdGoPkgHasElem_CreditLineallTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesLinessequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_CreditLine_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionSequenceLinesAllCreditLine_, bool) error
	TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument                                                                                                                                                                                                                                                                                                                                                                               func(*TxsdSourceDocumentsSequenceWorkingDocumentsSequenceWorkDocument, bool) error
	XsdGoPkgHasElems_SettlementAmount                                                                                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_SettlementAmount, bool) error
	XsdGoPkgHasElems_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_                                                                                                                                                                                            func(*XsdGoPkgHasElems_SpecialRegimessequenceTxsdSourceDocumentsSequenceSalesInvoicesSequenceInvoiceInvoicesequenceTxsdSourceDocumentsSequenceSalesInvoicesSalesInvoicessequenceTxsdSourceDocumentsSourceDocumentsschema_SpecialRegimes_TSpecialRegimes_, bool) error
	XsdGoPkgHasElem_TransactionsequenceJournalsequenceGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_TransactionsequenceJournalsequenceGeneralLedgerEntriesschema_Transaction_TxsdGeneralLedgerEntriesSequenceJournalSequenceTransaction_, bool) error
	XsdGoPkgHasElems_Customer                                                                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_Customer, bool) error
	XsdGoPkgHasElems_Region                                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_Region, bool) error
	XsdGoPkgHasElems_Telephone                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_Telephone, bool) error
	XsdGoPkgHasElems_DocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_DocumentStatussequenceStockMovementsequenceMovementOfGoodssequenceSourceDocumentsschema_DocumentStatus_TxsdSourceDocumentsSequenceMovementOfGoodsSequenceStockMovementSequenceDocumentStatus_, bool) error
	XsdGoPkgHasElems_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_WithholdingTaxAmountsequenceWithholdingTaxschema_WithholdingTaxAmount_TSAFmonetaryType_, bool) error
	XsdGoPkgHasElems_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_CountrysequenceAddressStructurePTschema_Country_XsdtString_Pt, bool) error
	XsdGoPkgHasElem_GroupingCategory                                                                                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_GroupingCategory, bool) error
	XsdGoPkgHasElems_NumberOfMovementLines                                                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_NumberOfMovementLines, bool) error
	XsdGoPkgHasElems_TaxPercentage                                                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_TaxPercentage, bool) error
	XsdGoPkgHasElems_Country                                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_Country, bool) error
	XsdGoPkgHasElem_ATDocCodeID                                                                                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_ATDocCodeID, bool) error
	XsdGoPkgHasElems_StartDate                                                                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_StartDate, bool) error
	XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_                                                                                                                                                                                            func(*XsdGoPkgHasElem_PeriodsequenceTxsdGeneralLedgerEntriesSequenceJournalSequenceTransactionTransactionsequenceTxsdGeneralLedgerEntriesSequenceJournalJournalsequenceTxsdGeneralLedgerEntriesGeneralLedgerEntriesschema_Period_TSAFPTAccountingPeriod_, bool) error
	XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_TaxonomyCodesequenceTxsdGeneralLedgerAccountsSequenceAccountAccountsequenceTxsdGeneralLedgerAccountsGeneralLedgerAccountsschema_TaxonomyCode_TSAFTaxonomyCode_, bool) error
}
